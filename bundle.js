!function(t){var e={};function r(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(i,a,function(e){return t[e]}.bind(null,a));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/shop-admin-page/",r(r.s=52)}([function(t,e,r){"use strict";var i="content"in document.createElement("template")?function(t){const e=document.createElement("template");return e.innerHTML=t,e.content.firstElementChild}:function(t){const e=document.createElement("div");return e.innerHTML=t,e.firstElementChild};function a(t){return t.replace(/&/g,"&").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"<").replace(/>/g,">")}function n({tmpl:t,data:e}){if(t&&e)return t.replace(/{([^"]{1,})}/g,(t,r)=>void 0!==e[r]?e[r]:"")}function o(t){const e=new Date(t).toDateString().split(" ");return`${e[1]} ${e[2]}, ${e[3]}`}function s(t){let e=t;if(t>=1e3){const r=t%1e3;e=`${(t-r)/1e3},${r}`}return`$${e}`}function l(t){const e=new Date(1970,0,5);let r="",i=0;for(;i<7;){r+=`<${t}>${e.toLocaleString("default",{weekday:"narrow"})}</${t}>`,e.setDate(e.getDate()+1),i++}return r}function c(t,e,r){let i,a=!1,n=!0;return function(){i=arguments,n&&(t.apply(e,...i),n=!1),a||(a=!0,setTimeout((function(){t.apply(e,...i),a=!1}),r))}}r(24);const d={elem:"notification",warning:"notification--warning",error:"notification--error"};class u{constructor({message:t,container:e,type:r}){this.message=t,this.container=e,this.type=r,this.duration=this.getDuration(),this.classNames=this.getClasses(),this.addElem(),this.isFinished=!1}addElem(){this.elem=document.createElement("div"),this.elem.classList.add(...this.classNames),this.elem.dataset.state="shown",this.elem.innerHTML=this.message,this.container.prepend(this.elem),setTimeout(()=>{this.hideElem()},this.duration)}async hideElem(t={}){return this.isFinished=!0,this.elem.dataset.state="hidden",new Promise((t,e)=>{this.elem.addEventListener("animationend",()=>{this.elem.remove(),t()})})}getDuration(){return"error"===this.type?5e3:3e3}getClasses(){const t=[d.elem];return this.type&&d[this.type]&&t.push(d[this.type]),t}}const h=document.createElement("div");h.classList.add("notifications"),document.body.append(h);let p=[];async function g(t){let e;try{e=await fetch(t)}catch(r){throw new m(e,null,`Network error for url ${t}`)}if(!e.ok){let r;const i=e.statusText;try{r=await e.json()}catch(t){}let a=`Error ${e.status} for url ${t}`;throw i&&(a+=`: ${i}`),new m(e,r,a)}try{e=await e.json()}catch(t){throw new m(e,null,t.message)}return e}class m extends Error{constructor(t,e,r){super(r),this.name="FetchError",this.response=t,this.body=e}}window.addEventListener("unhandledrejection",t=>{t.reason instanceof m&&async function(t,e){const r=new u({message:t,container:h,type:e});p.push(r),r.elem.offsetTop<0&&(p=p.filter(t=>!t.isFinished),p.shift().hideElem())}(t.reason.message,"error")}),r.d(e,"a",(function(){return i})),r.d(e,"b",(function(){return a})),r.d(e,"d",(function(){return n})),r.d(e,"e",(function(){return o})),r.d(e,"f",(function(){return s})),r.d(e,"g",(function(){return l})),r.d(e,"h",(function(){return c})),r.d(e,"c",(function(){return g}))},function(t,e,r){"use strict";e.a={form:"product-form",list:"product-form__list",item:"product-form__item",itemTiny:"product-form__item--tiny",itemFollow:"product-form__item--follow",itemFull:"product-form__item--full",label:"product-form__label",input:"product-form__input",inputText:"product-form__input--text",inputNumber:"product-form__input--number",inputSelect:"product-form__input--select",inputTextarea:"product-form__input--textarea",imgsList:"product-form__images-list",imgsItem:"product-form__images-item",img:"product-form__image",imgWrapper:"product-form__image-wrapper",imgSource:"product-form__image-source",imgRemove:"product-form__image-remove",preview:"product-form__preview",footer:"product-form__footer",submit:"product-form__submit"}},function(t,e,r){"use strict";e.a={elem:"sortable-table",table:"sortable-table__table",thead:"sortable-table__thead",header:"sortable-table__header",row:"sortable-table__row",cell:"sortable-table__cell",cellError:"sortable-table__cell--error",cellSorter:"sortable-table__cell--sorter",img:"sortable-table__image",imgWrapper:"sortable-table__image-wrapper",preview:"sortable-table__preview",link:"sortable-table__link",category:"sortable-table__category",tooltipCategory:"sortable-table__tooltip-category",tooltipSubcategory:"sortable-table__tooltip-subcategory"}},function(t,e,r){"use strict";e.a={elem:"column-chart",content:"column-chart__content",header:"column-chart__header",title:"column-chart__title",total:"column-chart__total",list:"column-chart__list",item:"column-chart__item",tooltip:"column-chart__tooltip",tooltipDate:"column-chart__tooltip-date",tooltipQuantity:"column-chart__tooltip-quantity",error:"column-chart__error"}},function(t,e,r){"use strict";e.a={elem:"categories",list:"categories__list",listTop:"categories__list--topcategories",listSubcats:"categories__list--subcategories",item:"categories__item",itemTop:"categories__item--topcategory",itemSub:"categories__item--subcategory",itemOpen:"categories__item--open",toggler:"categories__toggler",counter:"categories__counter"}},function(t,e,r){"use strict";var i,a=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},n=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),o={};function s(t,e,r){for(var i=0;i<e.length;i++){var a={css:e[i][1],media:e[i][2],sourceMap:e[i][3]};o[t][i]?o[t][i](a):o[t].push(m(a,r))}}function l(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var a=r.nc;a&&(i.nonce=a)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var o=n(t.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var c,d=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function u(t,e,r,i){var a=r?"":i.css;if(t.styleSheet)t.styleSheet.cssText=d(e,a);else{var n=document.createTextNode(a),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(n,o[e]):t.appendChild(n)}}function h(t,e,r){var i=r.css,a=r.media,n=r.sourceMap;if(a?t.setAttribute("media",a):t.removeAttribute("media"),n&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var p=null,g=0;function m(t,e){var r,i,a;if(e.singleton){var n=g++;r=p||(p=l(e)),i=u.bind(null,r,n,!1),a=u.bind(null,r,n,!0)}else r=l(e),i=h.bind(null,r,e),a=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else a()}}t.exports=function(t,e,r){return(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=a()),t=r.base?t+r.base:t,e=e||[],o[t]||(o[t]=[]),s(t,e,r),function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){o[t]||(o[t]=[]),s(t,e,r);for(var i=e.length;i<o[t].length;i++)o[t][i]();o[t].length=e.length,0===o[t].length&&delete o[t]}}}},function(t,e,r){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=function(t,e){var r=t[1]||"",i=t[3];if(!i)return r;if(e&&"function"==typeof btoa){var a=(o=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),n=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[r].concat(n).concat([a]).join("\n")}var o,s,l;return[r].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,i){"string"==typeof t&&(t=[[null,t,""]]);var a={};if(i)for(var n=0;n<this.length;n++){var o=this[n][0];null!=o&&(a[o]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);i&&a[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),e.push(l))}},e}},function(t,e,r){"use strict";r.d(e,"a",(function(){return a})),r.d(e,"d",(function(){return n})),r.d(e,"b",(function(){return o})),r.d(e,"e",(function(){return s})),r.d(e,"c",(function(){return l}));var i=r(1);const a='<header class="page-content__header">\n  <h1 class="page-content__title">\n  <a href="/products">Products</a>\n  /Edit Product</h1>\n</header>',n=`<label class="${i.a.label}">\n  {fieldName}\n\n  <input\n    class="${i.a.input} ${i.a.inputText}"\n    type="text"\n    name="{id}"\n    value="{value}"/>\n</label>`,o=`<label class="${i.a.label}">\n  {fieldName}\n\n  <input\n    class="${i.a.input} ${i.a.inputNumber}"\n    type="number"\n    name="{id}"\n    value="{value}"/>\n</label>`,s=`<label class="${i.a.label}">\n  {fieldName}\n\n  <textarea\n    class="${i.a.input} ${i.a.inputTextarea}"\n    name="{id}">{value}</textarea>\n</label>`,l=`<label class="${i.a.label}">\n  {fieldName}\n\n  <select\n    class="${i.a.input} ${i.a.inputSelect}"\n    name="{id}">\n    {options}\n  </select>\n</label>`},function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));r(34);class i{constructor({title:t,text:e,callback:r,callbackText:i,error:a}){this.title=t,this.text=e||"Something went wrong",this.callback=r,this.callbackText=i,this.error=a,!this.title&&this.error&&(this.title="Error"),this.createElement()}createElement(){this.elem=document.createElement("div"),this.elem.classList.add("page-message"),this.error&&this.elem.classList.add("page-message--error"),this.content=`<h3>${this.title}</h3><p>${this.text}</p>`,this.error&&(this.content+=`<div class="page-message__error">\n        <div class="page-message__error-text">\n          <strong>${this.error.name}</strong>: ${this.error.message}</div>\n      </div>`),this.elem.insertAdjacentHTML("afterBegin",this.content)}}},function(t,e,r){"use strict";var i=r(0),a=r(11),n=r(2);e.a={images:{title:"Image",render({images:t}){if(!t||!t[0].url)return"";const e=t[0].url;return`<div class="${n.a.imgWrapper}">\n      <img src="${e}" class="${n.a.img}">\n      <span style="background-image: url(${e})" class="${n.a.preview}"><span>\n      <div>`},compare:null},title:{title:"Name",render:({title:t,id:e})=>`\n      ${t}\n      <a class="${n.a.link}" href="/products/${e}"></a>\n      `,compare:(t,e)=>t.title.localeCompare(e.title)},subcategory:{title:"Category",render({subcategory:t}){const e=t.category,r=`<span class="${n.a.tooltipCategory}">${e.title}</span>/<span class="${n.a.tooltipSubcategory}">${t.title}</span>`;return`<span class="${n.a.category}" data-tooltip-content="${Object(i.b)(r)}">${t.title}</span>`},compare(t,e){const r=t.subcategory.title,i=e.subcategory.title;return r.localeCompare(i)}},quantity:{title:"Quantity",render:({quantity:t})=>t,compare:(t,e)=>t.quantity-e.quantity},price:{title:"Price",render:({price:t})=>Object(i.f)(t),compare:(t,e)=>t.price-e.price},status:{title:"Status",render:({status:t})=>a.a[t],compare:(t,e)=>t.status-e.status}}},function(t,e){var r,i,a=t.exports={};function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(r===setTimeout)return setTimeout(t,0);if((r===n||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:n}catch(t){r=n}try{i="function"==typeof clearTimeout?clearTimeout:o}catch(t){i=o}}();var l,c=[],d=!1,u=-1;function h(){d&&l&&(d=!1,l.length?c=l.concat(c):u=-1,c.length&&p())}function p(){if(!d){var t=s(h);d=!0;for(var e=c.length;e;){for(l=c,c=[];++u<e;)l&&l[u].run();u=-1,e=c.length}l=null,d=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===o||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function g(t,e){this.fun=t,this.array=e}function m(){}a.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new g(t,e)),1!==c.length||d||s(p)},g.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=m,a.addListener=m,a.once=m,a.off=m,a.removeListener=m,a.removeAllListeners=m,a.emit=m,a.prependListener=m,a.prependOnceListener=m,a.listeners=function(t){return[]},a.binding=function(t){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(t){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(t,e,r){"use strict";e.a={0:"Disabled",1:"Enabled"}},function(t,e,r){"use strict";var i=r(0),a="tooltips-container",n="tooltips-container--dimmed",o="tooltip";r(28);r.d(e,"a",(function(){return s}));class s{constructor({elem:t,dimSiblings:e}){this.elem=t,this.elem.classList.add(a),this.dimSiblings=e,this.tooltip=Object(i.a)(`<div class="${o}"></div>`),this.elem.append(this.tooltip),this.listMouseMove=this.listMouseMove.bind(this),this.listMouseOut=this.listMouseOut.bind(this),this.elem.addEventListener("mousemove",this.listMouseMove),this.elem.addEventListener("mouseleave",this.listMouseOut)}listMouseMove(){if(!event.target.dataset.tooltipContent)return void this.hideTooltip();const{tooltipContent:t}=event.target.dataset;this.tooltip.innerHTML=t,this.tooltip.dataset.visible=1,this.elemCoords=this.elem.getBoundingClientRect();const e={x:event.clientX-this.elemCoords.x,y:event.clientY-this.elemCoords.y};this.tooltip.style=`transform: translate(${e.x}px, ${e.y}px)`,this.tooltipCoords=this.tooltip.getBoundingClientRect();const r=this.tooltipCoords.right-document.documentElement.clientWidth;r>0&&(e.x-=r,this.tooltip.style=`transform: translate(${e.x}px, ${e.y}px)`),this.dimSiblings&&this.elem.classList.add(n)}listMouseOut(){event.target.dataset.tooltipContent||this.hideTooltip()}hideTooltip(){this.tooltip.dataset.visible=0,this.elem.classList.remove(n)}}},function(t,e,r){"use strict";var i={0:"desc",1:"asc"};r.d(e,"a",(function(){return a}));const a=t=>i[+t]},function(t,e,r){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,r){"use strict";var i=r(3);const a=`<header class="${i.a.header}">\n  <h3 class="${i.a.title}">{title}</h3>\n  <div class="${i.a.total}">{total}</div>\n</header>`,n=`<li\n  class="${i.a.item}"\n  data-tooltip-content="{tootipContent}"\n  style="height: {height}"></li>`;e.a={header:a,chartItem:n}},function(t,e,r){"use strict";var i=r(7),a={0:"Disabled",1:"Enabled"},n=r(0),o=r(1);function s(t){const e=[];for(const r of t)for(const t of r.subcategories)e.push({value:t.id,text:`${r.title} > ${t.title}`});return e}function l(t,e){return t.map((t,r)=>{const i=t.value||r,a=t.text||t;return`<option value="${i}" ${i===e?"selected":""}>${a}</option>`}).join("")}e.a={images:{render:({images:t})=>t?function(t){const e=t.map(t=>`<li class="${o.a.imgsItem}">\n        <div class="${o.a.imgWrapper}">\n          <img src="${t.url}" class="${o.a.img}">\n          <span style="background-image: url(${t.url})" class="${o.a.preview}"><span>\n        </div>\n        <span class="${o.a.imgSource}">${t.source}</span>\n        <button type="button" class="${o.a.imgRemove}">Remove</button>\n      </li>`);return` + upload\n    <ul class="${o.a.imgsList}" is="draggable-list">${e.join(" ")}</ul>`}(t):"",compare:null},title:{render({title:t}){const e={id:"title",fieldName:"Name",value:t};return Object(n.d)({tmpl:i.d,data:e})}},description:{render({description:t}){const e={id:"description",fieldName:"Description",value:t};return Object(n.d)({tmpl:i.e,data:e})}},subcategory:{render({categories:t,subcategory:e}){const r={id:"subcategory",fieldName:"Category",options:l(s(t),e)};return Object(n.d)({tmpl:i.c,data:r})}},quantity:{render({quantity:t}){const e={id:"quantity",fieldName:"Quantity",value:t};return Object(n.d)({tmpl:i.b,data:e})}},price:{render({price:t}){const e={id:"price",fieldName:"Price",value:t};return Object(n.d)({tmpl:i.b,data:e})}},discount:{render({discount:t}){const e={id:"discount",fieldName:"Discount",value:t};return Object(n.d)({tmpl:i.b,data:e})}},status:{render({status:t}){const e={id:"status",fieldName:"Status",value:t,options:l(Object.values(a),t)};return Object(n.d)({tmpl:i.c,data:e})}}}},function(t,e,r){"use strict";r.r(e),e.default=r.p+"682dedaafb044e7b9ea352a70baaf569.svg"},function(t,e,r){"use strict";r.r(e),e.default=r.p+"fb112b550276d752d0b3e107ade8d617.svg"},function(t,e,r){"use strict";r.r(e),e.default=r.p+"83c75420d0360ed22511c092e57d1d54.svg"},function(t,e,r){"use strict";r.r(e),e.default=r.p+"92679154afde0815c6222c7c0401f442.svg"},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return s}));var i=r(12),a=r(0),n=r(3),o=r(15);r(30);class s extends HTMLElement{constructor(){super(),this.elem=document.createElement("div"),this.apiUrl=t.env.API_URL||"https://course-js.javascript.ru",this.changeDate=this.changeDate.bind(this)}async connectedCallback(){const{type:t,isMoney:e,from:r,to:i}=this.dataset;this.dates={from:new Date(r),to:new Date(i)},this.type=t,this.formatTotal=e?a.f:null,this.classList.add(n.a.elem,`${n.a.elem}--${t}`),this.elem.classList.add(n.a.content),this.title=`Total ${t}`,this.url=this.getUrl(),await this.render(),this.append(this.elem),document.addEventListener("changeDate",this.changeDate)}getUrl(){return`${this.apiUrl}/api/dashboard/${this.type}?from=${this.dates.from}&to=${this.dates.to}`}async getData(){try{return{data:await Object(a.c)(this.url)}}catch(t){return{error:t}}}async render(){const{data:t,error:e}=await this.getData();if(this.data=t,e)return void this.elem.insertAdjacentHTML("beforeEnd",`<div class="${n.a.error}">${e}</div>`);this.values=Object.values(this.data),0===this.values.length&&this.values.push("No data");const r=this.getHeaderStr(),i=this.getListStr();this.elem.insertAdjacentHTML("beforeEnd",r+i),this.addActions()}getHeaderStr(){return this.total=this.values.reduce((t,e)=>t+e,0),this.formatTotal&&(this.total=this.formatTotal(this.total)),Object(a.d)({tmpl:o.a.header,data:this})}getListStr(){const t=Math.max(...this.values);let e="";for(const r in this.data){const i=Object(a.e)(r);let s=this.data[r];const l=`${(s/t*100).toFixed(2)}%`;this.formatTotal&&(s=this.formatTotal(s));const c=`<small class="${n.a.tooltipDate}">${i}</small><div class="${n.a.tooltipQuantity}">${s}</div>`;e+=Object(a.d)({tmpl:o.a.chartItem,data:{...this,height:l,tootipContent:Object(a.b)(c)}})}return`<ul class="${n.a.list}">${e}</ul>`}addActions(){this.tooltips=new i.a({elem:this.elem,dimSiblings:!0})}async changeDate(t){if(!t.detail||!t.detail.dates)return;const{from:e,to:r}=t.detail.dates;this.dates={from:e,to:r},this.url=this.getUrl(),this.elem.innerHTML="",await this.render(),this.append(this.elem)}}}).call(this,r(10))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d}));var i=r(12),a=r(2),n=r(11),o=r(9),s=r(0),l=r(13),c=r(8);r(36);class d extends HTMLElement{constructor(){super(),this.sorting={current:null,isAsc:!0},this.page={items:20,current:0,isDataEnded:!1},this.apiUrl=t.env.API_URL||"https://course-js.javascript.ru",this.changeDate=this.changeDate.bind(this)}async connectedCallback(){const{url:t,fieldsList:e,orderField:r,orderDirection:i,isDynamic:a,from:n,to:o}=this.dataset;this.dates={from:n,to:o},this.url=this.apiUrl+t,this.fieldsList=JSON.parse(e.replace(/'/g,'"')),this.isDynamic=+a,this.order={field:r,direction:i},this.initTable=this.initTable.bind(this),this.isLoading=!1,this.order&&void 0!==this.order.direction&&(this.sorting.isAsc=this.order.direction),this.fetchUrl=this.getFetchUrl(),this.onBodyScrollThrottle=Object(s.h)(this.onBodyScroll,this,500),this.initTable(),document.addEventListener("changeDate",this.changeDate)}async loadData(){this.isLoading=!0,this.table.dataset.loading=1;try{const t=await Object(s.c)(this.fetchUrl);return this.isLoading=!1,this.table.dataset.loading=0,t}catch(t){const e=new c.a({error:t});this.table.dataset.loading=0,this.tBody.insertAdjacentHTML("beforeEnd",`<tr class="${a.a.row}"><td class="${a.a.cellError}">${e.elem.outerHTML}</tr>`)}}initTable(){this.createLayout(),this.addElemHeader(),this.addTableEvents(),this.fillTBody()}async fillTBody(){this.page.isDataEnded||(this.tableRows=await this.loadData(),this.tableRows.length<this.page.items&&(this.page.isDataEnded=!0,0===this.tableRows.length)||(!this.isDynamic&&this.order&&this.order.field?this.sortRows(this.order.field):this.renderTBody()))}getFetchUrl(){const t={start:this.page.current*this.page.items,end:(this.page.current+1)*this.page.items,sort:this.order.field,order:Object(l.a)(this.sorting.isAsc)};this.dates&&this.dates.from&&(t.from=this.dates.from,t.to=this.dates.to);let e="";for(const r in t){let i="_";"from"!==r&&"to"!==r||(i=""),e+=`&${i}${r}=${t[r]}`}return this.url+e}createLayout(){this.classList.add(a.a.elem),this.table=document.createElement("table"),this.table.classList.add(a.a.table),this.tBody=document.createElement("tbody"),this.table.append(this.tBody),this.table.insertAdjacentHTML("beforeEnd",`<tfoot><tr><td colspan="${this.fieldsList.length}"><div class="spinner"></div></td></tr></tfoot>`),this.append(this.table)}addElemHeader(){let t="";this.fieldsList.forEach(e=>{let r=a.a.cell;const i={sorter:"",sortDirection:""};if(o.a[e].compare&&(r+=` ${a.a.cellSorter}`,i.sorter='data-sorter="1"'),e===this.order.field){const t=Object(l.a)(this.sorting.isAsc);i.sortDirection=`data-sort-direction="${t}"`}t+=`<th class="${r}"\n        data-name="${e}"\n        ${i.sorter}\n        ${i.sortDirection}\n        >${o.a[e].title}</th>`});const e=`<thead class="${a.a.thead}"><tr class="${a.a.header} ${a.a.row}">\n      ${t}\n    </tr></thead>`;this.table.insertAdjacentHTML("afterBegin",e),this.sorting.current=this.table.querySelector("[data-sort-direction]")}sorterOnClick(t){const{name:e}=t.dataset;t.dataset.sortDirection?this.sorting.isAsc=!this.sorting.isAsc:(this.sorting.current&&delete this.sorting.current.dataset.sortDirection,this.sorting.isAsc=!0,this.sorting.current=t),t.dataset.sortDirection=Object(l.a)(this.sorting.isAsc),this.isDynamic?this.sortRowsDynamic(e):this.sortRows(e)}sortRows(t){this.tableRows.sort(o.a[t].compare),this.sorting.isAsc||this.tableRows.reverse(),this.tBody.innerHTML="",this.renderTBody()}sortRowsDynamic(t){this.order.field=t,this.page.current=0,this.page.isDataEnded=!1,this.fetchUrl=this.getFetchUrl(),this.tBody.innerHTML="",this.fillTBody()}addTableEvents(){this.table.addEventListener("click",this),window.addEventListener("scroll",this.onBodyScrollThrottle),this.tooltips=new i.a({elem:this})}handleEvent(){event.target.dataset.sorter&&this.sorterOnClick(event.target)}onBodyScroll(){if(this.isLoading)return;document.documentElement.getBoundingClientRect().bottom-window.innerHeight<100&&(this.page.current++,this.fetchUrl=this.getFetchUrl(),this.fillTBody())}renderTBody(){this.pageYOffset=window.pageYOffset,this.tableRows.forEach(t=>{let e="";const{status:r}=t;this.fieldsList.forEach(i=>{const s=[a.a.cell,`${a.a.cell}--${i}`,`${a.a.cell}--${n.a[r].toLowerCase()}`],l=(0,o.a[i].render)(t);l&&(e+=`<td class="${s.join(" ")}">${l}</td>`)}),this.tBody.insertAdjacentHTML("beforeEnd",`<tr class="${a.a.row}">${e}</tr>`)}),this.pageYOffset&&window.scrollTo(0,this.pageYOffset)}async changeDate(t){t.detail&&t.detail.dates&&(this.dates=t.detail.dates,this.fetchUrl=this.getFetchUrl(),this.tBody.innerHTML="",this.fillTBody())}}}).call(this,r(10))},function(t,e,r){"use strict";var i=r(1);e.a=[{name:"title"},{name:"description",mods:[i.a.itemFull]},{name:"images",mods:[i.a.itemFull]},{name:"subcategory"},{name:"price",mods:[i.a.itemTiny]},{name:"discount",mods:[i.a.itemTiny,i.a.itemFollow]},{name:"quantity",mods:[i.a.itemTiny]},{name:"status",mods:[i.a.itemTiny]}]},function(t,e,r){var i=r(5),a=r(25);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){(e=r(6)(!1)).push([t.i,'.notifications{position:fixed;display:flex;flex-direction:column;justify-content:flex-end;right:1rem;bottom:1rem;width:200px;max-height:50vh}.notification{margin-top:.5rem;padding:.75rem 1rem;background:var(--blue);border-radius:var(--radius);box-shadow:0 0 0.5em rgba(0,0,0,0.25);color:var(--white);opacity:0;transform:translateY(-1rem);animation:fadeIn .5s forwards}.notification--warning{background:var(--yellow)}.notification--error{background:var(--red)}.notification[data-state="hidden"]{animation:fadeOut .5s}@keyframes fadeIn{to{opacity:1;transform:translateY(0)}}@keyframes fadeOut{from{opacity:1;transform:translateY(0);margin-bottom:0}to{opacity:0;margin-bottom:-1rem}}\n',""]),t.exports=e},function(t,e,r){var i=r(5),a=r(27);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){(e=r(6)(!1)).push([t.i,'.page{width:100%}.page-container{display:flex;width:100%;max-width:1360px;margin:auto;min-height:100vh}.page-main,.page-aside,.page-footer{padding:2rem;box-sizing:border-box}.page-main{flex-grow:1}.page-aside{min-width:300px;background:var(--grey-extra-light)}.page-aside__title{min-height:3.2rem;margin-bottom:3rem;line-height:1;color:var(--table-grey)}.page-aside__title A{text-decoration:none}.page-aside__list{margin:0;padding:0;list-style-type:none}.page-aside__item{font-size:1.2rem}.page-aside__item+.page-aside__item{margin-top:1rem}.page-aside__link{text-decoration:none}.page-aside__link::before{margin-right:.45rem}.page-aside__link--dashboard::before{content:"📊"}.page-aside__link--products::before{content:"💼"}.page-aside__link--categories::before{content:"🗄"}.page-aside__link-text{text-decoration:underline}.page-aside__link:hover .page-aside__link-text{text-decoration:none}.page-footer{flex-basis:100%;display:flex}.page-footer A+A{margin-left:1rem}.page-content__header{display:flex;justify-content:space-between;align-items:center;margin-bottom:3rem}.page-content__title{margin-bottom:0;line-height:3rem;color:var(--grey)}.page-section{display:flex;flex-wrap:wrap}.page-section+.page-section{margin-top:2rem}.page-section__title{flex-basis:100%;line-height:3rem;color:var(--grey)}\n',""]),t.exports=e},function(t,e,r){var i=r(5),a=r(29);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){(e=r(6)(!1)).push([t.i,'.tooltips-container{position:relative}.tooltip{position:absolute;z-index:3;left:0;top:0;margin:1rem 0 0 1rem;padding:.5rem .75rem;background:#EEE;border-radius:3px;box-shadow:0 0 5px rgba(0,0,0,0.25);line-height:1;color:#555;transform:translate(0, 0);opacity:0;transition:opacity .2s;pointer-events:none}.tooltip[data-visible="1"]{opacity:1}[data-tooltip-content]{opacity:1;transition:opacity .2s}.tooltips-container--dimmed [data-tooltip-content]:not(:hover){opacity:.4}\n',""]),t.exports=e},function(t,e,r){var i=r(5),a=r(31);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){(e=r(6)(!1)).push([t.i,".column-chart{display:flex;position:relative;min-width:180px;flex-basis:calc((100% - 2rem) / 3);max-width:300px;min-height:150px;max-height:300px;margin:0 0 .5rem 0;padding:20px;box-sizing:border-box;border:1px solid var(--grey-light);border-left:5px solid var(--grey-light);border-radius:5px}.column-chart+.column-chart{margin-left:1rem}.column-chart__content{position:relative;flex-grow:1;display:flex;flex-wrap:wrap;max-width:100%}.column-chart__title{margin:0;line-height:1;font-weight:normal;font-size:1em;color:var(--grey)}.column-chart__total{margin-top:1rem;font-size:1.6em;line-height:1}.column-chart__list{display:flex;align-items:flex-end;width:100%;height:50px;margin:0;margin-top:.5rem;padding:0;list-style:none}.column-chart__item{flex-grow:1;margin-left:1px;background:var(--grey-light);cursor:pointer}.column-chart__item:first-child{margin-left:0}.column-chart__tooltip-date{font-size:.9em}.column-chart__tooltip-quantity{margin-top:.25em;font-size:1.1em}.column-chart--customers{border-left-color:gold}.column-chart--customers .column-chart__item{background:gold}.column-chart--orders{border-left-color:turquoise}.column-chart--orders .column-chart__item{background:turquoise}.column-chart--sales{border-left-color:yellowgreen}.column-chart--sales .column-chart__item{background:yellowgreen}.column-chart__error{max-width:100%;overflow:auto}\n",""]),t.exports=e},function(t,e,r){var i=r(5),a=r(33);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){var i=r(6),a=r(14),n=r(17),o=r(18);e=i(!1);var s=a(n),l=a(o);e.push([t.i,".rangepicker{position:relative;z-index:11}.rangepicker__input{display:inline-flex;padding:12px 16px 12px 40px;cursor:pointer;font-weight:normal;font-size:16px;line-height:20px;border:1px solid var(--grey-light);border-radius:4px;outline:none;background:var(--white) url("+s+') 16px center no-repeat;background-color:var(--white);background-size:18px 18px}.rangepicker_open .rangepicker__input,.rangepicker__input:focus,.rangepicker__input:active{border-color:var(--blue)}.rangepicker__input>SPAN{display:inline-flex;margin:0 4px}.rangepicker__input>SPAN:last-child{margin-right:0}.rangepicker__selector{display:none;background-color:var(--white);padding:32px 26px;border-radius:6px;box-shadow:0 4px 29px rgba(0,0,0,0.09);flex-direction:row;justify-content:space-between;flex:1 0 auto;position:absolute;top:calc(100% + 16px);right:0;z-index:1}.rangepicker--open .rangepicker__selector{display:inline-flex}.rangepicker__selector-arrow{width:30px;height:15px;position:absolute;bottom:100%;right:60px;overflow:hidden}.rangepicker__selector-arrow::after{content:"";position:absolute;width:12px;height:12px;background:var(--white);transform:translateX(-50%) translateY(-50%) rotate(45deg);top:100%;left:50%;box-shadow:0 1px 10px rgba(0,0,0,0.09)}.rangepicker__calendars{display:flex}.rangepicker__calendar{width:252px}.rangepicker__calendar:last-child{margin-left:26px}.rangepicker__month-indicator{text-align:center;font-weight:600;font-size:20px;line-height:24px;padding:0 15px;color:var(--dark-blue-text)}.rangepicker__selector-control{position:absolute;top:32px;width:15px;height:24px;display:flex;flex-direction:column;justify-content:center;cursor:pointer;transition:.3s all;background:url('+l+") left center no-repeat;background-size:9px 13px;border:0}.rangepicker__selector-control:hover{opacity:.8}.rangepicker__selector-control--left{left:26px}.rangepicker__selector-control--right{right:26px;transform:rotate(180deg)}.rangepicker__day-of-week,.rangepicker__date-grid{display:grid;grid-template-columns:repeat(7, 1fr)}.rangepicker__day-of-week{margin-top:28px;font-weight:400;font-size:14px;line-height:20px;color:var(--grey);text-align:center}.rangepicker__date-grid{margin-top:16px}.rangepicker__cell{position:relative;border:0;width:36px;height:36px;background-color:transparent;color:var(--dark-blue-text);border-radius:0;font-weight:400;font-size:16px;line-height:20px;cursor:pointer}.rangepicker__cell:active,.rangepicker__cell.rangepicker__selected,.rangepicker__cell.rangepicker__selected-from,.rangepicker__cell.rangepicker__selected-to{background-color:var(--blue);color:var(--white)}.rangepicker__cell:hover,.rangepicker__cell:focus{outline:none;background-color:var(--light-blue);color:var(--dark-blue-text);transition:.2s all}.rangepicker__cell.rangepicker__selected:hover,.rangepicker__cell.rangepicker__selected-from:hover,.rangepicker__cell.rangepicker__selected-to:hover,.rangepicker__cell.rangepicker__selected:focus,.rangepicker__cell.rangepicker__selected-from:focus,.rangepicker__cell.rangepicker__selected-to:focus{background-color:var(--middle-blue);color:var(--dark-blue-text)}.rangepicker__cell.rangepicker__selected-between{background-color:var(--light-blue)}\n",""]),t.exports=e},function(t,e,r){var i=r(5),a=r(35);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){(e=r(6)(!1)).push([t.i,".page-message{max-width:800px;margin:2rem auto;padding:1rem;background:lightgoldenrodyellow;border-radius:var(--radius)}.page-message--error{background:mistyrose}.page-message__error{margin-top:1rem;padding:1rem;background:#FFF;border-radius:var(--radius)}.page-message__error-text{font-family:Courier New, Courier, monospace}\n",""]),t.exports=e},function(t,e,r){var i=r(5),a=r(37);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){(e=r(6)(!1)).push([t.i,'.sortable-table{position:relative;width:100%;max-width:100%;min-height:200px;margin-bottom:40px;background-color:var(--white)}.sortable-table__table{width:100%}.sortable-table__row{position:relative;display:grid;grid:auto-flow / 12% 38% 20% 10% 10% 10%;text-decoration:none}.sortable-table__cell{padding:16px;font-size:16px;line-height:20px;color:var(--table-black);display:flex;align-items:center;border-bottom:1px solid var(--grey-light)}.sortable-table__cell:first-child{padding-left:32px}.sortable-table__cell:last-child{padding-right:32px}.sortable-table__cell--error{grid-column-start:1;grid-column-end:7}.sortable-table__thead{display:block;position:sticky;z-index:3;top:0;background-color:var(--white)}.sortable-table__header .sortable-table__cell{min-width:120px;color:var(--grey-light)}.sortable-table__header .sortable-table__cell[data-sortable]{cursor:pointer}.sortable-table__cell--quantity,.sortable-table__cell--price{justify-content:flex-end}.sortable-table__cell--disabled{opacity:.5}.sortable-table__cell[data-sort-direction]::after{content:"";display:block;width:0;height:0;margin-top:.25em;margin-left:.25em;border:5px solid;border-color:currentColor transparent}.sortable-table__cell[data-sort-direction="asc"]::after{border-top:none}.sortable-table__cell[data-sort-direction="desc"]::after{border-bottom:none}.sortable-table__cell--sorter:hover{cursor:pointer;color:var(--grey)}.sortable-table__image-wrapper{position:relative}.sortable-table__image{display:block;height:40px;width:100%;max-width:100%;min-width:40px;object-fit:contain;padding:4px;border:1px solid var(--grey-light);border-radius:2px}.sortable-table__preview{position:absolute;z-index:2;top:0;left:0;width:100%;height:100%;opacity:0;padding:.25em;background-origin:content-box;background-color:var(--white);background-size:contain;background-repeat:no-repeat;background-position:50% 50%;border:1px solid var(--grey-light);transition:all .25s}.sortable-table__preview:hover{width:300%;height:300%;opacity:1}.sortable-table__link{position:absolute;top:0;right:0;bottom:0;left:0}.sortable-table__category{position:relative;cursor:pointer}.sortable-table__tooltip-category{color:var(--grey)}\n',""]),t.exports=e},function(t,e,r){var i=r(5),a=r(39);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){var i=r(6),a=r(14),n=r(19);e=i(!1);var o=a(n);e.push([t.i,'.draggable-list{position:relative}.draggable-list__item{display:flex;align-items:center;cursor:grab}.draggable-list__item::before{content:"";display:block;height:18px;width:11px;margin-right:1rem;background:url('+o+") 50% 50% no-repeat;opacity:.5}.draggable-list .draggable-list__item--placeholder{background-color:var(--grey-light)}.draggable-list .draggable-list__item--placeholder::before{background:none}.draggable-list__item--dragged{position:absolute;left:0;right:0;background:var(--white);box-shadow:0 0 1rem rgba(0,0,0,0.35);cursor:grabbing}.draggable-list__item--dragged::before{opacity:1}\n",""]),t.exports=e},function(t,e,r){var i={"./categories/index.js":41,"./dashboard/index.js":44,"./error404/index.js":45,"./products/edit/index.js":46,"./products/index.js":49};function a(t){return n(t).then(r)}function n(t){return Promise.resolve().then((function(){if(!r.o(i,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return i[t]}))}a.keys=function(){return Object.keys(i)},a.resolve=n,a.id=40,t.exports=a},function(t,e,r){"use strict";r.r(e),function(t){var i=r(0),a=r(8),n=r(4);r(42);e.default=class{constructor(){this.apiUrl=t.env.API_URL||"https://course-js.javascript.ru",this.fetchUrl=`${this.apiUrl}/api/rest/categories?_sort=weight&_refs=subcategory`,this.listClick=this.listClick.bind(this)}async render(){const{categories:t,message:e}=await this.loadData();if(e)return Object(i.a)(`<div class="page-content">\n        <section class="page-section categories">\n          <h2 class="page-section__title">Categories</h2>\n\n          ${e.elem.outerHTML}\n        </section>\n      </div>\n      `);const r=this.createList(t);return this.elem=Object(i.a)(`<div class="page-content">\n      <section class="page-section categories">\n        <h2 class="page-section__title">Categories</h2>\n\n        ${r}\n      </section>\n    </div>`),this.addEvents(),this.elem}async loadData(){try{return{categories:await Object(i.c)(this.fetchUrl)}}catch(t){return{message:new a.a({error:t})}}}createList(t,e=!1){let r="",i=n.a.listTop,a=n.a.item,o="";if(e?(i=n.a.listSubcats,a+=` ${n.a.itemSub}`,o='is="draggable-list"'):a+=` ${n.a.itemTop}`,0===t.length)return"";for(const i of t){let t="",o=i.title;const s=i.subcategories;let l="";if(e){const t=this.getPlural(i.count,["product","products"]);l=`<span class="${n.a.counter}">${t}</span>`}s&&(o=` <button class="${n.a.toggler}">${i.title}</button>`,t=this.createList(s,!0)),r+=`<li class="${a}">\n        ${o}\n        ${l}\n        ${t}\n      </li>`}return`<ul\n      class="${n.a.list} ${i}" ${o}\n      >\n      ${r}\n    </ul>`}addEvents(){this.elem.querySelector(`.${n.a.listTop}`).addEventListener("click",this.listClick)}listClick(){event.target.closest(`.${n.a.toggler}`)&&event.target.closest(`.${n.a.itemTop}`).classList.toggle(n.a.itemOpen)}getPlural(t,e){let r=e[0];return 1!==t&&(r=e[1]),`${t} ${r}`}}}.call(this,r(10))},function(t,e,r){var i=r(5),a=r(43);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){(e=r(6)(!1)).push([t.i,'.categories__list{width:100%;list-style-type:none;margin:0;margin-top:2rem;padding:0}.categories__list--subcategories{display:none;margin-top:.5rem;margin-bottom:1rem}.categories__item{border-radius:var(--radius);background:var(--white);border:1px solid var(--grey-light)}.categories__item--topcategory{margin:0}.categories__item--topcategory+.categories__item--topcategory{margin-top:1rem}.categories__item--subcategory{display:flex;align-items:center;margin:0 1rem 0 2rem;padding:1rem}.categories__item--subcategory+.categories__item--subcategory{margin-top:.5rem}.categories__item--open{background:var(--grey-extra-light);border:1px solid var(--grey-light)}.categories__item--open .categories__list--subcategories{display:block}.categories__counter{margin-left:auto;color:var(--grey)}.categories__toggler{display:flex;align-items:center;width:100%;border:none;padding:1rem;text-align:left;cursor:pointer}.categories__toggler::before{content:"";display:block;width:0;height:0;margin-right:.5rem;border:.5rem solid;border-bottom:0;border-color:var(--grey-light) transparent;transform:rotate(-90deg);transition:transform .25s}.categories__item--open .categories__toggler::before{transform:rotate(0deg)}\n',""]),t.exports=e},function(t,e,r){"use strict";r.r(e);var i=r(0);const a=new Date;a.setMonth(a.getMonth()-1);const n=new Date,o=a.toISOString(),s=n.toISOString();e.default=class{async render(){return Object(i.a)(`<div class="page-content">\n      <header class="page-content__header">\n        <h2 class="page-content__title">Dashboard</h2>\n\n        <range-picker\n          data-from="${o}"\n          data-to="${s}"\n          ></range-picker>\n        </header>\n\n        <section class="page-section page-section--column-charts">\n          <column-chart\n            data-type="orders"\n            data-from="${o}"\n            data-to="${s}"\n          ></column-chart>\n\n          <column-chart\n            data-type="sales"\n            data-is-money="true"\n            data-from="${o}"\n            data-to="${s}"\n          ></column-chart>\n\n          <column-chart\n            data-type="customers"\n            data-from="${o}"\n            data-to="${s}"\n          ></column-chart>\n        </section>\n\n        <section class="page-section">\n          <h3 class="page-section__title">Bestsellers</h3>\n\n        <sortable-table\n          data-url="/api/dashboard/bestsellers?_embed=subcategory.category",\n          data-is-dynamic="0"\n          data-fields-list="['images', 'title', 'subcategory', 'quantity', 'price', 'status']"\n          data-order-field='title',\n          data-order-direction="1"\n          data-from="${o}"\n          data-to="${s}"\n          ></sortable-table>\n        </section>\n      </div>`)}}},function(t,e,r){"use strict";r.r(e);var i=r(0);e.default=class{async render(){return Object(i.a)('<div class="page-content">\n        <section class="page-section page-section--404">\n          <h2 class="page-section__title">Page not found</h2>\n          <p>No such page</p>\n        </section>\n      </div>')}}},function(t,e,r){"use strict";r.r(e),function(t){var i=r(0),a=r(8),n=r(16),o=r(23),s=r(1),l=r(7);r(20),r(47);e.default=class{constructor(e){this.id=e[0].replace("products/",""),e[0]||(this.id="3d-ochki-optoma-zd302"),this.apiUrl=t.env.API_URL||"https://course-js.javascript.ru",this.fetchProductUrl=this.apiUrl+`/api/rest/products?id=${this.id}`,this.fetchCategoriesUrl=this.apiUrl+"/api/rest/categories?_sort=weight&_refs=subcategory"}async render(){const{productData:t,categories:e,errorMessage:r}=await this.loadData();if(r)return Object(i.a)(`<div class="page-content">\n        ${l.a}\n\n        ${r.outerHTML}\n      </div>\n      `);const a=t[0],c=[];for(const{name:t,mods:r}of o.a)if(n.a[t]){let i=a;"subcategory"===t&&(i={...i,categories:e});const o=n.a[t].render(i);let l=[s.a.item];r&&(l=l.concat(r)),c.push(`<li class="${l.join(" ")}">${o}</li>`)}return Object(i.a)(`<div class="page-content">\n      ${l.a}\n\n      <form action="" class="${s.a.form}}">\n        <ul class="${s.a.list}">\n          ${c.join("\n")}\n        </ul>\n\n        <footer class="${s.a.footer}">\n          <button class="${s.a.submit}">Save</button>\n        </footer>\n      </form>\n    </div>`)}async loadData(){try{return{productData:await Object(i.c)(this.fetchProductUrl),categories:await Object(i.c)(this.fetchCategoriesUrl)}}catch(t){return{errorMessage:new a.a({error:t}).elem}}}}}.call(this,r(10))},function(t,e,r){var i=r(5),a=r(48);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){var i=r(6),a=r(14),n=r(20);e=i(!1);var o=a(n);e.push([t.i,".product-form{margin-bottom:2rem}.product-form__list,.product-form__footer{display:grid;grid-template-columns:repeat(3, 1fr);grid-gap:1rem}.product-form__list{margin:0;padding:0;list-style-type:none}.product-form__item{grid-column:1 / span 2}.product-form__item--full{grid-column:1 / span 3}.product-form__item--tiny{grid-column:1 / span 1}.product-form__item--follow{grid-column-start:auto}.product-form__item+.product-form__item{margin-top:1rem}.product-form__link{position:absolute;top:0;right:0;bottom:0;left:0}.product-form__input--textarea{min-height:200px}.product-form__images-list{margin:0;padding:0;list-style-type:none}.product-form__images-item{display:flex;align-items:center;padding:.5rem;background:var(--grey-extra-light);border-radius:var(--radius)}.product-form__images-item+.product-form__images-item{margin-top:.5rem}.product-form__image-wrapper{position:relative}.product-form__image{display:block;width:100%;max-width:80px;min-width:40px;height:40px;object-fit:contain;padding:4px;border:1px solid var(--grey-light);background:var(--white);border-radius:var(--radius)}.product-form__preview{position:absolute;z-index:2;top:0;left:0;width:100%;height:100%;opacity:0;padding:.25em;background-origin:content-box;background-color:var(--white);background-size:contain;background-repeat:no-repeat;background-position:50% 50%;border:1px solid var(--grey-light);transition:all .25s}.product-form__preview:hover{width:300%;height:300%;transform:translateX(-35%) translateY(-35%);opacity:1}.product-form__image-source{margin-left:1rem}.product-form__image-remove{width:3rem;align-self:stretch;margin-left:auto;background:url("+o+") 50% 50% no-repeat;font-size:0;border:none}.product-form__footer{margin-top:2rem}\n",""]),t.exports=e},function(t,e,r){"use strict";r.r(e);var i=r(0);e.default=class{async render(){return Object(i.a)("<div class=\"page-content\">\n      <section class=\"page-section\">\n        <h2 class=\"page-section__title\">Products</h2>\n\n        <sortable-table\n          data-url=\"/api/rest/products?_embed=subcategory.category\",\n          data-is-dynamic=\"1\"\n          data-fields-list=\"['images', 'title', 'subcategory', 'quantity', 'price', 'status']\"\n          data-order-field='title',\n          data-order-direction=\"1\"\n          ></sortable-table>\n      </section>\n    </div>")}}},function(t,e,r){var i=r(5),a=r(51);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},o=(i(t.i,a,n),a.locals?a.locals:{});t.exports=o},function(t,e,r){(e=r(6)(!1)).push([t.i,':root{--blue: #109CF1;--dark-blue: #334D6E;--light-blue: #CFEBFC;--middle-blue: #9FD7F9;--yellow: #FFB946;--red: #F7685B;--green: #2ED47A;--purple: #885AF8;--black: #192A3E;--table-black: #323C47;--table-grey: #707683;--grey: #90A0B7;--grey-light: #C2CFE0;--grey-extra-light: #EFF1F4;--grey-skeleton: #F5F6F8;--white: #FFF;--radius: 4px}*{box-sizing:border-box}HTML{font-size:16px}BODY{display:flex;min-height:100vh;margin:0;background:#FFF;font:1rem/1.4 Trebuchet MS, Verdana, sans-serif;color:#000}H1,H2,H3,H4{margin-top:0;margin-bottom:.5em;font-weight:normal}H1{font-size:2.75rem}H2{font-size:2.25rem}H3{font-size:1.75rem}H4{font-size:1.25rem}A,A:visited,A:hover{color:inherit}A:hover{text-decoration:none}BUTTON,INPUT,TEXTAREA,SELECT{display:block;padding:.5rem;background:none;border-radius:var(--radius);font:inherit}INPUT,TEXTAREA,SELECT{width:100%;border:1px solid var(--grey-light)}.page-layout{display:flex;width:100%}.spinner{display:none;position:absolute;bottom:2rem;left:0;right:0;width:4rem;height:4rem;margin:auto;background:var(--white);box-shadow:0 0 .5rem currentColor;border-radius:50%;color:var(--grey-light)}[data-loading="1"] .spinner{display:block}.spinner::before,.spinner::after{content:"";position:absolute;top:0;right:0;bottom:0;left:0;margin:auto;box-sizing:border-box;border:3px solid;border-color:currentColor transparent;border-radius:50%;animation:rotate 2.1s linear infinite}.spinner::before{width:2.25rem;height:2.25rem}.spinner::after{width:1.25rem;height:1.25rem;animation-duration:1.3s;animation-direction:reverse}@keyframes rotate{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}\n',""]),t.exports=e},function(t,e,r){"use strict";r.r(e);var i=r(0);r(26);class a extends HTMLElement{connectedCallback(){this.append(this.render()),this.classList.add("page")}render(){return Object(i.a)('<div class="page-container">\n      <aside class="page-aside">\n        <h1 class="page-aside__title">\n          <a href="./">Shop admin</a>\n        </h1>\n\n        <nav class="page-aside__nav">\n          <ul class="page-aside__list">\n            <li class="page-aside__item">\n              <a\n                class="page-aside__link page-aside__link--dashboard"\n                href="./">\n                <span class="page-aside__link-text">\n                  Dashboard\n                </span>\n              </a>\n            </li>\n            <li class="page-aside__item">\n              <a\n                class="page-aside__link page-aside__link--products"\n                href="./products">\n                <span class="page-aside__link-text">\n                  Products\n                </span>\n              </a>\n            </li>\n            <li class="page-aside__item">\n              <a\n                class="page-aside__link page-aside__link--categories"\n                href="./categories">\n                <span class="page-aside__link-text">\n                  Categories\n                </span>\n              </a>\n            </li>\n          </ul>\n        </nav>\n      </aside>\n\n      <main class="page-main" id="content">\n        \x3c!-- main content will be here --\x3e\n      </main>\n    </div>')}}var n=r(21),o="rangepicker",s="rangepicker--open",l="rangepicker__input",c="rangepicker__from",d="rangepicker__to",u="rangepicker__selector",h="rangepicker__selector-control",p="rangepicker__calendars",g="rangepicker__cell",m="rangepicker__selected-from",f="rangepicker__selected-between",b="rangepicker__selected-to";var _={input:`<button class="${l}" data-elem="input" type="button">\n  <span\n    class="${c}"\n    data-elem="from">{from}</span> -\n  <span\n    class="${d}"\n    data-elem="to"\n    >{to}</span>\n</button>`,selector:`\n<div class="${u}" data-elem="selector">\n  <div class="${"rangepicker__selector-arrow"}"></div>\n  <button\n    type="button"\n    class="${h} ${h}--left"\n    data-direction="prev"\n  ></button>\n  <button\n    type="button"\n    class="${h} ${h}--right"\n    data-direction="next"\n  ></button>\n  <div class="${p}"></div>\n</div>\n`,calendar:`\n<div class="${"rangepicker__calendar"}">\n  <div class="${"rangepicker__month-indicator"}">\n    <time datetime="{month}">{month}</time>\n  </div>\n  <div class="${"rangepicker__day-of-week"}">\n    {weekdays}\n  </div>\n  <div class="${"rangepicker__date-grid"}">\n    {days}\n  </div>\n</div>\n`,day:`\n<button type="button" class="${g} {mod}" data-value="{dateTime}" style="{style}">{dateNum}</button>\n`};r(32),r(18),r(17);class v extends HTMLElement{constructor(){super(),this.togglePicker=this.togglePicker.bind(this),this.selectorOnClick=this.selectorOnClick.bind(this),this.bodyOnClick=this.bodyOnClick.bind(this),this.updateRange=this.updateRange.bind(this),this.isOpened=!1,this.elem=this,this.elem.classList.add("rangepicker")}async connectedCallback(){const{from:t,to:e}=this.dataset;this.dates={from:new Date(t),to:new Date(e)},this.monthes=this.getDisplayedMonthes(),this.newDates=[],this.addInput(),document.addEventListener("changeDate",this.updateRange)}getDisplayedMonthes(){const t=new Date(this.dates.from);let e=t.getMonth();t.setDate(1);const r=new Date(t);return r.setMonth(++e),[t,r]}addInput(){const t={from:this.dates.from.toLocaleDateString(),to:this.dates.to.toLocaleDateString()},e=_.input,r=Object(i.d)({tmpl:e,data:t});this.elem.insertAdjacentHTML("afterBegin",r),this.input=this.elem.querySelector(`.${l}`),this.inputFrom=this.input.querySelector(`.${c}`),this.inputTo=this.input.querySelector(`.${d}`),this.input.addEventListener("pointerdown",this.togglePicker),document.body.addEventListener("pointerdown",this.bodyOnClick,{capture:!0})}bodyOnClick(){!event.target.closest(`.${o}`)&&this.isOpened&&this.hidePicker()}updateInput(){this.inputFrom.innerHTML=this.dates.from.toLocaleDateString(),this.inputTo.innerHTML=this.dates.to.toLocaleDateString()}updateRange(){this.monthes=this.getDisplayedMonthes(),this.newDates=[],this.updateInput(),this.hidePicker()}togglePicker(){this.isOpened?this.hidePicker():(this.showPicker(),this.isOpened=!0)}showPicker(){this.selector?this.calendars.innerHTML="":(this.addSelector(),this.selector=this.elem.querySelector(`.${u}`),this.calendars=this.elem.querySelector(`.${p}`),this.selector.addEventListener("click",this.selectorOnClick)),this.addCalendars(),this.elem.classList.add(s)}hidePicker(){this.elem.classList.remove(s),this.isOpened=!1,this.newDates=[]}addSelector(){const t=_.selector;this.elem.insertAdjacentHTML("beforeEnd",t)}selectorOnClick(){const{dataset:t}=event.target;t.value?this.setDay(event.target):t.direction&&this.moveMonth(t.direction)}setDay(t){const e=t.dataset.value;if(0===this.newDates.length)return this.newDates.push(new Date(e)),void this.updateSelected(t);this.newDates.push(new Date(e)),this.newDates.sort((t,e)=>t-e),this.dates={from:this.newDates[0],to:this.newDates[1]},document.dispatchEvent(new CustomEvent("changeDate",{detail:{dates:{from:this.dates.from.toISOString(),to:this.dates.to.toISOString()}}}))}moveMonth(t){let e=1;"prev"===t&&(e=-1),this.monthes.forEach(t=>{t.setMonth(t.getMonth()+e)}),this.updateCalendars()}addCalendars(){this.monthes.forEach(t=>{this.calendars.insertAdjacentHTML("beforeEnd",this.getCalendar(t))})}updateCalendars(){this.calendars.innerHTML="",this.addCalendars()}updateSelected(t){const e=this.elem.querySelectorAll(`.${g}`),r=[f,m,b];e.forEach(t=>{t.classList.remove(...r)}),t.classList.add(m)}getCalendar(t){const e={month:t.toLocaleString("default",{month:"long"}),weekdays:Object(i.g)("div"),days:this.getCells(t)},r=_.calendar;return Object(i.d)({tmpl:r,data:e})}getCells(t){const e=_.day,r=new Date(t),a=r.getMonth();let n=1,o="";for(;r.getMonth()===a;){const t=this.getCellStartStyle(r),a=this.getCellMod(r),s={dateTime:r.toISOString(),dateNum:r.getDate(),style:t,mod:a};o+=Object(i.d)({tmpl:e,data:s}),r.setDate(++n)}return o}getCellStartStyle(t){let e="";if(t.getDate()>1)return e;let r=t.getDay();return 0===r&&(r=7),e=`grid-column-start: ${r}`,e}getCellMod(t){let e="";if(this.newDates.length>0)return e;const r=t.valueOf(),i=this.dates.from.valueOf(),a=this.dates.to.valueOf();return r>i&&r<a?e=f:r===i?e=m:r===a&&(e=b),e}}var y=r(22);r(38),r(19);const x="draggable-list",w="draggable-list__item",k="draggable-list__item--dragged",$="draggable-list__item--placeholder";class E extends HTMLUListElement{constructor(){super(),this.startDrag=this.startDrag.bind(this),this.stopDrag=this.stopDrag.bind(this),this.move=this.move.bind(this),this.setPlaceholderHeight=this.setPlaceholderHeight.bind(this)}async connectedCallback(){this.classList.add(x),this.items=this.querySelectorAll("li"),this.placeholder=this.createPlaceholder(),this.addClassToItems(),this.addEventListener("pointerdown",this.startDrag),this.addEventListener("pointerdown",this.setPlaceholderHeight,{once:!0})}startDrag(t){if(this.currentElem=t.target.closest(".draggable-list__item"),!this.currentElem)return;this.currentElem.replaceWith(this.placeholder),this.currentElem.classList.add(k),this.append(this.currentElem);const{top:e}=this.getBoundingClientRect();this.top=e,this.elemHalf=this.currentElem.offsetHeight/2;const r=t.clientY-this.top-this.elemHalf;this.currentElem.style.top=`${r}px`,this.addEventListener("pointermove",this.move),this.addEventListener("pointerup",this.stopDrag)}move(t){const e=t.clientY-this.top-this.elemHalf;this.currentElem.style.top=`${e}px`;for(const t of this.items){if(t.classList.contains(k))continue;const r=t.offsetTop,i=r+t.offsetHeight,a=r+t.offsetHeight/2,n=e+this.elemHalf;if(n>r&&n<i){n<=a?t.after(this.placeholder):t.before(this.placeholder);break}}}stopDrag(){this.placeholder.replaceWith(this.currentElem),this.currentElem.classList.remove(k),this.currentElem.style.top="",this.removeEventListener("pointermove",this.move),this.removeEventListener("pointerup",this.stopDrag)}createPlaceholder(){const t=this.items[0].cloneNode(!0);return t.classList.add($,w),t.innerHTML="",t}setPlaceholderHeight(){const t=this.items[0];this.placeholder.style.minHeight=`${t.offsetHeight}px`}addClassToItems(){this.items.forEach(t=>t.classList.add(w))}}class T{constructor(){this.routes=[],this.documentClick=this.documentClick.bind(this),document.addEventListener("click",this.documentClick)}static instance(){return this._instance||(this._instance=new T),this._instance}addRoute(t,e){return this.routes.push({pattern:t,path:e}),this}setNotFoundPage(t){return this.notFoundPagePath=t,this}navigate(t){history.pushState(null,null,t),this.route()}async route(){const t=(e=window.location.pathname,decodeURI(e).replace(/^\/shop-admin-page/,"").replace(/^\/|\/$/,"").replace(/\?.*$/,"").replace(/#.*$/,""));var e;let r;for(const e of this.routes)if(r=t.match(e.pattern),r){this.page=await this.changePage(e.path,r);break}r||(this.page=await this.changePage(this.notFoundPagePath))}async changePage(t,e){this.page&&this.page.destroy&&this.page.destroy(),this.page=await async function(t,e){const{default:i}=await r(40)(`./${t}/index.js`),a=new i(e),n=await a.render(),o=document.getElementById("content");o.innerHTML="",o.append(n)}(t,e)}addListener(){window.addEventListener("popstate",()=>this.route()),this.route()}documentClick(t){const e=t.target.closest("a");if(!e)return;const r=e.getAttribute("href");r&&(r.startsWith("/")||r.startsWith("./"))&&(t.preventDefault(),this.navigate(r))}}r(50);T.instance().addRoute(/^$/,"dashboard").addRoute(/^categories$/,"categories").addRoute(/^products\/([\S()-]+)/g,"products/edit").addRoute(/^products\/add$/,"products/edit").addRoute(/^products$/,"products").setNotFoundPage("error404").addListener(),window.customElements.define("page-layout",a),window.customElements.define("column-chart",n.a),window.customElements.define("range-picker",v),window.customElements.define("sortable-table",y.a),window.customElements.define("draggable-list",E,{extends:"ul"})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMvY3JlYXRlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9lc2NhcGVIVE1MLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2ZpbGxUZW1wbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9mb3JtYXREYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2Zvcm1hdFRvdGFsLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2dldFdlZWtEYXlzLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL3Rocm90dGxlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05vdGlmaWNhdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL25vdGlmaWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2ZldGNoSnNvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC9jbGFzc2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvcnRhYmxlVGFibGUvY2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db2x1bW5DaGFydC9jbGFzc2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9jYXRlZ29yaWVzL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3Byb2R1Y3RzL2VkaXQvdGVtcGxhdGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BhZ2VNZXNzYWdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvcnRhYmxlVGFibGUvZmllbGRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU29ydGFibGVUYWJsZS9zdGF0dXNUZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2x0aXBzL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbHRpcHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU29ydGFibGVUYWJsZS9kaXJlY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvcnRhYmxlVGFibGUvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbHVtbkNoYXJ0L3RlbXBsYXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC9zdGF0dXNUZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9wcm9kdWN0cy9lZGl0L2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3Byb2R1Y3RzL2VkaXQvZmllbGRzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL2NhbGVuZGFyLWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL2Fycm93LWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RyYWdnYWJsZUxpc3QvZ3JhYi1pY29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC9pY29uLXRyYXNoLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db2x1bW5DaGFydC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3J0YWJsZVRhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9wcm9kdWN0cy9lZGl0L2ZpZWxkc09yZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05vdGlmaWNhdGlvbi9zdHlsZXMuc2Nzcz9kZjkyIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05vdGlmaWNhdGlvbi9zdHlsZXMuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MYXlvdXQvc3R5bGVzLnNjc3M/ZTJjMyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MYXlvdXQvc3R5bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbHRpcHMvc3R5bGVzLnNjc3M/N2NjNSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sdGlwcy9zdHlsZXMuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db2x1bW5DaGFydC9zdHlsZXMuc2Nzcz9hMjMwIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbHVtbkNoYXJ0L3N0eWxlcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL3N0eWxlcy5zY3NzPzcxNWEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmFuZ2VQaWNrZXIvc3R5bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUGFnZU1lc3NhZ2Uvc3R5bGVzLnNjc3M/MTEzNyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QYWdlTWVzc2FnZS9zdHlsZXMuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3J0YWJsZVRhYmxlL3N0eWxlcy5zY3NzP2U4YzciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU29ydGFibGVUYWJsZS9zdHlsZXMuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9EcmFnZ2FibGVMaXN0L3N0eWxlcy5zY3NzPzk3YzciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRHJhZ2dhYmxlTGlzdC9zdHlsZXMuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMgZWFnZXIgXlxcLlxcLy4qXFwvaW5kZXhcXC5qcyQgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvY2F0ZWdvcmllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvY2F0ZWdvcmllcy9zdHlsZXMuc2Nzcz9jMDA3Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9jYXRlZ29yaWVzL3N0eWxlcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9kYXNoYm9hcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL2Vycm9yNDA0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9wcm9kdWN0cy9lZGl0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9wcm9kdWN0cy9lZGl0L3N0eWxlLnNjc3M/ZDMxMCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC9zdHlsZS5zY3NzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9wcm9kdWN0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3Njc3Mvc3R5bGVzLnNjc3M/ZjNjOCIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3Njc3Mvc3R5bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGF5b3V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmFuZ2VQaWNrZXIvdGVtcGxhdGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RyYWdnYWJsZUxpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9yZW5kZXJQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJodG1sIiwidGVtcGxhdGUiLCJpbm5lckhUTUwiLCJjb250ZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJkaXYiLCJlc2NhcGVIVE1MIiwic3RyaW5nIiwicmVwbGFjZSIsImZpbGxUZW1wbGF0ZSIsInRtcGwiLCJkYXRhIiwibWF0Y2giLCJzdHIiLCJ1bmRlZmluZWQiLCJmb3JtYXREYXRlIiwiZGF0YVBhcnRzIiwiRGF0ZSIsInRvRGF0ZVN0cmluZyIsInNwbGl0IiwiZm9ybWF0VG90YWwiLCJudW0iLCJmb3JtYXR0ZWQiLCJ0YWlsIiwiZ2V0V2Vla0RheXMiLCJ0YWciLCJkYXRlIiwid2Vla2RheXNTdHIiLCJjb3VudGVyIiwidG9Mb2NhbGVTdHJpbmciLCJ3ZWVrZGF5Iiwic2V0RGF0ZSIsImdldERhdGUiLCJ0aHJvdHRsZSIsImZ1bmMiLCJjb250ZXh0IiwidGltZW91dCIsImFyZ3MiLCJpc1dhaXRpbmciLCJpc0ZpcnN0Q2FsbCIsImFyZ3VtZW50cyIsImFwcGx5Iiwic2V0VGltZW91dCIsImNscyIsImVsZW0iLCJ3YXJuaW5nIiwiZXJyb3IiLCJOb3RpZmljYXRpb24iLCJtZXNzYWdlIiwiY29udGFpbmVyIiwidHlwZSIsInRoaXMiLCJkdXJhdGlvbiIsImdldER1cmF0aW9uIiwiY2xhc3NOYW1lcyIsImdldENsYXNzZXMiLCJhZGRFbGVtIiwiaXNGaW5pc2hlZCIsImNsYXNzTGlzdCIsImFkZCIsImRhdGFzZXQiLCJzdGF0ZSIsInByZXBlbmQiLCJoaWRlRWxlbSIsInBhcmFtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZSIsImNsYXNzZXMiLCJwdXNoIiwibm90aWZDb250YWluZXIiLCJib2R5IiwiYXBwZW5kIiwibm90aWZpY2F0aW9ucyIsImFzeW5jIiwiZmV0Y2hKU09OIiwidXJsIiwicmVzcG9uc2UiLCJmZXRjaCIsIkZldGNoRXJyb3IiLCJvayIsInN0YXR1c1RleHQiLCJqc29uIiwic3RhdHVzIiwiRXJyb3IiLCJzdXBlciIsIndpbmRvdyIsImV2ZW50IiwicmVhc29uIiwibm90aWZpY2F0aW9uIiwib2Zmc2V0VG9wIiwiZmlsdGVyIiwic2hpZnQiLCJmb3JtIiwibGlzdCIsIml0ZW0iLCJpdGVtVGlueSIsIml0ZW1Gb2xsb3ciLCJpdGVtRnVsbCIsImxhYmVsIiwiaW5wdXQiLCJpbnB1dFRleHQiLCJpbnB1dE51bWJlciIsImlucHV0U2VsZWN0IiwiaW5wdXRUZXh0YXJlYSIsImltZ3NMaXN0IiwiaW1nc0l0ZW0iLCJpbWciLCJpbWdXcmFwcGVyIiwiaW1nU291cmNlIiwiaW1nUmVtb3ZlIiwicHJldmlldyIsImZvb3RlciIsInN1Ym1pdCIsInRhYmxlIiwidGhlYWQiLCJoZWFkZXIiLCJyb3ciLCJjZWxsIiwiY2VsbEVycm9yIiwiY2VsbFNvcnRlciIsImxpbmsiLCJjYXRlZ29yeSIsInRvb2x0aXBDYXRlZ29yeSIsInRvb2x0aXBTdWJjYXRlZ29yeSIsInRpdGxlIiwidG90YWwiLCJ0b29sdGlwIiwidG9vbHRpcERhdGUiLCJ0b29sdGlwUXVhbnRpdHkiLCJsaXN0VG9wIiwibGlzdFN1YmNhdHMiLCJpdGVtVG9wIiwiaXRlbVN1YiIsIml0ZW1PcGVuIiwidG9nZ2xlciIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwibGVuZ3RoIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIm9iaiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJjb25jYXQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYmFzZSIsIm5ld0xpc3QiLCJ0b1N0cmluZyIsImoiLCJ1c2VTb3VyY2VNYXAiLCJtYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImlkIiwiX2kiLCJQYWdlTWVzc2FnZSIsInRleHQiLCJjYWxsYmFjayIsImNhbGxiYWNrVGV4dCIsImluc2VydEFkamFjZW50SFRNTCIsImltYWdlcyIsInNyYyIsImNvbXBhcmUiLCJyZW5kZXIiLCJhIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJzdWJjYXRlZ29yeSIsInRvb3RpcENvbnRlbnQiLCJhQ2F0TmFtZSIsImJDYXROYW1lIiwicXVhbnRpdHkiLCJwcmljZSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiQXJyYXkiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiMCIsIjEiLCJkaW1TaWJsaW5ncyIsImxpc3RNb3VzZU1vdmUiLCJsaXN0TW91c2VPdXQiLCJ0b29sdGlwQ29udGVudCIsImhpZGVUb29sdGlwIiwidmlzaWJsZSIsImVsZW1Db29yZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjb29yZHMiLCJ4IiwiY2xpZW50WCIsInkiLCJjbGllbnRZIiwidG9vbHRpcENvb3JkcyIsImhpZGRlbkJ5V2luZG93IiwicmlnaHQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsImdldERpcmVjdGlvblRleHQiLCJpc0FzYyIsImRpcmVjdGlvbnMiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJjaGFydEl0ZW0iLCJjYXRlZ29yaWVzVG9GbGF0TGlzdCIsImNhdGVnb3JpZXMiLCJmbGF0TGlzdCIsInN1YmNhdGVnb3JpZXMiLCJnZXRPcHRpb25zIiwic2VsZWN0ZWQiLCJpbWFnZXNJdGVtcyIsImdldEltZ3NMaXN0TWFya3VwIiwiZmllbGROYW1lIiwiZGVzY3JpcHRpb24iLCJkaXNjb3VudCIsInZhbHVlcyIsIkNvbHVtbkNoYXJ0IiwiSFRNTEVsZW1lbnQiLCJhcGlVcmwiLCJBUElfVVJMIiwiY2hhbmdlRGF0ZSIsImlzTW9uZXkiLCJmcm9tIiwidG8iLCJkYXRlcyIsImdldFVybCIsImdldERhdGEiLCJoZWFkZXJTdHIiLCJnZXRIZWFkZXJTdHIiLCJsaXN0U3RyIiwiZ2V0TGlzdFN0ciIsImFkZEFjdGlvbnMiLCJyZWR1Y2UiLCJwcmV2IiwiY3VycmVudCIsIm1heCIsIk1hdGgiLCJjaGFydFN0ciIsImhlaWdodCIsInRvRml4ZWQiLCJ0b29sdGlwcyIsImRldGFpbCIsIlNvcnRhYmxlVGFibGUiLCJzb3J0aW5nIiwicGFnZSIsIml0ZW1zIiwiaXNEYXRhRW5kZWQiLCJmaWVsZHNMaXN0Iiwib3JkZXJGaWVsZCIsIm9yZGVyRGlyZWN0aW9uIiwiaXNEeW5hbWljIiwicGFyc2UiLCJvcmRlciIsImZpZWxkIiwiZGlyZWN0aW9uIiwiaW5pdFRhYmxlIiwiaXNMb2FkaW5nIiwiZmV0Y2hVcmwiLCJnZXRGZXRjaFVybCIsIm9uQm9keVNjcm9sbFRocm90dGxlIiwib25Cb2R5U2Nyb2xsIiwibG9hZGluZyIsInRhYmxlRGF0YSIsInRCb2R5Iiwib3V0ZXJIVE1MIiwiY3JlYXRlTGF5b3V0IiwiYWRkRWxlbUhlYWRlciIsImFkZFRhYmxlRXZlbnRzIiwiZmlsbFRCb2R5IiwidGFibGVSb3dzIiwibG9hZERhdGEiLCJzb3J0Um93cyIsInJlbmRlclRCb2R5Iiwic3RhcnQiLCJlbmQiLCJzb3J0IiwicGFyYW1zU3RyIiwicHJlZml4IiwiaGVhZGVyQ29udGVudCIsInRoQ2xhc3MiLCJzb3J0ZXIiLCJzb3J0RGlyZWN0aW9uIiwidGhlYWRTdHIiLCJ0aCIsInNvcnRSb3dzRHluYW1pYyIsInJldmVyc2UiLCJzb3J0ZXJPbkNsaWNrIiwiYm90dG9tIiwiaW5uZXJIZWlnaHQiLCJwYWdlWU9mZnNldCIsInJvd0NvbnRlbnQiLCJ0ZENsYXNzZXMiLCJ0b0xvd2VyQ2FzZSIsInJlbmRlcmVkQ29udGVudCIsInJlbmRlckZpZWxkIiwic2Nyb2xsVG8iLCJtb2RzIiwiYXBpIiwiZXhwb3J0ZWQiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwid2VicGFja0FzeW5jQ29udGV4dCIsInJlcSIsIndlYnBhY2tBc3luY0NvbnRleHRSZXNvbHZlIiwidGhlbiIsImNvZGUiLCJsaXN0Q2xpY2siLCJjcmVhdGVMaXN0IiwiYWRkRXZlbnRzIiwiaXNTdWJjYXQiLCJpdGVtc1N0ciIsImxpc3RDbGFzcyIsIml0ZW1DbGFzcyIsImlzRHJhZ2dhYmxlQXR0ciIsInN1YkNhdHNMaXN0Iiwic3ViQ2F0cyIsImNvdW50ZXJUZXh0IiwiZ2V0UGx1cmFsIiwiY291bnQiLCJjbG9zZXN0IiwidG9nZ2xlIiwidmFyaWFudHMiLCJ2YXJpYW50Iiwic2V0TW9udGgiLCJnZXRNb250aCIsInRvSVNPU3RyaW5nIiwiZmV0Y2hQcm9kdWN0VXJsIiwiZmV0Y2hDYXRlZ29yaWVzVXJsIiwicHJvZHVjdERhdGEiLCJlcnJvck1lc3NhZ2UiLCJwcm9kdWN0IiwiaW5wdXRzIiwic2VsZWN0b3IiLCJjYWxlbmRhciIsImRheSIsInRvZ2dsZVBpY2tlciIsInNlbGVjdG9yT25DbGljayIsImJvZHlPbkNsaWNrIiwidXBkYXRlUmFuZ2UiLCJpc09wZW5lZCIsIm1vbnRoZXMiLCJnZXREaXNwbGF5ZWRNb250aGVzIiwibmV3RGF0ZXMiLCJhZGRJbnB1dCIsImN1cnJlbnRNb250aCIsIm1vbnRoIiwibmV4dE1vbnRoIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwidGVtcGxhdGVzIiwiaW5wdXRTdHIiLCJpbnB1dEZyb20iLCJpbnB1dFRvIiwiY2FwdHVyZSIsImhpZGVQaWNrZXIiLCJ1cGRhdGVJbnB1dCIsInNob3dQaWNrZXIiLCJjYWxlbmRhcnMiLCJhZGRTZWxlY3RvciIsImFkZENhbGVuZGFycyIsInNlbGVjdG9yU3RyIiwic2V0RGF5IiwibW92ZU1vbnRoIiwidXBkYXRlU2VsZWN0ZWQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJzdGVwIiwidXBkYXRlQ2FsZW5kYXJzIiwiZ2V0Q2FsZW5kYXIiLCJjZWxscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ3ZWVrZGF5cyIsImRheXMiLCJnZXRDZWxscyIsImN1cnJlbnREYXRlIiwiY3VycmVudERheSIsImRheXNTdHIiLCJnZXRDZWxsU3RhcnRTdHlsZSIsIm1vZCIsImdldENlbGxNb2QiLCJkYXRlVGltZSIsImRhdGVOdW0iLCJ3ZWVrZGF5TnVtIiwiZ2V0RGF5IiwiZGF0ZU1zIiwidmFsdWVPZiIsImRhdGVGcm9tTXMiLCJkYXRlVG9NcyIsIkRyYWdnYWJsZUxpc3QiLCJIVE1MVUxpc3RFbGVtZW50Iiwic3RhcnREcmFnIiwic3RvcERyYWciLCJtb3ZlIiwic2V0UGxhY2Vob2xkZXJIZWlnaHQiLCJwbGFjZWhvbGRlciIsImNyZWF0ZVBsYWNlaG9sZGVyIiwiYWRkQ2xhc3NUb0l0ZW1zIiwiY3VycmVudEVsZW0iLCJyZXBsYWNlV2l0aCIsInRvcCIsImVsZW1IYWxmIiwib2Zmc2V0SGVpZ2h0IiwiZWxlbVRvcCIsImNvbnRhaW5zIiwibWlkZGxlIiwiY2hlY2tMaW5lIiwiYWZ0ZXIiLCJiZWZvcmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xvbmVOb2RlIiwiZmlyc3RJdGVtIiwibWluSGVpZ2h0Iiwicm91dGVzIiwiZG9jdW1lbnRDbGljayIsIl9pbnN0YW5jZSIsInBhdHRlcm4iLCJwYXRoIiwibm90Rm91bmRQYWdlUGF0aCIsImhyZWYiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwicm91dGUiLCJzdHJpcHBlZFBhdGgiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwiZGVjb2RlVVJJIiwiY2hhbmdlUGFnZSIsImRlc3Ryb3kiLCJQYWdlIiwicmVuZGVyZWRQYWdlIiwiY29udGVudEVsZW0iLCJnZXRFbGVtZW50QnlJZCIsInJlbmRlclBhZ2UiLCJnZXRBdHRyaWJ1dGUiLCJzdGFydHNXaXRoIiwicHJldmVudERlZmF1bHQiLCJuYXZpZ2F0ZSIsImluc3RhbmNlIiwiYWRkUm91dGUiLCJzZXROb3RGb3VuZFBhZ2UiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImV4dGVuZHMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxH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Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvc2hvcC1hZG1pbi1wYWdlL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNTIpO1xuIiwiLy8gbmljZSBvdmVydmlldzpcbi8vIGh0dHBzOi8vZ3Jyci50ZWNoL3Bvc3RzL2NyZWF0ZS1kb20tbm9kZS1mcm9tLWh0bWwtc3RyaW5nL1xuXG4vLyBubyBJRTExXG5jb25zdCBzdXBwb3J0c1RlbXBsYXRlID0gJ2NvbnRlbnQnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5cbmNvbnN0IGNyZWF0ZUVsZW1lbnQgPSBzdXBwb3J0c1RlbXBsYXRlXG4gID8gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICByZXR1cm4gdGVtcGxhdGUuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICB9XG4gIDogZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICByZXR1cm4gZGl2LmZpcnN0RWxlbWVudENoaWxkO1xuICAgIH07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVsZW1lbnQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlc2NhcGVIVE1MIChzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1xuICAgIC5yZXBsYWNlKC8mL2csICcmJylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgLnJlcGxhY2UoLycvZywgJyYjMzk7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnPCcpXG4gICAgLnJlcGxhY2UoLz4vZywgJz4nKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbGxUZW1wbGF0ZSAoeyB0bXBsLCBkYXRhIH0pIHtcbiAgaWYgKCF0bXBsIHx8ICFkYXRhKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHRtcGwucmVwbGFjZSgveyhbXlwiXXsxLH0pfS9nLCAobWF0Y2gsIHN0cikgPT4ge1xuICAgIGlmIChkYXRhW3N0cl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGRhdGFbc3RyXTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERhdGUgKHN0cikge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoc3RyKS50b0RhdGVTdHJpbmcoKTtcbiAgY29uc3QgZGF0YVBhcnRzID0gZGF0ZS5zcGxpdCgnICcpO1xuICBjb25zdCBtb250aCA9IGRhdGFQYXJ0c1sxXTtcbiAgY29uc3QgZGF5ID0gZGF0YVBhcnRzWzJdO1xuICBjb25zdCB5ZWFyID0gZGF0YVBhcnRzWzNdO1xuXG4gIHJldHVybiBgJHttb250aH0gJHtkYXl9LCAke3llYXJ9YDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFRvdGFsIChudW0pIHtcbiAgbGV0IGZvcm1hdHRlZCA9IG51bTtcbiAgaWYgKG51bSA+PSAxMDAwKSB7XG4gICAgY29uc3QgdGFpbCA9IG51bSAlIDEwMDA7XG4gICAgZm9ybWF0dGVkID0gYCR7KG51bSAtIHRhaWwpIC8gMTAwMH0sJHt0YWlsfWA7XG4gIH1cblxuICByZXR1cm4gYCQke2Zvcm1hdHRlZH1gO1xufVxuIiwiLy8gRGlydHkgd2F5IHRvIGdldCB3ZWVrZGF5cyBpbiBjdXJyZW50IGxhbmdcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdlZWtEYXlzICh0YWcpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKDE5NzAsIDAsIDUpO1xuICBsZXQgd2Vla2RheXNTdHIgPSAnJztcbiAgbGV0IGNvdW50ZXIgPSAwO1xuXG4gIHdoaWxlIChjb3VudGVyIDwgNykge1xuICAgIGNvbnN0IGRheW5hbWUgPSBkYXRlLnRvTG9jYWxlU3RyaW5nKCdkZWZhdWx0JywgeyB3ZWVrZGF5OiAnbmFycm93JyB9KTtcbiAgICB3ZWVrZGF5c1N0ciArPSBgPCR7dGFnfT4ke2RheW5hbWV9PC8ke3RhZ30+YDtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICBjb3VudGVyKys7XG4gIH1cblxuICByZXR1cm4gd2Vla2RheXNTdHI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aHJvdHRsZSAoZnVuYywgY29udGV4dCwgdGltZW91dCkge1xuICBsZXQgYXJncztcbiAgbGV0IGlzV2FpdGluZyA9IGZhbHNlO1xuICBsZXQgaXNGaXJzdENhbGwgPSB0cnVlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIGlmIChpc0ZpcnN0Q2FsbCkge1xuICAgICAgZnVuYy5hcHBseShjb250ZXh0LCAuLi5hcmdzKTtcbiAgICAgIGlzRmlyc3RDYWxsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFpc1dhaXRpbmcpIHtcbiAgICAgIGlzV2FpdGluZyA9IHRydWU7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIC4uLmFyZ3MpO1xuICAgICAgICBpc1dhaXRpbmcgPSBmYWxzZTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5cbmNvbnN0IGNscyA9IHtcbiAgZWxlbTogJ25vdGlmaWNhdGlvbicsXG4gIHdhcm5pbmc6ICdub3RpZmljYXRpb24tLXdhcm5pbmcnLFxuICBlcnJvcjogJ25vdGlmaWNhdGlvbi0tZXJyb3InXG59O1xuXG5jb25zdCBzZWNvbmQgPSAxMDAwO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RpZmljYXRpb24ge1xuICBjb25zdHJ1Y3RvciAoeyBtZXNzYWdlLCBjb250YWluZXIsIHR5cGUgfSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgIHRoaXMuY2xhc3NOYW1lcyA9IHRoaXMuZ2V0Q2xhc3NlcygpO1xuICAgIHRoaXMuYWRkRWxlbSgpO1xuICAgIHRoaXMuaXNGaW5pc2hlZCA9IGZhbHNlO1xuICB9XG5cbiAgYWRkRWxlbSAoKSB7XG4gICAgdGhpcy5lbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5hZGQoLi4udGhpcy5jbGFzc05hbWVzKTtcbiAgICB0aGlzLmVsZW0uZGF0YXNldC5zdGF0ZSA9ICdzaG93bic7XG4gICAgdGhpcy5lbGVtLmlubmVySFRNTCA9IHRoaXMubWVzc2FnZTtcbiAgICB0aGlzLmNvbnRhaW5lci5wcmVwZW5kKHRoaXMuZWxlbSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5oaWRlRWxlbSgpOyB9LCB0aGlzLmR1cmF0aW9uKTtcbiAgfVxuXG4gIGFzeW5jIGhpZGVFbGVtIChwYXJhbXMgPSB7fSkge1xuICAgIHRoaXMuaXNGaW5pc2hlZCA9IHRydWU7XG4gICAgdGhpcy5lbGVtLmRhdGFzZXQuc3RhdGUgPSAnaGlkZGVuJztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmVsZW0uYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmVsZW0ucmVtb3ZlKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0RHVyYXRpb24gKCkge1xuICAgIGlmICh0aGlzLnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgIHJldHVybiA1ICogc2Vjb25kO1xuICAgIH1cblxuICAgIHJldHVybiAzICogc2Vjb25kO1xuICB9XG5cbiAgZ2V0Q2xhc3NlcyAoKSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtjbHMuZWxlbV07XG5cbiAgICBpZiAodGhpcy50eXBlICYmIGNsc1t0aGlzLnR5cGVdKSB7XG4gICAgICBjbGFzc2VzLnB1c2goY2xzW3RoaXMudHlwZV0pO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG59XG4iLCJpbXBvcnQgTm90aWZpY2F0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvTm90aWZpY2F0aW9uL2luZGV4LmpzJztcblxuY29uc3Qgbm90aWZDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbm5vdGlmQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ25vdGlmaWNhdGlvbnMnKTtcbmRvY3VtZW50LmJvZHkuYXBwZW5kKG5vdGlmQ29udGFpbmVyKTtcblxubGV0IG5vdGlmaWNhdGlvbnMgPSBbXTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gbm90aWZ5IChtZXNzYWdlLCB0eXBlKSB7XG4gIGNvbnN0IG5vdGlmaWNhdGlvbiA9IG5ldyBOb3RpZmljYXRpb24oe1xuICAgIG1lc3NhZ2UsXG4gICAgY29udGFpbmVyOiBub3RpZkNvbnRhaW5lcixcbiAgICB0eXBlXG4gIH0pO1xuXG4gIG5vdGlmaWNhdGlvbnMucHVzaChub3RpZmljYXRpb24pO1xuXG4gIGlmIChub3RpZmljYXRpb24uZWxlbS5vZmZzZXRUb3AgPCAwKSB7XG4gICAgbm90aWZpY2F0aW9ucyA9IG5vdGlmaWNhdGlvbnMuZmlsdGVyKG5vdGlmaWNhdGlvbiA9PiB7XG4gICAgICByZXR1cm4gIW5vdGlmaWNhdGlvbi5pc0ZpbmlzaGVkO1xuICAgIH0pO1xuICAgIG5vdGlmaWNhdGlvbnMuc2hpZnQoKS5oaWRlRWxlbSgpO1xuICB9XG59XG4iLCIvLyBJbnNwaXJlZCBieSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9pbGlha2FuL2RkNmFkMGRhZGI2NjMwNTQ0ZDExODdjNGM5NGNjZjQwXG5pbXBvcnQgbm90aWZpZXIgZnJvbSAnLi4vbGliL25vdGlmaWVyLmpzJztcblxuLy8gY29uc29sZS5jbGVhcigpO1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hKU09OICh1cmwpIHtcbiAgbGV0IHJlc3BvbnNlO1xuXG4gIC8vIEVycm9yIHdoaWxlIGxvYWRpbmcgKGJhZCB1cmwgb3IgY29ubmVjdGlvbilcbiAgdHJ5IHtcbiAgICByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEZldGNoRXJyb3IocmVzcG9uc2UsIG51bGwsIGBOZXR3b3JrIGVycm9yIGZvciB1cmwgJHt1cmx9YCk7XG4gIH1cblxuICAvLyBCYWQgcmVzcG9uc2UgZnJvbSBzZXJ2ZXJcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIGxldCBib2R5O1xuICAgIGNvbnN0IHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0dXNUZXh0O1xuXG4gICAgdHJ5IHtcbiAgICAgIGJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAvLyBjYW4ndCByZXByb2R1Y2UgZ2V0dGluZyBib2R5IHdpdGggbm90IG9rIHN0YXR1c1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxuICAgIGxldCBtZXNzYWdlID0gYEVycm9yICR7cmVzcG9uc2Uuc3RhdHVzfSBmb3IgdXJsICR7dXJsfWA7XG5cbiAgICBpZiAoc3RhdHVzVGV4dCkge1xuICAgICAgbWVzc2FnZSArPSBgOiAke3N0YXR1c1RleHR9YDtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRmV0Y2hFcnJvcihyZXNwb25zZSwgYm9keSwgbWVzc2FnZSk7XG4gIH1cblxuICAvLyBSZXNwb25zZSBpcyBjb3JyZWN0LCB0cnkgdG8gZ2V0IGRhdGFcbiAgdHJ5IHtcbiAgICByZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRmV0Y2hFcnJvcihyZXNwb25zZSwgbnVsbCwgZXJyb3IubWVzc2FnZSk7XG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmNsYXNzIEZldGNoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yIChyZXNwb25zZSwgYm9keSwgbWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdGZXRjaEVycm9yJztcblxuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB0aGlzLmJvZHkgPSBib2R5O1xuICB9XG59XG5cbi8vIGhhbmRsZSB1bmNhdWdodCBmYWlsZWQgZmV0Y2ggdGhyb3VnaFxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIGV2ZW50ID0+IHtcbiAgaWYgKGV2ZW50LnJlYXNvbiBpbnN0YW5jZW9mIEZldGNoRXJyb3IpIHtcbiAgICBub3RpZmllcihldmVudC5yZWFzb24ubWVzc2FnZSwgJ2Vycm9yJyk7XG4gIH1cbn0pO1xuIiwiaW1wb3J0IGNyZWF0ZUVsZW1lbnQgZnJvbSAnLi9jcmVhdGVFbGVtZW50LmpzJztcbmltcG9ydCBlc2NhcGVIVE1MIGZyb20gJy4vZXNjYXBlSFRNTC5qcyc7XG5pbXBvcnQgZmlsbFRlbXBsYXRlIGZyb20gJy4vZmlsbFRlbXBsYXRlLmpzJztcbmltcG9ydCBmb3JtYXREYXRlIGZyb20gJy4vZm9ybWF0RGF0ZS5qcyc7XG5pbXBvcnQgZm9ybWF0VG90YWwgZnJvbSAnLi9mb3JtYXRUb3RhbC5qcyc7XG5pbXBvcnQgZ2V0RGF0ZUZyb21TdHJpbmcgZnJvbSAnLi9nZXREYXRlRnJvbVN0cmluZy5qcyc7XG5pbXBvcnQgZ2V0V2Vla0RheXMgZnJvbSAnLi9nZXRXZWVrRGF5cy5qcyc7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSAnLi90aHJvdHRsZS5qcyc7XG5pbXBvcnQgZmV0Y2hKc29uIGZyb20gJy4vZmV0Y2hKc29uLmpzJztcblxuZXhwb3J0IHtcbiAgY3JlYXRlRWxlbWVudCxcbiAgZXNjYXBlSFRNTCxcbiAgZmlsbFRlbXBsYXRlLFxuICBmb3JtYXREYXRlLFxuICBmb3JtYXRUb3RhbCxcbiAgZ2V0RGF0ZUZyb21TdHJpbmcsXG4gIGdldFdlZWtEYXlzLFxuICB0aHJvdHRsZSxcbiAgZmV0Y2hKc29uXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBmb3JtOiAncHJvZHVjdC1mb3JtJyxcbiAgbGlzdDogJ3Byb2R1Y3QtZm9ybV9fbGlzdCcsXG4gIGl0ZW06ICdwcm9kdWN0LWZvcm1fX2l0ZW0nLFxuICBpdGVtVGlueTogJ3Byb2R1Y3QtZm9ybV9faXRlbS0tdGlueScsXG4gIGl0ZW1Gb2xsb3c6ICdwcm9kdWN0LWZvcm1fX2l0ZW0tLWZvbGxvdycsXG4gIGl0ZW1GdWxsOiAncHJvZHVjdC1mb3JtX19pdGVtLS1mdWxsJyxcbiAgbGFiZWw6ICdwcm9kdWN0LWZvcm1fX2xhYmVsJyxcbiAgaW5wdXQ6ICdwcm9kdWN0LWZvcm1fX2lucHV0JyxcbiAgaW5wdXRUZXh0OiAncHJvZHVjdC1mb3JtX19pbnB1dC0tdGV4dCcsXG4gIGlucHV0TnVtYmVyOiAncHJvZHVjdC1mb3JtX19pbnB1dC0tbnVtYmVyJyxcbiAgaW5wdXRTZWxlY3Q6ICdwcm9kdWN0LWZvcm1fX2lucHV0LS1zZWxlY3QnLFxuICBpbnB1dFRleHRhcmVhOiAncHJvZHVjdC1mb3JtX19pbnB1dC0tdGV4dGFyZWEnLFxuICBpbWdzTGlzdDogJ3Byb2R1Y3QtZm9ybV9faW1hZ2VzLWxpc3QnLFxuICBpbWdzSXRlbTogJ3Byb2R1Y3QtZm9ybV9faW1hZ2VzLWl0ZW0nLFxuICBpbWc6ICdwcm9kdWN0LWZvcm1fX2ltYWdlJyxcbiAgaW1nV3JhcHBlcjogJ3Byb2R1Y3QtZm9ybV9faW1hZ2Utd3JhcHBlcicsXG4gIGltZ1NvdXJjZTogJ3Byb2R1Y3QtZm9ybV9faW1hZ2Utc291cmNlJyxcbiAgaW1nUmVtb3ZlOiAncHJvZHVjdC1mb3JtX19pbWFnZS1yZW1vdmUnLFxuICBwcmV2aWV3OiAncHJvZHVjdC1mb3JtX19wcmV2aWV3JyxcbiAgZm9vdGVyOiAncHJvZHVjdC1mb3JtX19mb290ZXInLFxuICBzdWJtaXQ6ICdwcm9kdWN0LWZvcm1fX3N1Ym1pdCdcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGVsZW06ICdzb3J0YWJsZS10YWJsZScsXG4gIHRhYmxlOiAnc29ydGFibGUtdGFibGVfX3RhYmxlJyxcbiAgdGhlYWQ6ICdzb3J0YWJsZS10YWJsZV9fdGhlYWQnLFxuICBoZWFkZXI6ICdzb3J0YWJsZS10YWJsZV9faGVhZGVyJyxcbiAgcm93OiAnc29ydGFibGUtdGFibGVfX3JvdycsXG4gIGNlbGw6ICdzb3J0YWJsZS10YWJsZV9fY2VsbCcsXG4gIGNlbGxFcnJvcjogJ3NvcnRhYmxlLXRhYmxlX19jZWxsLS1lcnJvcicsXG4gIGNlbGxTb3J0ZXI6ICdzb3J0YWJsZS10YWJsZV9fY2VsbC0tc29ydGVyJyxcbiAgaW1nOiAnc29ydGFibGUtdGFibGVfX2ltYWdlJyxcbiAgaW1nV3JhcHBlcjogJ3NvcnRhYmxlLXRhYmxlX19pbWFnZS13cmFwcGVyJyxcbiAgcHJldmlldzogJ3NvcnRhYmxlLXRhYmxlX19wcmV2aWV3JyxcbiAgbGluazogJ3NvcnRhYmxlLXRhYmxlX19saW5rJyxcbiAgY2F0ZWdvcnk6ICdzb3J0YWJsZS10YWJsZV9fY2F0ZWdvcnknLFxuICB0b29sdGlwQ2F0ZWdvcnk6ICdzb3J0YWJsZS10YWJsZV9fdG9vbHRpcC1jYXRlZ29yeScsXG4gIHRvb2x0aXBTdWJjYXRlZ29yeTogJ3NvcnRhYmxlLXRhYmxlX190b29sdGlwLXN1YmNhdGVnb3J5J1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZWxlbTogJ2NvbHVtbi1jaGFydCcsXG4gIGNvbnRlbnQ6ICdjb2x1bW4tY2hhcnRfX2NvbnRlbnQnLFxuICBoZWFkZXI6ICdjb2x1bW4tY2hhcnRfX2hlYWRlcicsXG4gIHRpdGxlOiAnY29sdW1uLWNoYXJ0X190aXRsZScsXG4gIHRvdGFsOiAnY29sdW1uLWNoYXJ0X190b3RhbCcsXG4gIGxpc3Q6ICdjb2x1bW4tY2hhcnRfX2xpc3QnLFxuICBpdGVtOiAnY29sdW1uLWNoYXJ0X19pdGVtJyxcbiAgdG9vbHRpcDogJ2NvbHVtbi1jaGFydF9fdG9vbHRpcCcsXG4gIHRvb2x0aXBEYXRlOiAnY29sdW1uLWNoYXJ0X190b29sdGlwLWRhdGUnLFxuICB0b29sdGlwUXVhbnRpdHk6ICdjb2x1bW4tY2hhcnRfX3Rvb2x0aXAtcXVhbnRpdHknLFxuICBlcnJvcjogJ2NvbHVtbi1jaGFydF9fZXJyb3InXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBlbGVtOiAnY2F0ZWdvcmllcycsXG4gIGxpc3Q6ICdjYXRlZ29yaWVzX19saXN0JyxcbiAgbGlzdFRvcDogJ2NhdGVnb3JpZXNfX2xpc3QtLXRvcGNhdGVnb3JpZXMnLFxuICBsaXN0U3ViY2F0czogJ2NhdGVnb3JpZXNfX2xpc3QtLXN1YmNhdGVnb3JpZXMnLFxuICBpdGVtOiAnY2F0ZWdvcmllc19faXRlbScsXG4gIGl0ZW1Ub3A6ICdjYXRlZ29yaWVzX19pdGVtLS10b3BjYXRlZ29yeScsXG4gIGl0ZW1TdWI6ICdjYXRlZ29yaWVzX19pdGVtLS1zdWJjYXRlZ29yeScsXG4gIGl0ZW1PcGVuOiAnY2F0ZWdvcmllc19faXRlbS0tb3BlbicsXG4gIHRvZ2dsZXI6ICdjYXRlZ29yaWVzX190b2dnbGVyJyxcbiAgY291bnRlcjogJ2NhdGVnb3JpZXNfX2NvdW50ZXInXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKG1vZHVsZUlkLCBsaXN0LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgY3NzOiBsaXN0W2ldWzFdLFxuICAgICAgbWVkaWE6IGxpc3RbaV1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGxpc3RbaV1bM11cbiAgICB9O1xuXG4gICAgaWYgKHN0eWxlc0luRG9tW21vZHVsZUlkXVtpXSkge1xuICAgICAgc3R5bGVzSW5Eb21bbW9kdWxlSWRdW2ldKHBhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0ucHVzaChhZGRTdHlsZShwYXJ0LCBvcHRpb25zKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbW9kdWxlSWQgPSBvcHRpb25zLmJhc2UgPyBtb2R1bGVJZCArIG9wdGlvbnMuYmFzZSA6IG1vZHVsZUlkO1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcblxuICBpZiAoIXN0eWxlc0luRG9tW21vZHVsZUlkXSkge1xuICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXSA9IFtdO1xuICB9XG5cbiAgbW9kdWxlc1RvRG9tKG1vZHVsZUlkLCBsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFzdHlsZXNJbkRvbVttb2R1bGVJZF0pIHtcbiAgICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXSA9IFtdO1xuICAgIH1cblxuICAgIG1vZHVsZXNUb0RvbShtb2R1bGVJZCwgbmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBqID0gbmV3TGlzdC5sZW5ndGg7IGogPCBzdHlsZXNJbkRvbVttb2R1bGVJZF0ubGVuZ3RoOyBqKyspIHtcbiAgICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXVtqXSgpO1xuICAgIH1cblxuICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXS5sZW5ndGggPSBuZXdMaXN0Lmxlbmd0aDtcblxuICAgIGlmIChzdHlsZXNJbkRvbVttb2R1bGVJZF0ubGVuZ3RoID09PSAwKSB7XG4gICAgICBkZWxldGUgc3R5bGVzSW5Eb21bbW9kdWxlSWRdO1xuICAgIH1cbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuXG5leHBvcnQgY29uc3QgaGVhZGVyID0gYDxoZWFkZXIgY2xhc3M9XCJwYWdlLWNvbnRlbnRfX2hlYWRlclwiPlxuICA8aDEgY2xhc3M9XCJwYWdlLWNvbnRlbnRfX3RpdGxlXCI+XG4gIDxhIGhyZWY9XCIvcHJvZHVjdHNcIj5Qcm9kdWN0czwvYT5cbiAgL0VkaXQgUHJvZHVjdDwvaDE+XG48L2hlYWRlcj5gO1xuXG5leHBvcnQgY29uc3QgaW5wdXRUZXh0ID0gYDxsYWJlbCBjbGFzcz1cIiR7Y2xzLmxhYmVsfVwiPlxuICB7ZmllbGROYW1lfVxuXG4gIDxpbnB1dFxuICAgIGNsYXNzPVwiJHtjbHMuaW5wdXR9ICR7Y2xzLmlucHV0VGV4dH1cIlxuICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICBuYW1lPVwie2lkfVwiXG4gICAgdmFsdWU9XCJ7dmFsdWV9XCIvPlxuPC9sYWJlbD5gO1xuXG5leHBvcnQgY29uc3QgaW5wdXROdW1iZXIgPSBgPGxhYmVsIGNsYXNzPVwiJHtjbHMubGFiZWx9XCI+XG4gIHtmaWVsZE5hbWV9XG5cbiAgPGlucHV0XG4gICAgY2xhc3M9XCIke2Nscy5pbnB1dH0gJHtjbHMuaW5wdXROdW1iZXJ9XCJcbiAgICB0eXBlPVwibnVtYmVyXCJcbiAgICBuYW1lPVwie2lkfVwiXG4gICAgdmFsdWU9XCJ7dmFsdWV9XCIvPlxuPC9sYWJlbD5gO1xuXG5leHBvcnQgY29uc3QgaW5wdXRUZXh0YXJlYSA9IGA8bGFiZWwgY2xhc3M9XCIke2Nscy5sYWJlbH1cIj5cbiAge2ZpZWxkTmFtZX1cblxuICA8dGV4dGFyZWFcbiAgICBjbGFzcz1cIiR7Y2xzLmlucHV0fSAke2Nscy5pbnB1dFRleHRhcmVhfVwiXG4gICAgbmFtZT1cIntpZH1cIj57dmFsdWV9PC90ZXh0YXJlYT5cbjwvbGFiZWw+YDtcblxuZXhwb3J0IGNvbnN0IGlucHV0U2VsZWN0ID0gYDxsYWJlbCBjbGFzcz1cIiR7Y2xzLmxhYmVsfVwiPlxuICB7ZmllbGROYW1lfVxuXG4gIDxzZWxlY3RcbiAgICBjbGFzcz1cIiR7Y2xzLmlucHV0fSAke2Nscy5pbnB1dFNlbGVjdH1cIlxuICAgIG5hbWU9XCJ7aWR9XCI+XG4gICAge29wdGlvbnN9XG4gIDwvc2VsZWN0PlxuPC9sYWJlbD5gO1xuIiwiaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZU1lc3NhZ2Uge1xuICBjb25zdHJ1Y3RvciAoeyB0aXRsZSwgdGV4dCwgY2FsbGJhY2ssIGNhbGxiYWNrVGV4dCwgZXJyb3IgfSkge1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLnRleHQgPSB0ZXh0IHx8ICdTb21ldGhpbmcgd2VudCB3cm9uZyc7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuY2FsbGJhY2tUZXh0ID0gY2FsbGJhY2tUZXh0O1xuICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcblxuICAgIGlmICghdGhpcy50aXRsZSAmJiB0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLnRpdGxlID0gJ0Vycm9yJztcbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZUVsZW1lbnQoKTtcbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnQgKCkge1xuICAgIHRoaXMuZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKCdwYWdlLW1lc3NhZ2UnKTtcblxuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZCgncGFnZS1tZXNzYWdlLS1lcnJvcicpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGVudCA9IGA8aDM+JHt0aGlzLnRpdGxlfTwvaDM+PHA+JHt0aGlzLnRleHR9PC9wPmA7XG5cbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5jb250ZW50ICs9IGA8ZGl2IGNsYXNzPVwicGFnZS1tZXNzYWdlX19lcnJvclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZS1tZXNzYWdlX19lcnJvci10ZXh0XCI+XG4gICAgICAgICAgPHN0cm9uZz4ke3RoaXMuZXJyb3IubmFtZX08L3N0cm9uZz46ICR7dGhpcy5lcnJvci5tZXNzYWdlfTwvZGl2PlxuICAgICAgPC9kaXY+YDtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlckJlZ2luJywgdGhpcy5jb250ZW50KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgZm9ybWF0VG90YWwsIGVzY2FwZUhUTUwgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCBzdGF0dXNUZXh0IGZyb20gJy4vc3RhdHVzVGV4dC5qcyc7XG5pbXBvcnQgY2xzIGZyb20gJy4vY2xhc3Nlcy5qcyc7XG5cbi8vIEluZm8gJiBzb3J0aW5nIG1ldGhvZHMgZm9yIHRhYmxlIGNvbHVtbnNcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW1hZ2VzOiB7XG4gICAgdGl0bGU6ICdJbWFnZScsXG4gICAgcmVuZGVyICh7IGltYWdlcyB9KSB7XG4gICAgICBpZiAoIWltYWdlcyB8fCAhaW1hZ2VzWzBdLnVybCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICBjb25zdCBzcmMgPSBpbWFnZXNbMF0udXJsO1xuICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiJHtjbHMuaW1nV3JhcHBlcn1cIj5cbiAgICAgIDxpbWcgc3JjPVwiJHtzcmN9XCIgY2xhc3M9XCIke2Nscy5pbWd9XCI+XG4gICAgICA8c3BhbiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgke3NyY30pXCIgY2xhc3M9XCIke2Nscy5wcmV2aWV3fVwiPjxzcGFuPlxuICAgICAgPGRpdj5gO1xuICAgIH0sXG4gICAgY29tcGFyZTogbnVsbFxuICB9LFxuICB0aXRsZToge1xuICAgIHRpdGxlOiAnTmFtZScsXG4gICAgcmVuZGVyICh7IHRpdGxlLCBpZCB9KSB7XG4gICAgICByZXR1cm4gYFxuICAgICAgJHt0aXRsZX1cbiAgICAgIDxhIGNsYXNzPVwiJHtjbHMubGlua31cIiBocmVmPVwiL3Byb2R1Y3RzLyR7aWR9XCI+PC9hPlxuICAgICAgYDtcbiAgICB9LFxuICAgIGNvbXBhcmUgKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLnRpdGxlLmxvY2FsZUNvbXBhcmUoYi50aXRsZSk7XG4gICAgfVxuICB9LFxuICBzdWJjYXRlZ29yeToge1xuICAgIHRpdGxlOiAnQ2F0ZWdvcnknLFxuICAgIHJlbmRlciAoeyBzdWJjYXRlZ29yeSB9KSB7XG4gICAgICBjb25zdCBjYXRlZ29yeSA9IHN1YmNhdGVnb3J5LmNhdGVnb3J5O1xuICAgICAgY29uc3QgdG9vdGlwQ29udGVudCA9IGA8c3BhbiBjbGFzcz1cIiR7Y2xzLnRvb2x0aXBDYXRlZ29yeX1cIj4ke2NhdGVnb3J5LnRpdGxlfTwvc3Bhbj4vPHNwYW4gY2xhc3M9XCIke2Nscy50b29sdGlwU3ViY2F0ZWdvcnl9XCI+JHtzdWJjYXRlZ29yeS50aXRsZX08L3NwYW4+YDtcbiAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCIke2Nscy5jYXRlZ29yeX1cIiBkYXRhLXRvb2x0aXAtY29udGVudD1cIiR7ZXNjYXBlSFRNTCh0b290aXBDb250ZW50KX1cIj4ke3N1YmNhdGVnb3J5LnRpdGxlfTwvc3Bhbj5gO1xuICAgIH0sXG4gICAgY29tcGFyZSAoYSwgYikge1xuICAgICAgLy8gU29ydGluZyBieSBydXNzaWFuIHRpdGxlc1xuICAgICAgY29uc3QgYUNhdE5hbWUgPSBhLnN1YmNhdGVnb3J5LnRpdGxlO1xuICAgICAgY29uc3QgYkNhdE5hbWUgPSBiLnN1YmNhdGVnb3J5LnRpdGxlO1xuICAgICAgcmV0dXJuIGFDYXROYW1lLmxvY2FsZUNvbXBhcmUoYkNhdE5hbWUpO1xuICAgIH1cbiAgfSxcbiAgcXVhbnRpdHk6IHtcbiAgICB0aXRsZTogJ1F1YW50aXR5JyxcbiAgICByZW5kZXIgKHsgcXVhbnRpdHkgfSkge1xuICAgICAgcmV0dXJuIHF1YW50aXR5O1xuICAgIH0sXG4gICAgY29tcGFyZSAoYSwgYikge1xuICAgICAgcmV0dXJuIGEucXVhbnRpdHkgLSBiLnF1YW50aXR5O1xuICAgIH1cbiAgfSxcbiAgcHJpY2U6IHtcbiAgICB0aXRsZTogJ1ByaWNlJyxcbiAgICByZW5kZXIgKHsgcHJpY2UgfSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFRvdGFsKHByaWNlKTtcbiAgICB9LFxuICAgIGNvbXBhcmUgKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLnByaWNlIC0gYi5wcmljZTtcbiAgICB9XG4gIH0sXG4gIHN0YXR1czoge1xuICAgIHRpdGxlOiAnU3RhdHVzJyxcbiAgICByZW5kZXIgKHsgc3RhdHVzIH0pIHtcbiAgICAgIHJldHVybiBzdGF0dXNUZXh0W3N0YXR1c107XG4gICAgfSxcbiAgICBjb21wYXJlIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5zdGF0dXMgLSBiLnN0YXR1cztcbiAgICB9XG4gIH1cbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAwOiAnRGlzYWJsZWQnLFxuICAxOiAnRW5hYmxlZCdcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGVsZW06ICd0b29sdGlwcy1jb250YWluZXInLFxuICBkaW1tZWQ6ICd0b29sdGlwcy1jb250YWluZXItLWRpbW1lZCcsXG4gIHRvb2x0aXA6ICd0b29sdGlwJ1xufTtcbiIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCBjbHMgZnJvbSAnLi9jbGFzc2VzLmpzJztcbmltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2x0aXBzIHtcbiAgY29uc3RydWN0b3IgKHsgZWxlbSwgZGltU2libGluZ3MgfSkge1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5hZGQoY2xzLmVsZW0pO1xuICAgIHRoaXMuZGltU2libGluZ3MgPSBkaW1TaWJsaW5ncztcblxuICAgIHRoaXMudG9vbHRpcCA9IGNyZWF0ZUVsZW1lbnQoYDxkaXYgY2xhc3M9XCIke2Nscy50b29sdGlwfVwiPjwvZGl2PmApO1xuICAgIHRoaXMuZWxlbS5hcHBlbmQodGhpcy50b29sdGlwKTtcblxuICAgIHRoaXMubGlzdE1vdXNlTW92ZSA9IHRoaXMubGlzdE1vdXNlTW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMubGlzdE1vdXNlT3V0ID0gdGhpcy5saXN0TW91c2VPdXQuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuZWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmxpc3RNb3VzZU1vdmUpO1xuICAgIHRoaXMuZWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5saXN0TW91c2VPdXQpO1xuICB9XG5cbiAgbGlzdE1vdXNlTW92ZSAoKSB7XG4gICAgaWYgKCFldmVudC50YXJnZXQuZGF0YXNldC50b29sdGlwQ29udGVudCkge1xuICAgICAgdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgdG9vbHRpcENvbnRlbnQgfSA9IGV2ZW50LnRhcmdldC5kYXRhc2V0O1xuICAgIHRoaXMudG9vbHRpcC5pbm5lckhUTUwgPSB0b29sdGlwQ29udGVudDtcbiAgICB0aGlzLnRvb2x0aXAuZGF0YXNldC52aXNpYmxlID0gMTtcblxuICAgIC8vIFBhcmVudCBjb250YWluZXIgY29vcmRzXG4gICAgdGhpcy5lbGVtQ29vcmRzID0gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGNvb3JkcyA9IHtcbiAgICAgIHg6IGV2ZW50LmNsaWVudFggLSB0aGlzLmVsZW1Db29yZHMueCxcbiAgICAgIHk6IGV2ZW50LmNsaWVudFkgLSB0aGlzLmVsZW1Db29yZHMueVxuICAgIH07XG5cbiAgICB0aGlzLnRvb2x0aXAuc3R5bGUgPSBgdHJhbnNmb3JtOiB0cmFuc2xhdGUoJHtjb29yZHMueH1weCwgJHtjb29yZHMueX1weClgO1xuXG4gICAgLy8gRml4IGN1dHRpbmcgYnkgd2luZG93XG4gICAgdGhpcy50b29sdGlwQ29vcmRzID0gdGhpcy50b29sdGlwLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGhpZGRlbkJ5V2luZG93ID0gdGhpcy50b29sdGlwQ29vcmRzLnJpZ2h0IC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuXG4gICAgaWYgKGhpZGRlbkJ5V2luZG93ID4gMCkge1xuICAgICAgY29vcmRzLnggLT0gaGlkZGVuQnlXaW5kb3c7XG4gICAgICB0aGlzLnRvb2x0aXAuc3R5bGUgPSBgdHJhbnNmb3JtOiB0cmFuc2xhdGUoJHtjb29yZHMueH1weCwgJHtjb29yZHMueX1weClgO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRpbVNpYmxpbmdzKSB7XG4gICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZChjbHMuZGltbWVkKTtcbiAgICB9XG4gIH1cblxuICBsaXN0TW91c2VPdXQgKCkge1xuICAgIGlmICghZXZlbnQudGFyZ2V0LmRhdGFzZXQudG9vbHRpcENvbnRlbnQpIHtcbiAgICAgIHRoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICB9XG4gIH1cblxuICBoaWRlVG9vbHRpcCAoKSB7XG4gICAgdGhpcy50b29sdGlwLmRhdGFzZXQudmlzaWJsZSA9IDA7XG4gICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xzLmRpbW1lZCk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgMDogJ2Rlc2MnLFxuICAxOiAnYXNjJ1xufTtcbiIsImltcG9ydCBkaXJlY3Rpb25zIGZyb20gJy4vZGlyZWN0aW9ucy5qcyc7XG5cbmV4cG9ydCBjb25zdCBnZXREaXJlY3Rpb25UZXh0ID0gaXNBc2MgPT4ge1xuICByZXR1cm4gZGlyZWN0aW9uc1sraXNBc2NdO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIHVybCA9IHVybCAmJiB1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJyksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsImltcG9ydCBjbHMgZnJvbSAnLi9jbGFzc2VzLmpzJztcblxuZXhwb3J0IGNvbnN0IGhlYWRlciA9IGA8aGVhZGVyIGNsYXNzPVwiJHtjbHMuaGVhZGVyfVwiPlxuICA8aDMgY2xhc3M9XCIke2Nscy50aXRsZX1cIj57dGl0bGV9PC9oMz5cbiAgPGRpdiBjbGFzcz1cIiR7Y2xzLnRvdGFsfVwiPnt0b3RhbH08L2Rpdj5cbjwvaGVhZGVyPmA7XG5cbmV4cG9ydCBjb25zdCBjaGFydEl0ZW0gPSBgPGxpXG4gIGNsYXNzPVwiJHtjbHMuaXRlbX1cIlxuICBkYXRhLXRvb2x0aXAtY29udGVudD1cInt0b290aXBDb250ZW50fVwiXG4gIHN0eWxlPVwiaGVpZ2h0OiB7aGVpZ2h0fVwiPjwvbGk+YDtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBoZWFkZXIsXG4gIGNoYXJ0SXRlbVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgMDogJ0Rpc2FibGVkJyxcbiAgMTogJ0VuYWJsZWQnXG59O1xuIiwiaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2F0ZWdvcmllc1RvRmxhdExpc3QgKGNhdGVnb3JpZXMpIHtcbiAgY29uc3QgZmxhdExpc3QgPSBbXTtcblxuICBmb3IgKGNvbnN0IGNhdGVnb3J5IG9mIGNhdGVnb3JpZXMpIHtcbiAgICBmb3IgKGNvbnN0IHN1YmNhdGVnb3J5IG9mIGNhdGVnb3J5LnN1YmNhdGVnb3JpZXMpIHtcbiAgICAgIGZsYXRMaXN0LnB1c2goe1xuICAgICAgICB2YWx1ZTogc3ViY2F0ZWdvcnkuaWQsXG4gICAgICAgIHRleHQ6IGAke2NhdGVnb3J5LnRpdGxlfSA+ICR7c3ViY2F0ZWdvcnkudGl0bGV9YFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZsYXRMaXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3B0aW9ucyAobGlzdCwgc2VsZWN0ZWQpIHtcbiAgcmV0dXJuIGxpc3RcbiAgICAubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBpdGVtLnZhbHVlIHx8IGluZGV4O1xuICAgICAgY29uc3QgdGV4dCA9IGl0ZW0udGV4dCB8fCBpdGVtO1xuICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IHZhbHVlID09PSBzZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAnJztcblxuICAgICAgcmV0dXJuIGA8b3B0aW9uIHZhbHVlPVwiJHt2YWx1ZX1cIiAke2lzU2VsZWN0ZWR9PiR7dGV4dH08L29wdGlvbj5gO1xuICAgIH0pXG4gICAgLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1nc0xpc3RNYXJrdXAgKGltYWdlcykge1xuICBjb25zdCBpbWFnZXNJdGVtcyA9IGltYWdlc1xuICAgIC5tYXAoaXRlbSA9PiB7XG4gICAgICByZXR1cm4gYDxsaSBjbGFzcz1cIiR7Y2xzLmltZ3NJdGVtfVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiJHtjbHMuaW1nV3JhcHBlcn1cIj5cbiAgICAgICAgICA8aW1nIHNyYz1cIiR7aXRlbS51cmx9XCIgY2xhc3M9XCIke2Nscy5pbWd9XCI+XG4gICAgICAgICAgPHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtpdGVtLnVybH0pXCIgY2xhc3M9XCIke2Nscy5wcmV2aWV3fVwiPjxzcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCIke2Nscy5pbWdTb3VyY2V9XCI+JHtpdGVtLnNvdXJjZX08L3NwYW4+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJHtjbHMuaW1nUmVtb3ZlfVwiPlJlbW92ZTwvYnV0dG9uPlxuICAgICAgPC9saT5gO1xuICAgIH0pO1xuXG4gIHJldHVybiBgICsgdXBsb2FkXG4gICAgPHVsIGNsYXNzPVwiJHtjbHMuaW1nc0xpc3R9XCIgaXM9XCJkcmFnZ2FibGUtbGlzdFwiPiR7aW1hZ2VzSXRlbXMuam9pbignICcpfTwvdWw+YDtcbn1cbiIsImltcG9ydCB7IGlucHV0VGV4dCwgaW5wdXROdW1iZXIsIGlucHV0VGV4dGFyZWEsIGlucHV0U2VsZWN0IH0gZnJvbSAnLi90ZW1wbGF0ZXMuanMnO1xuaW1wb3J0IHN0YXR1c1RleHQgZnJvbSAnLi9zdGF0dXNUZXh0LmpzJztcbmltcG9ydCB7IGZpbGxUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvaW5kZXguanMnO1xuaW1wb3J0IHsgY2F0ZWdvcmllc1RvRmxhdExpc3QsIGdldE9wdGlvbnMsIGdldEltZ3NMaXN0TWFya3VwIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuLy8gUmVuZGVyaW5nIG1ldGhvZHMgZm9yIHByb2R1Y3QgaW5wdXRzXG5leHBvcnQgZGVmYXVsdCB7XG4gIGltYWdlczoge1xuICAgIHJlbmRlciAoeyBpbWFnZXMgfSkge1xuICAgICAgaWYgKCFpbWFnZXMpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0SW1nc0xpc3RNYXJrdXAoaW1hZ2VzKTtcbiAgICB9LFxuICAgIGNvbXBhcmU6IG51bGxcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICByZW5kZXIgKHsgdGl0bGUgfSkge1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgaWQ6ICd0aXRsZScsXG4gICAgICAgIGZpZWxkTmFtZTogJ05hbWUnLFxuICAgICAgICB2YWx1ZTogdGl0bGVcbiAgICAgIH07XG4gICAgICByZXR1cm4gZmlsbFRlbXBsYXRlKHtcbiAgICAgICAgdG1wbDogaW5wdXRUZXh0LFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGRlc2NyaXB0aW9uOiB7XG4gICAgcmVuZGVyICh7IGRlc2NyaXB0aW9uIH0pIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGlkOiAnZGVzY3JpcHRpb24nLFxuICAgICAgICBmaWVsZE5hbWU6ICdEZXNjcmlwdGlvbicsXG4gICAgICAgIHZhbHVlOiBkZXNjcmlwdGlvblxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGZpbGxUZW1wbGF0ZSh7XG4gICAgICAgIHRtcGw6IGlucHV0VGV4dGFyZWEsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgc3ViY2F0ZWdvcnk6IHtcbiAgICByZW5kZXIgKHsgY2F0ZWdvcmllcywgc3ViY2F0ZWdvcnkgfSkge1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgaWQ6ICdzdWJjYXRlZ29yeScsXG4gICAgICAgIGZpZWxkTmFtZTogJ0NhdGVnb3J5JyxcbiAgICAgICAgb3B0aW9uczogZ2V0T3B0aW9ucyhjYXRlZ29yaWVzVG9GbGF0TGlzdChjYXRlZ29yaWVzKSwgc3ViY2F0ZWdvcnkpXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZmlsbFRlbXBsYXRlKHtcbiAgICAgICAgdG1wbDogaW5wdXRTZWxlY3QsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgcXVhbnRpdHk6IHtcbiAgICByZW5kZXIgKHsgcXVhbnRpdHkgfSkge1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgaWQ6ICdxdWFudGl0eScsXG4gICAgICAgIGZpZWxkTmFtZTogJ1F1YW50aXR5JyxcbiAgICAgICAgdmFsdWU6IHF1YW50aXR5XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZpbGxUZW1wbGF0ZSh7XG4gICAgICAgIHRtcGw6IGlucHV0TnVtYmVyLFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHByaWNlOiB7XG4gICAgcmVuZGVyICh7IHByaWNlIH0pIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGlkOiAncHJpY2UnLFxuICAgICAgICBmaWVsZE5hbWU6ICdQcmljZScsXG4gICAgICAgIHZhbHVlOiBwcmljZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBmaWxsVGVtcGxhdGUoe1xuICAgICAgICB0bXBsOiBpbnB1dE51bWJlcixcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBkaXNjb3VudDoge1xuICAgIHJlbmRlciAoeyBkaXNjb3VudCB9KSB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBpZDogJ2Rpc2NvdW50JyxcbiAgICAgICAgZmllbGROYW1lOiAnRGlzY291bnQnLFxuICAgICAgICB2YWx1ZTogZGlzY291bnRcbiAgICAgIH07XG4gICAgICByZXR1cm4gZmlsbFRlbXBsYXRlKHtcbiAgICAgICAgdG1wbDogaW5wdXROdW1iZXIsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgc3RhdHVzOiB7XG4gICAgcmVuZGVyICh7IHN0YXR1cyB9KSB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBpZDogJ3N0YXR1cycsXG4gICAgICAgIGZpZWxkTmFtZTogJ1N0YXR1cycsXG4gICAgICAgIHZhbHVlOiBzdGF0dXMsXG4gICAgICAgIG9wdGlvbnM6IGdldE9wdGlvbnMoT2JqZWN0LnZhbHVlcyhzdGF0dXNUZXh0KSwgc3RhdHVzKVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGZpbGxUZW1wbGF0ZSh7XG4gICAgICAgIHRtcGw6IGlucHV0U2VsZWN0LFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNjgyZGVkYWFmYjA0NGU3YjllYTM1MmE3MGJhYWY1Njkuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZiMTEyYjU1MDI3NmQ3NTJkMGIzZTEwN2FkZThkNjE3LnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4M2M3NTQyMGQwMzYwZWQyMjUxMWMwOTJlNTdkMWQ1NC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiOTI2NzkxNTRhZmRlMDgxNWM2MjIyYzdjMDQwMWY0NDIuc3ZnXCI7IiwiaW1wb3J0IFRvb2x0aXBzIGZyb20gJy4uL1Rvb2x0aXBzL2luZGV4LmpzJztcbmltcG9ydCB7XG4gIGZpbGxUZW1wbGF0ZSxcbiAgZm9ybWF0RGF0ZSxcbiAgZXNjYXBlSFRNTCxcbiAgZm9ybWF0VG90YWwsXG4gIGZldGNoSnNvblxufSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCBjbHMgZnJvbSAnLi9jbGFzc2VzLmpzJztcbmltcG9ydCB0ZW1wbGF0ZXMgZnJvbSAnLi90ZW1wbGF0ZXMuanMnO1xuXG5pbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2x1bW5DaGFydCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmFwaVVybCA9IHByb2Nlc3MuZW52LkFQSV9VUkwgfHwgJ2h0dHBzOi8vY291cnNlLWpzLmphdmFzY3JpcHQucnUnO1xuXG4gICAgdGhpcy5jaGFuZ2VEYXRlID0gdGhpcy5jaGFuZ2VEYXRlLmJpbmQodGhpcyk7XG4gIH1cblxuICBhc3luYyBjb25uZWN0ZWRDYWxsYmFjayAoKSB7XG4gICAgY29uc3QgeyB0eXBlLCBpc01vbmV5LCBmcm9tLCB0byB9ID0gdGhpcy5kYXRhc2V0O1xuXG4gICAgdGhpcy5kYXRlcyA9IHtcbiAgICAgIGZyb206IG5ldyBEYXRlKGZyb20pLFxuICAgICAgdG86IG5ldyBEYXRlKHRvKVxuICAgIH07XG5cbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuZm9ybWF0VG90YWwgPSBpc01vbmV5ID8gZm9ybWF0VG90YWwgOiBudWxsO1xuICAgIHRoaXMuY2xhc3NMaXN0LmFkZChjbHMuZWxlbSwgYCR7Y2xzLmVsZW19LS0ke3R5cGV9YCk7XG4gICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5hZGQoY2xzLmNvbnRlbnQpO1xuICAgIHRoaXMudGl0bGUgPSBgVG90YWwgJHt0eXBlfWA7XG4gICAgdGhpcy51cmwgPSB0aGlzLmdldFVybCgpO1xuXG4gICAgYXdhaXQgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLmFwcGVuZCh0aGlzLmVsZW0pO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlRGF0ZScsIHRoaXMuY2hhbmdlRGF0ZSk7XG4gIH1cblxuICBnZXRVcmwgKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmFwaVVybH0vYXBpL2Rhc2hib2FyZC8ke3RoaXMudHlwZX0/ZnJvbT0ke3RoaXMuZGF0ZXMuZnJvbX0mdG89JHt0aGlzLmRhdGVzLnRvfWA7XG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoSnNvbih0aGlzLnVybCk7XG4gICAgICByZXR1cm4geyBkYXRhIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7IGVycm9yIH07XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCB0aGlzLmdldERhdGEoKTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB0aGlzLmVsZW0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVFbmQnLCBgPGRpdiBjbGFzcz1cIiR7Y2xzLmVycm9yfVwiPiR7ZXJyb3J9PC9kaXY+YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy52YWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMuZGF0YSk7XG5cbiAgICBpZiAodGhpcy52YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnZhbHVlcy5wdXNoKCdObyBkYXRhJyk7XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZGVyU3RyID0gdGhpcy5nZXRIZWFkZXJTdHIoKTtcblxuICAgIGNvbnN0IGxpc3RTdHIgPSB0aGlzLmdldExpc3RTdHIoKTtcbiAgICB0aGlzLmVsZW0uaW5zZXJ0QWRqYWNlbnRIVE1MKFxuICAgICAgJ2JlZm9yZUVuZCcsXG4gICAgICBoZWFkZXJTdHIgKyBsaXN0U3RyXG4gICAgKTtcblxuICAgIHRoaXMuYWRkQWN0aW9ucygpO1xuICB9XG5cbiAgZ2V0SGVhZGVyU3RyICgpIHtcbiAgICB0aGlzLnRvdGFsID0gdGhpcy52YWx1ZXMucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiBwcmV2ICsgY3VycmVudCwgMCk7XG5cbiAgICBpZiAodGhpcy5mb3JtYXRUb3RhbCkge1xuICAgICAgdGhpcy50b3RhbCA9IHRoaXMuZm9ybWF0VG90YWwodGhpcy50b3RhbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGxUZW1wbGF0ZSh7XG4gICAgICB0bXBsOiB0ZW1wbGF0ZXMuaGVhZGVyLFxuICAgICAgZGF0YTogdGhpc1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0TGlzdFN0ciAoKSB7XG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoLi4udGhpcy52YWx1ZXMpO1xuICAgIGxldCBjaGFydFN0ciA9ICcnO1xuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5kYXRhKSB7XG4gICAgICBjb25zdCBkYXRlID0gZm9ybWF0RGF0ZShrZXkpO1xuICAgICAgbGV0IHZhbHVlID0gdGhpcy5kYXRhW2tleV07XG4gICAgICBjb25zdCBoZWlnaHRWYWx1ZSA9ICgodmFsdWUgLyBtYXgpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYCR7aGVpZ2h0VmFsdWV9JWA7XG5cbiAgICAgIGlmICh0aGlzLmZvcm1hdFRvdGFsKSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5mb3JtYXRUb3RhbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRvb3RpcENvbnRlbnQgPSBgPHNtYWxsIGNsYXNzPVwiJHtjbHMudG9vbHRpcERhdGV9XCI+JHtkYXRlfTwvc21hbGw+PGRpdiBjbGFzcz1cIiR7Y2xzLnRvb2x0aXBRdWFudGl0eX1cIj4ke3ZhbHVlfTwvZGl2PmA7XG5cbiAgICAgIGNoYXJ0U3RyICs9IGZpbGxUZW1wbGF0ZSh7XG4gICAgICAgIHRtcGw6IHRlbXBsYXRlcy5jaGFydEl0ZW0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAuLi50aGlzLFxuICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICB0b290aXBDb250ZW50OiBlc2NhcGVIVE1MKHRvb3RpcENvbnRlbnQpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBgPHVsIGNsYXNzPVwiJHtjbHMubGlzdH1cIj4ke2NoYXJ0U3RyfTwvdWw+YDtcbiAgfVxuXG4gIGFkZEFjdGlvbnMgKCkge1xuICAgIHRoaXMudG9vbHRpcHMgPSBuZXcgVG9vbHRpcHMoe1xuICAgICAgZWxlbTogdGhpcy5lbGVtLFxuICAgICAgZGltU2libGluZ3M6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGNoYW5nZURhdGUgKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudC5kZXRhaWwgfHwgIWV2ZW50LmRldGFpbC5kYXRlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZnJvbSwgdG8gfSA9IGV2ZW50LmRldGFpbC5kYXRlcztcbiAgICB0aGlzLmRhdGVzID0ge1xuICAgICAgZnJvbTogZnJvbSxcbiAgICAgIHRvOiB0b1xuICAgIH07XG5cbiAgICB0aGlzLnVybCA9IHRoaXMuZ2V0VXJsKCk7XG4gICAgdGhpcy5lbGVtLmlubmVySFRNTCA9ICcnO1xuICAgIGF3YWl0IHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5hcHBlbmQodGhpcy5lbGVtKTtcbiAgfVxufVxuIiwiaW1wb3J0IFRvb2x0aXBzIGZyb20gJy4uL1Rvb2x0aXBzL2luZGV4LmpzJztcbmltcG9ydCBjbHMgZnJvbSAnLi9jbGFzc2VzLmpzJztcbmltcG9ydCBzdGF0dXNUZXh0IGZyb20gJy4vc3RhdHVzVGV4dC5qcyc7XG5pbXBvcnQgZmllbGRzIGZyb20gJy4vZmllbGRzLmpzJztcbmltcG9ydCB7IGZldGNoSnNvbiwgdGhyb3R0bGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCB7IGdldERpcmVjdGlvblRleHQgfSBmcm9tICcuL2hlbHBlcnMuanMnO1xuaW1wb3J0IFBhZ2VNZXNzYWdlIGZyb20gJy4uL1BhZ2VNZXNzYWdlL2luZGV4LmpzJztcblxuaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ydGFibGVUYWJsZSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zb3J0aW5nID0ge1xuICAgICAgY3VycmVudDogbnVsbCxcbiAgICAgIGlzQXNjOiB0cnVlXG4gICAgfTtcblxuICAgIHRoaXMucGFnZSA9IHtcbiAgICAgIGl0ZW1zOiAyMCxcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICBpc0RhdGFFbmRlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgdGhpcy5hcGlVcmwgPSBwcm9jZXNzLmVudi5BUElfVVJMIHx8ICdodHRwczovL2NvdXJzZS1qcy5qYXZhc2NyaXB0LnJ1JztcblxuICAgIHRoaXMuY2hhbmdlRGF0ZSA9IHRoaXMuY2hhbmdlRGF0ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHVybCxcbiAgICAgIGZpZWxkc0xpc3QsXG4gICAgICBvcmRlckZpZWxkLFxuICAgICAgb3JkZXJEaXJlY3Rpb24sXG4gICAgICBpc0R5bmFtaWMsXG4gICAgICBmcm9tLFxuICAgICAgdG9cbiAgICB9ID0gdGhpcy5kYXRhc2V0O1xuXG4gICAgdGhpcy5kYXRlcyA9IHtcbiAgICAgIGZyb20sXG4gICAgICB0b1xuICAgIH07XG5cbiAgICB0aGlzLnVybCA9IHRoaXMuYXBpVXJsICsgdXJsO1xuICAgIHRoaXMuZmllbGRzTGlzdCA9IEpTT04ucGFyc2UoZmllbGRzTGlzdC5yZXBsYWNlKC8nL2csICdcIicpKTtcbiAgICB0aGlzLmlzRHluYW1pYyA9ICtpc0R5bmFtaWM7XG4gICAgdGhpcy5vcmRlciA9IHtcbiAgICAgIGZpZWxkOiBvcmRlckZpZWxkLFxuICAgICAgZGlyZWN0aW9uOiBvcmRlckRpcmVjdGlvblxuICAgIH07XG4gICAgdGhpcy5pbml0VGFibGUgPSB0aGlzLmluaXRUYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5vcmRlciAmJiB0aGlzLm9yZGVyLmRpcmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnNvcnRpbmcuaXNBc2MgPSB0aGlzLm9yZGVyLmRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICB0aGlzLmZldGNoVXJsID0gdGhpcy5nZXRGZXRjaFVybCgpO1xuICAgIC8vIFRyeSB0byB0aHJvdHRsZSBsb2FkaW5nIG9uIHNjcm9sbFxuICAgIHRoaXMub25Cb2R5U2Nyb2xsVGhyb3R0bGUgPSB0aHJvdHRsZSh0aGlzLm9uQm9keVNjcm9sbCwgdGhpcywgNTAwKTtcblxuICAgIHRoaXMuaW5pdFRhYmxlKCk7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2VEYXRlJywgdGhpcy5jaGFuZ2VEYXRlKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWREYXRhICgpIHtcbiAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgdGhpcy50YWJsZS5kYXRhc2V0LmxvYWRpbmcgPSAxO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRhYmxlRGF0YSA9IGF3YWl0IGZldGNoSnNvbih0aGlzLmZldGNoVXJsKTtcblxuICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMudGFibGUuZGF0YXNldC5sb2FkaW5nID0gMDtcblxuICAgICAgcmV0dXJuIHRhYmxlRGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gU2hvdyBlcnJvciBtZXNzYWdlIHRvIHVzZXJcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgUGFnZU1lc3NhZ2UoeyBlcnJvciB9KTtcbiAgICAgIHRoaXMudGFibGUuZGF0YXNldC5sb2FkaW5nID0gMDtcblxuICAgICAgdGhpcy50Qm9keS5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAgICdiZWZvcmVFbmQnLFxuICAgICAgICBgPHRyIGNsYXNzPVwiJHtjbHMucm93fVwiPjx0ZCBjbGFzcz1cIiR7Y2xzLmNlbGxFcnJvcn1cIj4ke21lc3NhZ2UuZWxlbS5vdXRlckhUTUx9PC90cj5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGluaXRUYWJsZSAoKSB7XG4gICAgdGhpcy5jcmVhdGVMYXlvdXQoKTtcbiAgICB0aGlzLmFkZEVsZW1IZWFkZXIoKTtcbiAgICB0aGlzLmFkZFRhYmxlRXZlbnRzKCk7XG5cbiAgICB0aGlzLmZpbGxUQm9keSgpO1xuICB9XG5cbiAgYXN5bmMgZmlsbFRCb2R5ICgpIHtcbiAgICBpZiAodGhpcy5wYWdlLmlzRGF0YUVuZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50YWJsZVJvd3MgPSBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG5cbiAgICAvLyBMYXN0IHBhZ2VcbiAgICBpZiAodGhpcy50YWJsZVJvd3MubGVuZ3RoIDwgdGhpcy5wYWdlLml0ZW1zKSB7XG4gICAgICB0aGlzLnBhZ2UuaXNEYXRhRW5kZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy50YWJsZVJvd3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNEeW5hbWljICYmIHRoaXMub3JkZXIgJiYgdGhpcy5vcmRlci5maWVsZCkge1xuICAgICAgdGhpcy5zb3J0Um93cyh0aGlzLm9yZGVyLmZpZWxkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlclRCb2R5KCk7XG4gIH1cblxuICBnZXRGZXRjaFVybCAoKSB7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgc3RhcnQ6IHRoaXMucGFnZS5jdXJyZW50ICogdGhpcy5wYWdlLml0ZW1zLFxuICAgICAgZW5kOiAodGhpcy5wYWdlLmN1cnJlbnQgKyAxKSAqIHRoaXMucGFnZS5pdGVtcyxcbiAgICAgIHNvcnQ6IHRoaXMub3JkZXIuZmllbGQsXG4gICAgICBvcmRlcjogZ2V0RGlyZWN0aW9uVGV4dCh0aGlzLnNvcnRpbmcuaXNBc2MpXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmRhdGVzICYmIHRoaXMuZGF0ZXMuZnJvbSkge1xuICAgICAgcGFyYW1zLmZyb20gPSB0aGlzLmRhdGVzLmZyb207XG4gICAgICBwYXJhbXMudG8gPSB0aGlzLmRhdGVzLnRvO1xuICAgIH1cblxuICAgIGxldCBwYXJhbXNTdHIgPSAnJztcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgIGxldCBwcmVmaXggPSAnXyc7XG4gICAgICBpZiAoa2V5ID09PSAnZnJvbScgfHwga2V5ID09PSAndG8nKSB7XG4gICAgICAgIHByZWZpeCA9ICcnO1xuICAgICAgfVxuXG4gICAgICBwYXJhbXNTdHIgKz0gYCYke3ByZWZpeH0ke2tleX09JHtwYXJhbXNba2V5XX1gO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy51cmwgKyBwYXJhbXNTdHI7XG4gIH1cblxuICBjcmVhdGVMYXlvdXQgKCkge1xuICAgIHRoaXMuY2xhc3NMaXN0LmFkZChjbHMuZWxlbSk7XG4gICAgdGhpcy50YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gICAgdGhpcy50YWJsZS5jbGFzc0xpc3QuYWRkKGNscy50YWJsZSk7XG4gICAgdGhpcy50Qm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG4gICAgdGhpcy50YWJsZS5hcHBlbmQodGhpcy50Qm9keSk7XG4gICAgdGhpcy50YWJsZS5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAnYmVmb3JlRW5kJyxcbiAgICAgIGA8dGZvb3Q+PHRyPjx0ZCBjb2xzcGFuPVwiJHt0aGlzLmZpZWxkc0xpc3QubGVuZ3RofVwiPjxkaXYgY2xhc3M9XCJzcGlubmVyXCI+PC9kaXY+PC90ZD48L3RyPjwvdGZvb3Q+YFxuICAgICk7XG5cbiAgICB0aGlzLmFwcGVuZCh0aGlzLnRhYmxlKTtcbiAgfVxuXG4gIC8vIEZpbGwgdGFibGUgaGVhZGVyIHdpdGggY29udGVudFxuICBhZGRFbGVtSGVhZGVyICgpIHtcbiAgICBsZXQgaGVhZGVyQ29udGVudCA9ICcnO1xuXG4gICAgdGhpcy5maWVsZHNMaXN0LmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgbGV0IHRoQ2xhc3MgPSBjbHMuY2VsbDtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIHNvcnRlcjogJycsXG4gICAgICAgIHNvcnREaXJlY3Rpb246ICcnXG4gICAgICB9O1xuICAgICAgaWYgKGZpZWxkc1tmaWVsZF0uY29tcGFyZSkge1xuICAgICAgICB0aENsYXNzICs9IGAgJHtjbHMuY2VsbFNvcnRlcn1gO1xuICAgICAgICBkYXRhLnNvcnRlciA9ICdkYXRhLXNvcnRlcj1cIjFcIic7XG4gICAgICB9XG4gICAgICBpZiAoZmllbGQgPT09IHRoaXMub3JkZXIuZmllbGQpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uVGV4dCh0aGlzLnNvcnRpbmcuaXNBc2MpO1xuICAgICAgICBkYXRhLnNvcnREaXJlY3Rpb24gPSBgZGF0YS1zb3J0LWRpcmVjdGlvbj1cIiR7ZGlyZWN0aW9ufVwiYDtcbiAgICAgIH1cbiAgICAgIGhlYWRlckNvbnRlbnQgKz0gYDx0aCBjbGFzcz1cIiR7dGhDbGFzc31cIlxuICAgICAgICBkYXRhLW5hbWU9XCIke2ZpZWxkfVwiXG4gICAgICAgICR7ZGF0YS5zb3J0ZXJ9XG4gICAgICAgICR7ZGF0YS5zb3J0RGlyZWN0aW9ufVxuICAgICAgICA+JHtmaWVsZHNbZmllbGRdLnRpdGxlfTwvdGg+YDtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRoZWFkU3RyID0gYDx0aGVhZCBjbGFzcz1cIiR7Y2xzLnRoZWFkfVwiPjx0ciBjbGFzcz1cIiR7Y2xzLmhlYWRlcn0gJHtjbHMucm93fVwiPlxuICAgICAgJHtoZWFkZXJDb250ZW50fVxuICAgIDwvdHI+PC90aGVhZD5gO1xuXG4gICAgdGhpcy50YWJsZS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyQmVnaW4nLCB0aGVhZFN0cik7XG5cbiAgICB0aGlzLnNvcnRpbmcuY3VycmVudCA9IHRoaXMudGFibGUucXVlcnlTZWxlY3RvcignW2RhdGEtc29ydC1kaXJlY3Rpb25dJyk7XG4gIH1cblxuICAvLyBTb3J0ZXJcbiAgc29ydGVyT25DbGljayAodGgpIHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IHRoLmRhdGFzZXQ7XG5cbiAgICBpZiAodGguZGF0YXNldC5zb3J0RGlyZWN0aW9uKSB7XG4gICAgICB0aGlzLnNvcnRpbmcuaXNBc2MgPSAhdGhpcy5zb3J0aW5nLmlzQXNjO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5zb3J0aW5nLmN1cnJlbnQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuc29ydGluZy5jdXJyZW50LmRhdGFzZXQuc29ydERpcmVjdGlvbjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc29ydGluZy5pc0FzYyA9IHRydWU7XG4gICAgICB0aGlzLnNvcnRpbmcuY3VycmVudCA9IHRoO1xuICAgIH1cblxuICAgIHRoLmRhdGFzZXQuc29ydERpcmVjdGlvbiA9IGdldERpcmVjdGlvblRleHQodGhpcy5zb3J0aW5nLmlzQXNjKTtcblxuICAgIGlmICh0aGlzLmlzRHluYW1pYykge1xuICAgICAgdGhpcy5zb3J0Um93c0R5bmFtaWMobmFtZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zb3J0Um93cyhuYW1lKTtcbiAgfVxuXG4gIC8vIFNvcnRpbmdcbiAgc29ydFJvd3MgKGZpZWxkKSB7XG4gICAgdGhpcy50YWJsZVJvd3Muc29ydChmaWVsZHNbZmllbGRdLmNvbXBhcmUpO1xuXG4gICAgaWYgKCF0aGlzLnNvcnRpbmcuaXNBc2MpIHtcbiAgICAgIHRoaXMudGFibGVSb3dzLnJldmVyc2UoKTtcbiAgICB9XG5cbiAgICB0aGlzLnRCb2R5LmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMucmVuZGVyVEJvZHkoKTtcbiAgfVxuXG4gIC8vIFNvcnRpbmdcbiAgc29ydFJvd3NEeW5hbWljIChmaWVsZCkge1xuICAgIHRoaXMub3JkZXIuZmllbGQgPSBmaWVsZDtcbiAgICB0aGlzLnBhZ2UuY3VycmVudCA9IDA7XG4gICAgdGhpcy5wYWdlLmlzRGF0YUVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5mZXRjaFVybCA9IHRoaXMuZ2V0RmV0Y2hVcmwoKTtcbiAgICB0aGlzLnRCb2R5LmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuZmlsbFRCb2R5KCk7XG4gIH1cblxuICAvLyBBZGRpbmcgZGVsZWdhdGVkIGV2ZW50cyB0byB0YWJsZVxuICBhZGRUYWJsZUV2ZW50cyAoKSB7XG4gICAgdGhpcy50YWJsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uQm9keVNjcm9sbFRocm90dGxlKTtcbiAgICB0aGlzLnRvb2x0aXBzID0gbmV3IFRvb2x0aXBzKHsgZWxlbTogdGhpcyB9KTtcbiAgfVxuXG4gIC8vIEhhbmRsZXMgYWxsIGV2ZW50cyBmb3IgdGFibGVcbiAgaGFuZGxlRXZlbnQgKCkge1xuICAgIC8vIFNvcnRpbmcgZXZlbnRzXG4gICAgaWYgKGV2ZW50LnRhcmdldC5kYXRhc2V0LnNvcnRlcikge1xuICAgICAgdGhpcy5zb3J0ZXJPbkNsaWNrKGV2ZW50LnRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgb25Cb2R5U2Nyb2xsICgpIHtcbiAgICBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBodG1sQ29vcmRzID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHNjcm9sbERlbHRhID0gaHRtbENvb3Jkcy5ib3R0b20gLSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICBpZiAoc2Nyb2xsRGVsdGEgPCAxMDApIHtcbiAgICAgIHRoaXMucGFnZS5jdXJyZW50Kys7XG4gICAgICB0aGlzLmZldGNoVXJsID0gdGhpcy5nZXRGZXRjaFVybCgpO1xuICAgICAgdGhpcy5maWxsVEJvZHkoKTtcbiAgICB9XG4gIH1cblxuICAvLyBGaWxsIHRhYmxlIGJvZHkgY2VsbHMgd2l0aCBjb250ZW50XG4gIHJlbmRlclRCb2R5ICgpIHtcbiAgICB0aGlzLnBhZ2VZT2Zmc2V0ID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXG4gICAgdGhpcy50YWJsZVJvd3MuZm9yRWFjaChyb3cgPT4ge1xuICAgICAgbGV0IHJvd0NvbnRlbnQgPSAnJztcbiAgICAgIGNvbnN0IHsgc3RhdHVzIH0gPSByb3c7XG5cbiAgICAgIHRoaXMuZmllbGRzTGlzdC5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgY29uc3QgdGRDbGFzc2VzID0gW1xuICAgICAgICAgIGNscy5jZWxsLFxuICAgICAgICAgIGAke2Nscy5jZWxsfS0tJHtmaWVsZH1gLFxuICAgICAgICAgIGAke2Nscy5jZWxsfS0tJHtzdGF0dXNUZXh0W3N0YXR1c10udG9Mb3dlckNhc2UoKX1gXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IHJlbmRlckZpZWxkID0gZmllbGRzW2ZpZWxkXS5yZW5kZXI7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVkQ29udGVudCA9IHJlbmRlckZpZWxkKHJvdyk7XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkQ29udGVudCkge1xuICAgICAgICAgIHJvd0NvbnRlbnQgKz0gYDx0ZCBjbGFzcz1cIiR7dGRDbGFzc2VzLmpvaW4oXG4gICAgICAgICAgICAnICdcbiAgICAgICAgICApfVwiPiR7cmVuZGVyZWRDb250ZW50fTwvdGQ+YDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMudEJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKFxuICAgICAgICAnYmVmb3JlRW5kJyxcbiAgICAgICAgYDx0ciBjbGFzcz1cIiR7Y2xzLnJvd31cIj4ke3Jvd0NvbnRlbnR9PC90cj5gXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMucGFnZVlPZmZzZXQpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCB0aGlzLnBhZ2VZT2Zmc2V0KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBjaGFuZ2VEYXRlIChldmVudCkge1xuICAgIGlmICghZXZlbnQuZGV0YWlsIHx8ICFldmVudC5kZXRhaWwuZGF0ZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGVzID0gZXZlbnQuZGV0YWlsLmRhdGVzO1xuICAgIHRoaXMuZmV0Y2hVcmwgPSB0aGlzLmdldEZldGNoVXJsKCk7XG4gICAgdGhpcy50Qm9keS5pbm5lckhUTUwgPSAnJztcbiAgICB0aGlzLmZpbGxUQm9keSgpO1xuICB9XG59XG4iLCJpbXBvcnQgY2xzIGZyb20gJy4vY2xhc3Nlcy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAge1xuICAgIG5hbWU6ICd0aXRsZSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdkZXNjcmlwdGlvbicsXG4gICAgbW9kczogW2Nscy5pdGVtRnVsbF1cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdpbWFnZXMnLFxuICAgIG1vZHM6IFtjbHMuaXRlbUZ1bGxdXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnc3ViY2F0ZWdvcnknXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAncHJpY2UnLFxuICAgIG1vZHM6IFtjbHMuaXRlbVRpbnldXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnZGlzY291bnQnLFxuICAgIG1vZHM6IFtjbHMuaXRlbVRpbnksIGNscy5pdGVtRm9sbG93XVxuICB9LFxuICB7XG4gICAgbmFtZTogJ3F1YW50aXR5JyxcbiAgICBtb2RzOiBbY2xzLml0ZW1UaW55XVxuICB9LFxuICB7XG4gICAgbmFtZTogJ3N0YXR1cycsXG4gICAgbW9kczogW2Nscy5pdGVtVGlueV1cbiAgfVxuXTtcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkobW9kdWxlLmlkLCBjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm5vdGlmaWNhdGlvbnN7cG9zaXRpb246Zml4ZWQ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmQ7cmlnaHQ6MXJlbTtib3R0b206MXJlbTt3aWR0aDoyMDBweDttYXgtaGVpZ2h0OjUwdmh9Lm5vdGlmaWNhdGlvbnttYXJnaW4tdG9wOi41cmVtO3BhZGRpbmc6Ljc1cmVtIDFyZW07YmFja2dyb3VuZDp2YXIoLS1ibHVlKTtib3JkZXItcmFkaXVzOnZhcigtLXJhZGl1cyk7Ym94LXNoYWRvdzowIDAgMC41ZW0gcmdiYSgwLDAsMCwwLjI1KTtjb2xvcjp2YXIoLS13aGl0ZSk7b3BhY2l0eTowO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xcmVtKTthbmltYXRpb246ZmFkZUluIC41cyBmb3J3YXJkc30ubm90aWZpY2F0aW9uLS13YXJuaW5ne2JhY2tncm91bmQ6dmFyKC0teWVsbG93KX0ubm90aWZpY2F0aW9uLS1lcnJvcntiYWNrZ3JvdW5kOnZhcigtLXJlZCl9Lm5vdGlmaWNhdGlvbltkYXRhLXN0YXRlPVxcXCJoaWRkZW5cXFwiXXthbmltYXRpb246ZmFkZU91dCAuNXN9QGtleWZyYW1lcyBmYWRlSW57dG97b3BhY2l0eToxO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIGZhZGVPdXR7ZnJvbXtvcGFjaXR5OjE7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7bWFyZ2luLWJvdHRvbTowfXRve29wYWNpdHk6MDttYXJnaW4tYm90dG9tOi0xcmVtfX1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucGFnZXt3aWR0aDoxMDAlfS5wYWdlLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTttYXgtd2lkdGg6MTM2MHB4O21hcmdpbjphdXRvO21pbi1oZWlnaHQ6MTAwdmh9LnBhZ2UtbWFpbiwucGFnZS1hc2lkZSwucGFnZS1mb290ZXJ7cGFkZGluZzoycmVtO2JveC1zaXppbmc6Ym9yZGVyLWJveH0ucGFnZS1tYWlue2ZsZXgtZ3JvdzoxfS5wYWdlLWFzaWRle21pbi13aWR0aDozMDBweDtiYWNrZ3JvdW5kOnZhcigtLWdyZXktZXh0cmEtbGlnaHQpfS5wYWdlLWFzaWRlX190aXRsZXttaW4taGVpZ2h0OjMuMnJlbTttYXJnaW4tYm90dG9tOjNyZW07bGluZS1oZWlnaHQ6MTtjb2xvcjp2YXIoLS10YWJsZS1ncmV5KX0ucGFnZS1hc2lkZV9fdGl0bGUgQXt0ZXh0LWRlY29yYXRpb246bm9uZX0ucGFnZS1hc2lkZV9fbGlzdHttYXJnaW46MDtwYWRkaW5nOjA7bGlzdC1zdHlsZS10eXBlOm5vbmV9LnBhZ2UtYXNpZGVfX2l0ZW17Zm9udC1zaXplOjEuMnJlbX0ucGFnZS1hc2lkZV9faXRlbSsucGFnZS1hc2lkZV9faXRlbXttYXJnaW4tdG9wOjFyZW19LnBhZ2UtYXNpZGVfX2xpbmt7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LnBhZ2UtYXNpZGVfX2xpbms6OmJlZm9yZXttYXJnaW4tcmlnaHQ6LjQ1cmVtfS5wYWdlLWFzaWRlX19saW5rLS1kYXNoYm9hcmQ6OmJlZm9yZXtjb250ZW50OlxcXCLwn5OKXFxcIn0ucGFnZS1hc2lkZV9fbGluay0tcHJvZHVjdHM6OmJlZm9yZXtjb250ZW50OlxcXCLwn5K8XFxcIn0ucGFnZS1hc2lkZV9fbGluay0tY2F0ZWdvcmllczo6YmVmb3Jle2NvbnRlbnQ6XFxcIvCfl4RcXFwifS5wYWdlLWFzaWRlX19saW5rLXRleHR7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX0ucGFnZS1hc2lkZV9fbGluazpob3ZlciAucGFnZS1hc2lkZV9fbGluay10ZXh0e3RleHQtZGVjb3JhdGlvbjpub25lfS5wYWdlLWZvb3RlcntmbGV4LWJhc2lzOjEwMCU7ZGlzcGxheTpmbGV4fS5wYWdlLWZvb3RlciBBK0F7bWFyZ2luLWxlZnQ6MXJlbX0ucGFnZS1jb250ZW50X19oZWFkZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tYm90dG9tOjNyZW19LnBhZ2UtY29udGVudF9fdGl0bGV7bWFyZ2luLWJvdHRvbTowO2xpbmUtaGVpZ2h0OjNyZW07Y29sb3I6dmFyKC0tZ3JleSl9LnBhZ2Utc2VjdGlvbntkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXB9LnBhZ2Utc2VjdGlvbisucGFnZS1zZWN0aW9ue21hcmdpbi10b3A6MnJlbX0ucGFnZS1zZWN0aW9uX190aXRsZXtmbGV4LWJhc2lzOjEwMCU7bGluZS1oZWlnaHQ6M3JlbTtjb2xvcjp2YXIoLS1ncmV5KX1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudG9vbHRpcHMtY29udGFpbmVye3Bvc2l0aW9uOnJlbGF0aXZlfS50b29sdGlwe3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MztsZWZ0OjA7dG9wOjA7bWFyZ2luOjFyZW0gMCAwIDFyZW07cGFkZGluZzouNXJlbSAuNzVyZW07YmFja2dyb3VuZDojRUVFO2JvcmRlci1yYWRpdXM6M3B4O2JveC1zaGFkb3c6MCAwIDVweCByZ2JhKDAsMCwwLDAuMjUpO2xpbmUtaGVpZ2h0OjE7Y29sb3I6IzU1NTt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsIDApO29wYWNpdHk6MDt0cmFuc2l0aW9uOm9wYWNpdHkgLjJzO3BvaW50ZXItZXZlbnRzOm5vbmV9LnRvb2x0aXBbZGF0YS12aXNpYmxlPVxcXCIxXFxcIl17b3BhY2l0eToxfVtkYXRhLXRvb2x0aXAtY29udGVudF17b3BhY2l0eToxO3RyYW5zaXRpb246b3BhY2l0eSAuMnN9LnRvb2x0aXBzLWNvbnRhaW5lci0tZGltbWVkIFtkYXRhLXRvb2x0aXAtY29udGVudF06bm90KDpob3Zlcil7b3BhY2l0eTouNH1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY29sdW1uLWNoYXJ0e2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTttaW4td2lkdGg6MTgwcHg7ZmxleC1iYXNpczpjYWxjKCgxMDAlIC0gMnJlbSkgLyAzKTttYXgtd2lkdGg6MzAwcHg7bWluLWhlaWdodDoxNTBweDttYXgtaGVpZ2h0OjMwMHB4O21hcmdpbjowIDAgLjVyZW0gMDtwYWRkaW5nOjIwcHg7Ym94LXNpemluZzpib3JkZXItYm94O2JvcmRlcjoxcHggc29saWQgdmFyKC0tZ3JleS1saWdodCk7Ym9yZGVyLWxlZnQ6NXB4IHNvbGlkIHZhcigtLWdyZXktbGlnaHQpO2JvcmRlci1yYWRpdXM6NXB4fS5jb2x1bW4tY2hhcnQrLmNvbHVtbi1jaGFydHttYXJnaW4tbGVmdDoxcmVtfS5jb2x1bW4tY2hhcnRfX2NvbnRlbnR7cG9zaXRpb246cmVsYXRpdmU7ZmxleC1ncm93OjE7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO21heC13aWR0aDoxMDAlfS5jb2x1bW4tY2hhcnRfX3RpdGxle21hcmdpbjowO2xpbmUtaGVpZ2h0OjE7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxZW07Y29sb3I6dmFyKC0tZ3JleSl9LmNvbHVtbi1jaGFydF9fdG90YWx7bWFyZ2luLXRvcDoxcmVtO2ZvbnQtc2l6ZToxLjZlbTtsaW5lLWhlaWdodDoxfS5jb2x1bW4tY2hhcnRfX2xpc3R7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmZsZXgtZW5kO3dpZHRoOjEwMCU7aGVpZ2h0OjUwcHg7bWFyZ2luOjA7bWFyZ2luLXRvcDouNXJlbTtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lfS5jb2x1bW4tY2hhcnRfX2l0ZW17ZmxleC1ncm93OjE7bWFyZ2luLWxlZnQ6MXB4O2JhY2tncm91bmQ6dmFyKC0tZ3JleS1saWdodCk7Y3Vyc29yOnBvaW50ZXJ9LmNvbHVtbi1jaGFydF9faXRlbTpmaXJzdC1jaGlsZHttYXJnaW4tbGVmdDowfS5jb2x1bW4tY2hhcnRfX3Rvb2x0aXAtZGF0ZXtmb250LXNpemU6LjllbX0uY29sdW1uLWNoYXJ0X190b29sdGlwLXF1YW50aXR5e21hcmdpbi10b3A6LjI1ZW07Zm9udC1zaXplOjEuMWVtfS5jb2x1bW4tY2hhcnQtLWN1c3RvbWVyc3tib3JkZXItbGVmdC1jb2xvcjpnb2xkfS5jb2x1bW4tY2hhcnQtLWN1c3RvbWVycyAuY29sdW1uLWNoYXJ0X19pdGVte2JhY2tncm91bmQ6Z29sZH0uY29sdW1uLWNoYXJ0LS1vcmRlcnN7Ym9yZGVyLWxlZnQtY29sb3I6dHVycXVvaXNlfS5jb2x1bW4tY2hhcnQtLW9yZGVycyAuY29sdW1uLWNoYXJ0X19pdGVte2JhY2tncm91bmQ6dHVycXVvaXNlfS5jb2x1bW4tY2hhcnQtLXNhbGVze2JvcmRlci1sZWZ0LWNvbG9yOnllbGxvd2dyZWVufS5jb2x1bW4tY2hhcnQtLXNhbGVzIC5jb2x1bW4tY2hhcnRfX2l0ZW17YmFja2dyb3VuZDp5ZWxsb3dncmVlbn0uY29sdW1uLWNoYXJ0X19lcnJvcnttYXgtd2lkdGg6MTAwJTtvdmVyZmxvdzphdXRvfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCIuL2NhbGVuZGFyLWljb24uc3ZnXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gcmVxdWlyZShcIi4vYXJyb3ctaWNvbi5zdmdcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucmFuZ2VwaWNrZXJ7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoxMX0ucmFuZ2VwaWNrZXJfX2lucHV0e2Rpc3BsYXk6aW5saW5lLWZsZXg7cGFkZGluZzoxMnB4IDE2cHggMTJweCA0MHB4O2N1cnNvcjpwb2ludGVyO2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LXNpemU6MTZweDtsaW5lLWhlaWdodDoyMHB4O2JvcmRlcjoxcHggc29saWQgdmFyKC0tZ3JleS1saWdodCk7Ym9yZGVyLXJhZGl1czo0cHg7b3V0bGluZTpub25lO2JhY2tncm91bmQ6dmFyKC0td2hpdGUpIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgMTZweCBjZW50ZXIgbm8tcmVwZWF0O2JhY2tncm91bmQtY29sb3I6dmFyKC0td2hpdGUpO2JhY2tncm91bmQtc2l6ZToxOHB4IDE4cHh9LnJhbmdlcGlja2VyX29wZW4gLnJhbmdlcGlja2VyX19pbnB1dCwucmFuZ2VwaWNrZXJfX2lucHV0OmZvY3VzLC5yYW5nZXBpY2tlcl9faW5wdXQ6YWN0aXZle2JvcmRlci1jb2xvcjp2YXIoLS1ibHVlKX0ucmFuZ2VwaWNrZXJfX2lucHV0PlNQQU57ZGlzcGxheTppbmxpbmUtZmxleDttYXJnaW46MCA0cHh9LnJhbmdlcGlja2VyX19pbnB1dD5TUEFOOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjB9LnJhbmdlcGlja2VyX19zZWxlY3RvcntkaXNwbGF5Om5vbmU7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS13aGl0ZSk7cGFkZGluZzozMnB4IDI2cHg7Ym9yZGVyLXJhZGl1czo2cHg7Ym94LXNoYWRvdzowIDRweCAyOXB4IHJnYmEoMCwwLDAsMC4wOSk7ZmxleC1kaXJlY3Rpb246cm93O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2ZsZXg6MSAwIGF1dG87cG9zaXRpb246YWJzb2x1dGU7dG9wOmNhbGMoMTAwJSArIDE2cHgpO3JpZ2h0OjA7ei1pbmRleDoxfS5yYW5nZXBpY2tlci0tb3BlbiAucmFuZ2VwaWNrZXJfX3NlbGVjdG9ye2Rpc3BsYXk6aW5saW5lLWZsZXh9LnJhbmdlcGlja2VyX19zZWxlY3Rvci1hcnJvd3t3aWR0aDozMHB4O2hlaWdodDoxNXB4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToxMDAlO3JpZ2h0OjYwcHg7b3ZlcmZsb3c6aGlkZGVufS5yYW5nZXBpY2tlcl9fc2VsZWN0b3ItYXJyb3c6OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTJweDtoZWlnaHQ6MTJweDtiYWNrZ3JvdW5kOnZhcigtLXdoaXRlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpIHJvdGF0ZSg0NWRlZyk7dG9wOjEwMCU7bGVmdDo1MCU7Ym94LXNoYWRvdzowIDFweCAxMHB4IHJnYmEoMCwwLDAsMC4wOSl9LnJhbmdlcGlja2VyX19jYWxlbmRhcnN7ZGlzcGxheTpmbGV4fS5yYW5nZXBpY2tlcl9fY2FsZW5kYXJ7d2lkdGg6MjUycHh9LnJhbmdlcGlja2VyX19jYWxlbmRhcjpsYXN0LWNoaWxke21hcmdpbi1sZWZ0OjI2cHh9LnJhbmdlcGlja2VyX19tb250aC1pbmRpY2F0b3J7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC13ZWlnaHQ6NjAwO2ZvbnQtc2l6ZToyMHB4O2xpbmUtaGVpZ2h0OjI0cHg7cGFkZGluZzowIDE1cHg7Y29sb3I6dmFyKC0tZGFyay1ibHVlLXRleHQpfS5yYW5nZXBpY2tlcl9fc2VsZWN0b3ItY29udHJvbHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MzJweDt3aWR0aDoxNXB4O2hlaWdodDoyNHB4O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcjtjdXJzb3I6cG9pbnRlcjt0cmFuc2l0aW9uOi4zcyBhbGw7YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpIGxlZnQgY2VudGVyIG5vLXJlcGVhdDtiYWNrZ3JvdW5kLXNpemU6OXB4IDEzcHg7Ym9yZGVyOjB9LnJhbmdlcGlja2VyX19zZWxlY3Rvci1jb250cm9sOmhvdmVye29wYWNpdHk6Ljh9LnJhbmdlcGlja2VyX19zZWxlY3Rvci1jb250cm9sLS1sZWZ0e2xlZnQ6MjZweH0ucmFuZ2VwaWNrZXJfX3NlbGVjdG9yLWNvbnRyb2wtLXJpZ2h0e3JpZ2h0OjI2cHg7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfS5yYW5nZXBpY2tlcl9fZGF5LW9mLXdlZWssLnJhbmdlcGlja2VyX19kYXRlLWdyaWR7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoNywgMWZyKX0ucmFuZ2VwaWNrZXJfX2RheS1vZi13ZWVre21hcmdpbi10b3A6MjhweDtmb250LXdlaWdodDo0MDA7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjBweDtjb2xvcjp2YXIoLS1ncmV5KTt0ZXh0LWFsaWduOmNlbnRlcn0ucmFuZ2VwaWNrZXJfX2RhdGUtZ3JpZHttYXJnaW4tdG9wOjE2cHh9LnJhbmdlcGlja2VyX19jZWxse3Bvc2l0aW9uOnJlbGF0aXZlO2JvcmRlcjowO3dpZHRoOjM2cHg7aGVpZ2h0OjM2cHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtjb2xvcjp2YXIoLS1kYXJrLWJsdWUtdGV4dCk7Ym9yZGVyLXJhZGl1czowO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXNpemU6MTZweDtsaW5lLWhlaWdodDoyMHB4O2N1cnNvcjpwb2ludGVyfS5yYW5nZXBpY2tlcl9fY2VsbDphY3RpdmUsLnJhbmdlcGlja2VyX19jZWxsLnJhbmdlcGlja2VyX19zZWxlY3RlZCwucmFuZ2VwaWNrZXJfX2NlbGwucmFuZ2VwaWNrZXJfX3NlbGVjdGVkLWZyb20sLnJhbmdlcGlja2VyX19jZWxsLnJhbmdlcGlja2VyX19zZWxlY3RlZC10b3tiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWJsdWUpO2NvbG9yOnZhcigtLXdoaXRlKX0ucmFuZ2VwaWNrZXJfX2NlbGw6aG92ZXIsLnJhbmdlcGlja2VyX19jZWxsOmZvY3Vze291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWxpZ2h0LWJsdWUpO2NvbG9yOnZhcigtLWRhcmstYmx1ZS10ZXh0KTt0cmFuc2l0aW9uOi4ycyBhbGx9LnJhbmdlcGlja2VyX19jZWxsLnJhbmdlcGlja2VyX19zZWxlY3RlZDpob3ZlciwucmFuZ2VwaWNrZXJfX2NlbGwucmFuZ2VwaWNrZXJfX3NlbGVjdGVkLWZyb206aG92ZXIsLnJhbmdlcGlja2VyX19jZWxsLnJhbmdlcGlja2VyX19zZWxlY3RlZC10bzpob3ZlciwucmFuZ2VwaWNrZXJfX2NlbGwucmFuZ2VwaWNrZXJfX3NlbGVjdGVkOmZvY3VzLC5yYW5nZXBpY2tlcl9fY2VsbC5yYW5nZXBpY2tlcl9fc2VsZWN0ZWQtZnJvbTpmb2N1cywucmFuZ2VwaWNrZXJfX2NlbGwucmFuZ2VwaWNrZXJfX3NlbGVjdGVkLXRvOmZvY3Vze2JhY2tncm91bmQtY29sb3I6dmFyKC0tbWlkZGxlLWJsdWUpO2NvbG9yOnZhcigtLWRhcmstYmx1ZS10ZXh0KX0ucmFuZ2VwaWNrZXJfX2NlbGwucmFuZ2VwaWNrZXJfX3NlbGVjdGVkLWJldHdlZW57YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1saWdodC1ibHVlKX1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucGFnZS1tZXNzYWdle21heC13aWR0aDo4MDBweDttYXJnaW46MnJlbSBhdXRvO3BhZGRpbmc6MXJlbTtiYWNrZ3JvdW5kOmxpZ2h0Z29sZGVucm9keWVsbG93O2JvcmRlci1yYWRpdXM6dmFyKC0tcmFkaXVzKX0ucGFnZS1tZXNzYWdlLS1lcnJvcntiYWNrZ3JvdW5kOm1pc3R5cm9zZX0ucGFnZS1tZXNzYWdlX19lcnJvcnttYXJnaW4tdG9wOjFyZW07cGFkZGluZzoxcmVtO2JhY2tncm91bmQ6I0ZGRjtib3JkZXItcmFkaXVzOnZhcigtLXJhZGl1cyl9LnBhZ2UtbWVzc2FnZV9fZXJyb3ItdGV4dHtmb250LWZhbWlseTpDb3VyaWVyIE5ldywgQ291cmllciwgbW9ub3NwYWNlfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zb3J0YWJsZS10YWJsZXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO21heC13aWR0aDoxMDAlO21pbi1oZWlnaHQ6MjAwcHg7bWFyZ2luLWJvdHRvbTo0MHB4O2JhY2tncm91bmQtY29sb3I6dmFyKC0td2hpdGUpfS5zb3J0YWJsZS10YWJsZV9fdGFibGV7d2lkdGg6MTAwJX0uc29ydGFibGUtdGFibGVfX3Jvd3twb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmdyaWQ7Z3JpZDphdXRvLWZsb3cgLyAxMiUgMzglIDIwJSAxMCUgMTAlIDEwJTt0ZXh0LWRlY29yYXRpb246bm9uZX0uc29ydGFibGUtdGFibGVfX2NlbGx7cGFkZGluZzoxNnB4O2ZvbnQtc2l6ZToxNnB4O2xpbmUtaGVpZ2h0OjIwcHg7Y29sb3I6dmFyKC0tdGFibGUtYmxhY2spO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgdmFyKC0tZ3JleS1saWdodCl9LnNvcnRhYmxlLXRhYmxlX19jZWxsOmZpcnN0LWNoaWxke3BhZGRpbmctbGVmdDozMnB4fS5zb3J0YWJsZS10YWJsZV9fY2VsbDpsYXN0LWNoaWxke3BhZGRpbmctcmlnaHQ6MzJweH0uc29ydGFibGUtdGFibGVfX2NlbGwtLWVycm9ye2dyaWQtY29sdW1uLXN0YXJ0OjE7Z3JpZC1jb2x1bW4tZW5kOjd9LnNvcnRhYmxlLXRhYmxlX190aGVhZHtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOnN0aWNreTt6LWluZGV4OjM7dG9wOjA7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS13aGl0ZSl9LnNvcnRhYmxlLXRhYmxlX19oZWFkZXIgLnNvcnRhYmxlLXRhYmxlX19jZWxse21pbi13aWR0aDoxMjBweDtjb2xvcjp2YXIoLS1ncmV5LWxpZ2h0KX0uc29ydGFibGUtdGFibGVfX2hlYWRlciAuc29ydGFibGUtdGFibGVfX2NlbGxbZGF0YS1zb3J0YWJsZV17Y3Vyc29yOnBvaW50ZXJ9LnNvcnRhYmxlLXRhYmxlX19jZWxsLS1xdWFudGl0eSwuc29ydGFibGUtdGFibGVfX2NlbGwtLXByaWNle2p1c3RpZnktY29udGVudDpmbGV4LWVuZH0uc29ydGFibGUtdGFibGVfX2NlbGwtLWRpc2FibGVke29wYWNpdHk6LjV9LnNvcnRhYmxlLXRhYmxlX19jZWxsW2RhdGEtc29ydC1kaXJlY3Rpb25dOjphZnRlcntjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MDtoZWlnaHQ6MDttYXJnaW4tdG9wOi4yNWVtO21hcmdpbi1sZWZ0Oi4yNWVtO2JvcmRlcjo1cHggc29saWQ7Ym9yZGVyLWNvbG9yOmN1cnJlbnRDb2xvciB0cmFuc3BhcmVudH0uc29ydGFibGUtdGFibGVfX2NlbGxbZGF0YS1zb3J0LWRpcmVjdGlvbj1cXFwiYXNjXFxcIl06OmFmdGVye2JvcmRlci10b3A6bm9uZX0uc29ydGFibGUtdGFibGVfX2NlbGxbZGF0YS1zb3J0LWRpcmVjdGlvbj1cXFwiZGVzY1xcXCJdOjphZnRlcntib3JkZXItYm90dG9tOm5vbmV9LnNvcnRhYmxlLXRhYmxlX19jZWxsLS1zb3J0ZXI6aG92ZXJ7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6dmFyKC0tZ3JleSl9LnNvcnRhYmxlLXRhYmxlX19pbWFnZS13cmFwcGVye3Bvc2l0aW9uOnJlbGF0aXZlfS5zb3J0YWJsZS10YWJsZV9faW1hZ2V7ZGlzcGxheTpibG9jaztoZWlnaHQ6NDBweDt3aWR0aDoxMDAlO21heC13aWR0aDoxMDAlO21pbi13aWR0aDo0MHB4O29iamVjdC1maXQ6Y29udGFpbjtwYWRkaW5nOjRweDtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWdyZXktbGlnaHQpO2JvcmRlci1yYWRpdXM6MnB4fS5zb3J0YWJsZS10YWJsZV9fcHJldmlld3twb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjI7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7b3BhY2l0eTowO3BhZGRpbmc6LjI1ZW07YmFja2dyb3VuZC1vcmlnaW46Y29udGVudC1ib3g7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS13aGl0ZSk7YmFja2dyb3VuZC1zaXplOmNvbnRhaW47YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246NTAlIDUwJTtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWdyZXktbGlnaHQpO3RyYW5zaXRpb246YWxsIC4yNXN9LnNvcnRhYmxlLXRhYmxlX19wcmV2aWV3OmhvdmVye3dpZHRoOjMwMCU7aGVpZ2h0OjMwMCU7b3BhY2l0eToxfS5zb3J0YWJsZS10YWJsZV9fbGlua3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MH0uc29ydGFibGUtdGFibGVfX2NhdGVnb3J5e3Bvc2l0aW9uOnJlbGF0aXZlO2N1cnNvcjpwb2ludGVyfS5zb3J0YWJsZS10YWJsZV9fdG9vbHRpcC1jYXRlZ29yeXtjb2xvcjp2YXIoLS1ncmV5KX1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLi9ncmFiLWljb24uc3ZnXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZHJhZ2dhYmxlLWxpc3R7cG9zaXRpb246cmVsYXRpdmV9LmRyYWdnYWJsZS1saXN0X19pdGVte2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Y3Vyc29yOmdyYWJ9LmRyYWdnYWJsZS1saXN0X19pdGVtOjpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjtkaXNwbGF5OmJsb2NrO2hlaWdodDoxOHB4O3dpZHRoOjExcHg7bWFyZ2luLXJpZ2h0OjFyZW07YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpIDUwJSA1MCUgbm8tcmVwZWF0O29wYWNpdHk6LjV9LmRyYWdnYWJsZS1saXN0IC5kcmFnZ2FibGUtbGlzdF9faXRlbS0tcGxhY2Vob2xkZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1ncmV5LWxpZ2h0KX0uZHJhZ2dhYmxlLWxpc3QgLmRyYWdnYWJsZS1saXN0X19pdGVtLS1wbGFjZWhvbGRlcjo6YmVmb3Jle2JhY2tncm91bmQ6bm9uZX0uZHJhZ2dhYmxlLWxpc3RfX2l0ZW0tLWRyYWdnZWR7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZDp2YXIoLS13aGl0ZSk7Ym94LXNoYWRvdzowIDAgMXJlbSByZ2JhKDAsMCwwLDAuMzUpO2N1cnNvcjpncmFiYmluZ30uZHJhZ2dhYmxlLWxpc3RfX2l0ZW0tLWRyYWdnZWQ6OmJlZm9yZXtvcGFjaXR5OjF9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9jYXRlZ29yaWVzL2luZGV4LmpzXCI6IDQxLFxuXHRcIi4vZGFzaGJvYXJkL2luZGV4LmpzXCI6IDQ0LFxuXHRcIi4vZXJyb3I0MDQvaW5kZXguanNcIjogNDUsXG5cdFwiLi9wcm9kdWN0cy9lZGl0L2luZGV4LmpzXCI6IDQ2LFxuXHRcIi4vcHJvZHVjdHMvaW5kZXguanNcIjogNDlcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0FzeW5jQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIHdlYnBhY2tBc3luY0NvbnRleHRSZXNvbHZlKHJlcSkudGhlbihfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tBc3luY0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHQvLyBIZXJlIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKSBpcyB1c2VkIGluc3RlYWQgb2YgbmV3IFByb21pc2UoKSB0byBwcmV2ZW50XG5cdC8vIHVuY2F1Z2h0IGV4Y2VwdGlvbiBwb3BwaW5nIHVwIGluIGRldnRvb2xzXG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0XHR0aHJvdyBlO1xuXHRcdH1cblx0XHRyZXR1cm4gbWFwW3JlcV07XG5cdH0pO1xufVxud2VicGFja0FzeW5jQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0FzeW5jQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tBc3luY0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tBc3luY0NvbnRleHRSZXNvbHZlO1xud2VicGFja0FzeW5jQ29udGV4dC5pZCA9IDQwO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQXN5bmNDb250ZXh0OyIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIGZldGNoSnNvbiB9IGZyb20gJy4uLy4uL2hlbHBlcnMvaW5kZXguanMnO1xuaW1wb3J0IFBhZ2VNZXNzYWdlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvUGFnZU1lc3NhZ2UvaW5kZXguanMnO1xuaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5hcGlVcmwgPSBwcm9jZXNzLmVudi5BUElfVVJMIHx8ICdodHRwczovL2NvdXJzZS1qcy5qYXZhc2NyaXB0LnJ1JztcbiAgICB0aGlzLmZldGNoVXJsID0gYCR7dGhpcy5hcGlVcmx9L2FwaS9yZXN0L2NhdGVnb3JpZXM/X3NvcnQ9d2VpZ2h0Jl9yZWZzPXN1YmNhdGVnb3J5YDtcblxuICAgIHRoaXMubGlzdENsaWNrID0gdGhpcy5saXN0Q2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFzeW5jIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBjYXRlZ29yaWVzLCBtZXNzYWdlIH0gPSBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG5cbiAgICBpZiAobWVzc2FnZSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoYDxkaXYgY2xhc3M9XCJwYWdlLWNvbnRlbnRcIj5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJwYWdlLXNlY3Rpb24gY2F0ZWdvcmllc1wiPlxuICAgICAgICAgIDxoMiBjbGFzcz1cInBhZ2Utc2VjdGlvbl9fdGl0bGVcIj5DYXRlZ29yaWVzPC9oMj5cblxuICAgICAgICAgICR7bWVzc2FnZS5lbGVtLm91dGVySFRNTH1cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgPC9kaXY+XG4gICAgICBgKTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0ID0gdGhpcy5jcmVhdGVMaXN0KGNhdGVnb3JpZXMpO1xuICAgIHRoaXMuZWxlbSA9IGNyZWF0ZUVsZW1lbnQoYDxkaXYgY2xhc3M9XCJwYWdlLWNvbnRlbnRcIj5cbiAgICAgIDxzZWN0aW9uIGNsYXNzPVwicGFnZS1zZWN0aW9uIGNhdGVnb3JpZXNcIj5cbiAgICAgICAgPGgyIGNsYXNzPVwicGFnZS1zZWN0aW9uX190aXRsZVwiPkNhdGVnb3JpZXM8L2gyPlxuXG4gICAgICAgICR7bGlzdH1cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8L2Rpdj5gKTtcblxuICAgIHRoaXMuYWRkRXZlbnRzKCk7XG5cbiAgICByZXR1cm4gdGhpcy5lbGVtO1xuICB9XG5cbiAgYXN5bmMgbG9hZERhdGEgKCkge1xuICAgIC8vIFRPRE86INC40L3QtNC40LrQsNGC0L7RgCDQt9Cw0LPRgNGD0LfQutC4XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSBhd2FpdCBmZXRjaEpzb24odGhpcy5mZXRjaFVybCk7XG5cbiAgICAgIHJldHVybiB7IGNhdGVnb3JpZXMgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gU2hvdyBlcnJvciBtZXNzYWdlIHRvIHVzZXJcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgUGFnZU1lc3NhZ2UoeyBlcnJvciB9KTtcblxuICAgICAgcmV0dXJuIHsgbWVzc2FnZSB9O1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUxpc3QgKGl0ZW1zLCBpc1N1YmNhdCA9IGZhbHNlKSB7XG4gICAgbGV0IGl0ZW1zU3RyID0gJyc7XG4gICAgbGV0IGxpc3RDbGFzcyA9IGNscy5saXN0VG9wO1xuICAgIGxldCBpdGVtQ2xhc3MgPSBjbHMuaXRlbTtcbiAgICBsZXQgaXNEcmFnZ2FibGVBdHRyID0gJyc7XG5cbiAgICBpZiAoaXNTdWJjYXQpIHtcbiAgICAgIGxpc3RDbGFzcyA9IGNscy5saXN0U3ViY2F0cztcbiAgICAgIGl0ZW1DbGFzcyArPSBgICR7Y2xzLml0ZW1TdWJ9YDtcbiAgICAgIGlzRHJhZ2dhYmxlQXR0ciA9ICdpcz1cImRyYWdnYWJsZS1saXN0XCInO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtQ2xhc3MgKz0gYCAke2Nscy5pdGVtVG9wfWA7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgbGV0IHN1YkNhdHNMaXN0ID0gJyc7XG4gICAgICBsZXQgdGl0bGUgPSBpdGVtLnRpdGxlO1xuICAgICAgY29uc3Qgc3ViQ2F0cyA9IGl0ZW0uc3ViY2F0ZWdvcmllcztcbiAgICAgIGxldCBjb3VudGVyID0gJyc7XG5cbiAgICAgIGlmIChpc1N1YmNhdCkge1xuICAgICAgICBjb25zdCBjb3VudGVyVGV4dCA9IHRoaXMuZ2V0UGx1cmFsKGl0ZW0uY291bnQsIFsncHJvZHVjdCcsICdwcm9kdWN0cyddKTtcbiAgICAgICAgY291bnRlciA9IGA8c3BhbiBjbGFzcz1cIiR7Y2xzLmNvdW50ZXJ9XCI+JHtjb3VudGVyVGV4dH08L3NwYW4+YDtcbiAgICAgIH1cblxuICAgICAgLy8gY29uc29sZS5sb2coaXRlbSlcblxuICAgICAgaWYgKHN1YkNhdHMpIHtcbiAgICAgICAgdGl0bGUgPSBgIDxidXR0b24gY2xhc3M9XCIke2Nscy50b2dnbGVyfVwiPiR7aXRlbS50aXRsZX08L2J1dHRvbj5gO1xuICAgICAgICBzdWJDYXRzTGlzdCA9IHRoaXMuY3JlYXRlTGlzdChzdWJDYXRzLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaXRlbXNTdHIgKz0gYDxsaSBjbGFzcz1cIiR7aXRlbUNsYXNzfVwiPlxuICAgICAgICAke3RpdGxlfVxuICAgICAgICAke2NvdW50ZXJ9XG4gICAgICAgICR7c3ViQ2F0c0xpc3R9XG4gICAgICA8L2xpPmA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGA8dWxcbiAgICAgIGNsYXNzPVwiJHtjbHMubGlzdH0gJHtsaXN0Q2xhc3N9XCIgJHtpc0RyYWdnYWJsZUF0dHJ9XG4gICAgICA+XG4gICAgICAke2l0ZW1zU3RyfVxuICAgIDwvdWw+YDtcbiAgfVxuXG4gIGFkZEV2ZW50cyAoKSB7XG4gICAgY29uc3QgbGlzdCA9IHRoaXMuZWxlbS5xdWVyeVNlbGVjdG9yKGAuJHtjbHMubGlzdFRvcH1gKTtcbiAgICBsaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5saXN0Q2xpY2spO1xuICB9XG5cbiAgbGlzdENsaWNrICgpIHtcbiAgICBjb25zdCBjb250cm9sID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoYC4ke2Nscy50b2dnbGVyfWApO1xuICAgIGlmICghY29udHJvbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGl0ZW1Ub3AgPSBldmVudC50YXJnZXQuY2xvc2VzdChgLiR7Y2xzLml0ZW1Ub3B9YCk7XG4gICAgaXRlbVRvcC5jbGFzc0xpc3QudG9nZ2xlKGNscy5pdGVtT3Blbik7XG4gIH1cblxuICBnZXRQbHVyYWwgKG51bSwgdmFyaWFudHMpIHtcbiAgICBsZXQgdmFyaWFudCA9IHZhcmlhbnRzWzBdO1xuICAgIGlmIChudW0gIT09IDEpIHtcbiAgICAgIHZhcmlhbnQgPSB2YXJpYW50c1sxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYCR7bnVtfSAke3ZhcmlhbnR9YDtcbiAgfVxufVxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY2F0ZWdvcmllc19fbGlzdHt3aWR0aDoxMDAlO2xpc3Qtc3R5bGUtdHlwZTpub25lO21hcmdpbjowO21hcmdpbi10b3A6MnJlbTtwYWRkaW5nOjB9LmNhdGVnb3JpZXNfX2xpc3QtLXN1YmNhdGVnb3JpZXN7ZGlzcGxheTpub25lO21hcmdpbi10b3A6LjVyZW07bWFyZ2luLWJvdHRvbToxcmVtfS5jYXRlZ29yaWVzX19pdGVte2JvcmRlci1yYWRpdXM6dmFyKC0tcmFkaXVzKTtiYWNrZ3JvdW5kOnZhcigtLXdoaXRlKTtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWdyZXktbGlnaHQpfS5jYXRlZ29yaWVzX19pdGVtLS10b3BjYXRlZ29yeXttYXJnaW46MH0uY2F0ZWdvcmllc19faXRlbS0tdG9wY2F0ZWdvcnkrLmNhdGVnb3JpZXNfX2l0ZW0tLXRvcGNhdGVnb3J5e21hcmdpbi10b3A6MXJlbX0uY2F0ZWdvcmllc19faXRlbS0tc3ViY2F0ZWdvcnl7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW46MCAxcmVtIDAgMnJlbTtwYWRkaW5nOjFyZW19LmNhdGVnb3JpZXNfX2l0ZW0tLXN1YmNhdGVnb3J5Ky5jYXRlZ29yaWVzX19pdGVtLS1zdWJjYXRlZ29yeXttYXJnaW4tdG9wOi41cmVtfS5jYXRlZ29yaWVzX19pdGVtLS1vcGVue2JhY2tncm91bmQ6dmFyKC0tZ3JleS1leHRyYS1saWdodCk7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1ncmV5LWxpZ2h0KX0uY2F0ZWdvcmllc19faXRlbS0tb3BlbiAuY2F0ZWdvcmllc19fbGlzdC0tc3ViY2F0ZWdvcmllc3tkaXNwbGF5OmJsb2NrfS5jYXRlZ29yaWVzX19jb3VudGVye21hcmdpbi1sZWZ0OmF1dG87Y29sb3I6dmFyKC0tZ3JleSl9LmNhdGVnb3JpZXNfX3RvZ2dsZXJ7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDoxMDAlO2JvcmRlcjpub25lO3BhZGRpbmc6MXJlbTt0ZXh0LWFsaWduOmxlZnQ7Y3Vyc29yOnBvaW50ZXJ9LmNhdGVnb3JpZXNfX3RvZ2dsZXI6OmJlZm9yZXtjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MDtoZWlnaHQ6MDttYXJnaW4tcmlnaHQ6LjVyZW07Ym9yZGVyOi41cmVtIHNvbGlkO2JvcmRlci1ib3R0b206MDtib3JkZXItY29sb3I6dmFyKC0tZ3JleS1saWdodCkgdHJhbnNwYXJlbnQ7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXN9LmNhdGVnb3JpZXNfX2l0ZW0tLW9wZW4gLmNhdGVnb3JpZXNfX3RvZ2dsZXI6OmJlZm9yZXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vLi4vaGVscGVycy9pbmRleC5qcyc7XG5cbmNvbnN0IGZyb20gPSBuZXcgRGF0ZSgpO1xuZnJvbS5zZXRNb250aChmcm9tLmdldE1vbnRoKCkgLSAxKTtcbmNvbnN0IHRvID0gbmV3IERhdGUoKTtcblxuY29uc3QgZGF0ZXMgPSB7XG4gIGZyb206IGZyb20udG9JU09TdHJpbmcoKSxcbiAgdG86IHRvLnRvSVNPU3RyaW5nKClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgYXN5bmMgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChgPGRpdiBjbGFzcz1cInBhZ2UtY29udGVudFwiPlxuICAgICAgPGhlYWRlciBjbGFzcz1cInBhZ2UtY29udGVudF9faGVhZGVyXCI+XG4gICAgICAgIDxoMiBjbGFzcz1cInBhZ2UtY29udGVudF9fdGl0bGVcIj5EYXNoYm9hcmQ8L2gyPlxuXG4gICAgICAgIDxyYW5nZS1waWNrZXJcbiAgICAgICAgICBkYXRhLWZyb209XCIke2RhdGVzLmZyb219XCJcbiAgICAgICAgICBkYXRhLXRvPVwiJHtkYXRlcy50b31cIlxuICAgICAgICAgID48L3JhbmdlLXBpY2tlcj5cbiAgICAgICAgPC9oZWFkZXI+XG5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJwYWdlLXNlY3Rpb24gcGFnZS1zZWN0aW9uLS1jb2x1bW4tY2hhcnRzXCI+XG4gICAgICAgICAgPGNvbHVtbi1jaGFydFxuICAgICAgICAgICAgZGF0YS10eXBlPVwib3JkZXJzXCJcbiAgICAgICAgICAgIGRhdGEtZnJvbT1cIiR7ZGF0ZXMuZnJvbX1cIlxuICAgICAgICAgICAgZGF0YS10bz1cIiR7ZGF0ZXMudG99XCJcbiAgICAgICAgICA+PC9jb2x1bW4tY2hhcnQ+XG5cbiAgICAgICAgICA8Y29sdW1uLWNoYXJ0XG4gICAgICAgICAgICBkYXRhLXR5cGU9XCJzYWxlc1wiXG4gICAgICAgICAgICBkYXRhLWlzLW1vbmV5PVwidHJ1ZVwiXG4gICAgICAgICAgICBkYXRhLWZyb209XCIke2RhdGVzLmZyb219XCJcbiAgICAgICAgICAgIGRhdGEtdG89XCIke2RhdGVzLnRvfVwiXG4gICAgICAgICAgPjwvY29sdW1uLWNoYXJ0PlxuXG4gICAgICAgICAgPGNvbHVtbi1jaGFydFxuICAgICAgICAgICAgZGF0YS10eXBlPVwiY3VzdG9tZXJzXCJcbiAgICAgICAgICAgIGRhdGEtZnJvbT1cIiR7ZGF0ZXMuZnJvbX1cIlxuICAgICAgICAgICAgZGF0YS10bz1cIiR7ZGF0ZXMudG99XCJcbiAgICAgICAgICA+PC9jb2x1bW4tY2hhcnQ+XG4gICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICA8c2VjdGlvbiBjbGFzcz1cInBhZ2Utc2VjdGlvblwiPlxuICAgICAgICAgIDxoMyBjbGFzcz1cInBhZ2Utc2VjdGlvbl9fdGl0bGVcIj5CZXN0c2VsbGVyczwvaDM+XG5cbiAgICAgICAgPHNvcnRhYmxlLXRhYmxlXG4gICAgICAgICAgZGF0YS11cmw9XCIvYXBpL2Rhc2hib2FyZC9iZXN0c2VsbGVycz9fZW1iZWQ9c3ViY2F0ZWdvcnkuY2F0ZWdvcnlcIixcbiAgICAgICAgICBkYXRhLWlzLWR5bmFtaWM9XCIwXCJcbiAgICAgICAgICBkYXRhLWZpZWxkcy1saXN0PVwiWydpbWFnZXMnLCAndGl0bGUnLCAnc3ViY2F0ZWdvcnknLCAncXVhbnRpdHknLCAncHJpY2UnLCAnc3RhdHVzJ11cIlxuICAgICAgICAgIGRhdGEtb3JkZXItZmllbGQ9J3RpdGxlJyxcbiAgICAgICAgICBkYXRhLW9yZGVyLWRpcmVjdGlvbj1cIjFcIlxuICAgICAgICAgIGRhdGEtZnJvbT1cIiR7ZGF0ZXMuZnJvbX1cIlxuICAgICAgICAgIGRhdGEtdG89XCIke2RhdGVzLnRvfVwiXG4gICAgICAgICAgPjwvc29ydGFibGUtdGFibGU+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDwvZGl2PmApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vLi4vaGVscGVycy9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgYXN5bmMgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChgPGRpdiBjbGFzcz1cInBhZ2UtY29udGVudFwiPlxuICAgICAgICA8c2VjdGlvbiBjbGFzcz1cInBhZ2Utc2VjdGlvbiBwYWdlLXNlY3Rpb24tLTQwNFwiPlxuICAgICAgICAgIDxoMiBjbGFzcz1cInBhZ2Utc2VjdGlvbl9fdGl0bGVcIj5QYWdlIG5vdCBmb3VuZDwvaDI+XG4gICAgICAgICAgPHA+Tm8gc3VjaCBwYWdlPC9wPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L2Rpdj5gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZmV0Y2hKc29uIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9pbmRleC5qcyc7XG5pbXBvcnQgUGFnZU1lc3NhZ2UgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9QYWdlTWVzc2FnZS9pbmRleC5qcyc7XG5pbXBvcnQgZmllbGRzIGZyb20gJy4vZmllbGRzLmpzJztcbmltcG9ydCBmaWVsZHNPcmRlciBmcm9tICcuL2ZpZWxkc09yZGVyLmpzJztcbmltcG9ydCBjbHMgZnJvbSAnLi9jbGFzc2VzLmpzJztcbmltcG9ydCB7IGhlYWRlciB9IGZyb20gJy4vdGVtcGxhdGVzJztcblxuaW1wb3J0ICcuL2ljb24tdHJhc2guc3ZnJztcbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICBjb25zdHJ1Y3RvciAobWF0Y2gpIHtcbiAgICB0aGlzLmlkID0gbWF0Y2hbMF0ucmVwbGFjZSgncHJvZHVjdHMvJywgJycpO1xuXG4gICAgaWYgKCFtYXRjaFswXSkge1xuICAgICAgdGhpcy5pZCA9ICczZC1vY2hraS1vcHRvbWEtemQzMDInO1xuICAgIH1cblxuICAgIHRoaXMuYXBpVXJsID0gcHJvY2Vzcy5lbnYuQVBJX1VSTCB8fCAnaHR0cHM6Ly9jb3Vyc2UtanMuamF2YXNjcmlwdC5ydSc7XG4gICAgdGhpcy5mZXRjaFByb2R1Y3RVcmwgPSB0aGlzLmFwaVVybCArIGAvYXBpL3Jlc3QvcHJvZHVjdHM/aWQ9JHt0aGlzLmlkfWA7XG4gICAgdGhpcy5mZXRjaENhdGVnb3JpZXNVcmwgPSB0aGlzLmFwaVVybCArICcvYXBpL3Jlc3QvY2F0ZWdvcmllcz9fc29ydD13ZWlnaHQmX3JlZnM9c3ViY2F0ZWdvcnknO1xuICB9XG5cbiAgYXN5bmMgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IHByb2R1Y3REYXRhLCBjYXRlZ29yaWVzLCBlcnJvck1lc3NhZ2UgfSA9IGF3YWl0IHRoaXMubG9hZERhdGEoKTtcblxuICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KGA8ZGl2IGNsYXNzPVwicGFnZS1jb250ZW50XCI+XG4gICAgICAgICR7aGVhZGVyfVxuXG4gICAgICAgICR7ZXJyb3JNZXNzYWdlLm91dGVySFRNTH1cbiAgICAgIDwvZGl2PlxuICAgICAgYCk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvZHVjdCA9IHByb2R1Y3REYXRhWzBdO1xuICAgIGNvbnN0IGlucHV0cyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCB7IG5hbWUsIG1vZHMgfSBvZiBmaWVsZHNPcmRlcikge1xuICAgICAgaWYgKGZpZWxkc1tuYW1lXSkge1xuICAgICAgICBsZXQgcGFyYW1zID0gcHJvZHVjdDtcblxuICAgICAgICBpZiAobmFtZSA9PT0gJ3N1YmNhdGVnb3J5Jykge1xuICAgICAgICAgIHBhcmFtcyA9IHtcbiAgICAgICAgICAgIC4uLnBhcmFtcyxcbiAgICAgICAgICAgIGNhdGVnb3JpZXNcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5wdXQgPSBmaWVsZHNbbmFtZV0ucmVuZGVyKHBhcmFtcyk7XG4gICAgICAgIGxldCBjbGFzc2VzID0gW2Nscy5pdGVtXTtcblxuICAgICAgICBpZiAobW9kcykge1xuICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLmNvbmNhdChtb2RzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0cy5wdXNoKGA8bGkgY2xhc3M9XCIke2NsYXNzZXMuam9pbignICcpfVwiPiR7aW5wdXR9PC9saT5gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChgPGRpdiBjbGFzcz1cInBhZ2UtY29udGVudFwiPlxuICAgICAgJHtoZWFkZXJ9XG5cbiAgICAgIDxmb3JtIGFjdGlvbj1cIlwiIGNsYXNzPVwiJHtjbHMuZm9ybX19XCI+XG4gICAgICAgIDx1bCBjbGFzcz1cIiR7Y2xzLmxpc3R9XCI+XG4gICAgICAgICAgJHtpbnB1dHMuam9pbignXFxuJyl9XG4gICAgICAgIDwvdWw+XG5cbiAgICAgICAgPGZvb3RlciBjbGFzcz1cIiR7Y2xzLmZvb3Rlcn1cIj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiJHtjbHMuc3VibWl0fVwiPlNhdmU8L2J1dHRvbj5cbiAgICAgICAgPC9mb290ZXI+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+YCk7XG4gIH1cblxuICBhc3luYyBsb2FkRGF0YSAoKSB7XG4gICAgLy8gVE9ETzogYWRkIGxvYWRpbmcgaW5kaWNhdG9yXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByb2R1Y3REYXRhID0gYXdhaXQgZmV0Y2hKc29uKHRoaXMuZmV0Y2hQcm9kdWN0VXJsKTtcbiAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSBhd2FpdCBmZXRjaEpzb24odGhpcy5mZXRjaENhdGVnb3JpZXNVcmwpO1xuXG4gICAgICByZXR1cm4geyBwcm9kdWN0RGF0YSwgY2F0ZWdvcmllcyB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gbmV3IFBhZ2VNZXNzYWdlKHsgZXJyb3IgfSk7XG4gICAgICByZXR1cm4geyBlcnJvck1lc3NhZ2U6IG1lc3NhZ2UuZWxlbSB9O1xuICAgIH1cbiAgfVxufVxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCIuL2ljb24tdHJhc2guc3ZnXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucHJvZHVjdC1mb3Jte21hcmdpbi1ib3R0b206MnJlbX0ucHJvZHVjdC1mb3JtX19saXN0LC5wcm9kdWN0LWZvcm1fX2Zvb3RlcntkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCgzLCAxZnIpO2dyaWQtZ2FwOjFyZW19LnByb2R1Y3QtZm9ybV9fbGlzdHttYXJnaW46MDtwYWRkaW5nOjA7bGlzdC1zdHlsZS10eXBlOm5vbmV9LnByb2R1Y3QtZm9ybV9faXRlbXtncmlkLWNvbHVtbjoxIC8gc3BhbiAyfS5wcm9kdWN0LWZvcm1fX2l0ZW0tLWZ1bGx7Z3JpZC1jb2x1bW46MSAvIHNwYW4gM30ucHJvZHVjdC1mb3JtX19pdGVtLS10aW55e2dyaWQtY29sdW1uOjEgLyBzcGFuIDF9LnByb2R1Y3QtZm9ybV9faXRlbS0tZm9sbG93e2dyaWQtY29sdW1uLXN0YXJ0OmF1dG99LnByb2R1Y3QtZm9ybV9faXRlbSsucHJvZHVjdC1mb3JtX19pdGVte21hcmdpbi10b3A6MXJlbX0ucHJvZHVjdC1mb3JtX19saW5re3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowfS5wcm9kdWN0LWZvcm1fX2lucHV0LS10ZXh0YXJlYXttaW4taGVpZ2h0OjIwMHB4fS5wcm9kdWN0LWZvcm1fX2ltYWdlcy1saXN0e21hcmdpbjowO3BhZGRpbmc6MDtsaXN0LXN0eWxlLXR5cGU6bm9uZX0ucHJvZHVjdC1mb3JtX19pbWFnZXMtaXRlbXtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3BhZGRpbmc6LjVyZW07YmFja2dyb3VuZDp2YXIoLS1ncmV5LWV4dHJhLWxpZ2h0KTtib3JkZXItcmFkaXVzOnZhcigtLXJhZGl1cyl9LnByb2R1Y3QtZm9ybV9faW1hZ2VzLWl0ZW0rLnByb2R1Y3QtZm9ybV9faW1hZ2VzLWl0ZW17bWFyZ2luLXRvcDouNXJlbX0ucHJvZHVjdC1mb3JtX19pbWFnZS13cmFwcGVye3Bvc2l0aW9uOnJlbGF0aXZlfS5wcm9kdWN0LWZvcm1fX2ltYWdle2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTttYXgtd2lkdGg6ODBweDttaW4td2lkdGg6NDBweDtoZWlnaHQ6NDBweDtvYmplY3QtZml0OmNvbnRhaW47cGFkZGluZzo0cHg7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1ncmV5LWxpZ2h0KTtiYWNrZ3JvdW5kOnZhcigtLXdoaXRlKTtib3JkZXItcmFkaXVzOnZhcigtLXJhZGl1cyl9LnByb2R1Y3QtZm9ybV9fcHJldmlld3twb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjI7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7b3BhY2l0eTowO3BhZGRpbmc6LjI1ZW07YmFja2dyb3VuZC1vcmlnaW46Y29udGVudC1ib3g7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS13aGl0ZSk7YmFja2dyb3VuZC1zaXplOmNvbnRhaW47YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246NTAlIDUwJTtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWdyZXktbGlnaHQpO3RyYW5zaXRpb246YWxsIC4yNXN9LnByb2R1Y3QtZm9ybV9fcHJldmlldzpob3Zlcnt3aWR0aDozMDAlO2hlaWdodDozMDAlO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0zNSUpIHRyYW5zbGF0ZVkoLTM1JSk7b3BhY2l0eToxfS5wcm9kdWN0LWZvcm1fX2ltYWdlLXNvdXJjZXttYXJnaW4tbGVmdDoxcmVtfS5wcm9kdWN0LWZvcm1fX2ltYWdlLXJlbW92ZXt3aWR0aDozcmVtO2FsaWduLXNlbGY6c3RyZXRjaDttYXJnaW4tbGVmdDphdXRvO2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSA1MCUgNTAlIG5vLXJlcGVhdDtmb250LXNpemU6MDtib3JkZXI6bm9uZX0ucHJvZHVjdC1mb3JtX19mb290ZXJ7bWFyZ2luLXRvcDoycmVtfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vLi4vaGVscGVycy9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgYXN5bmMgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChgPGRpdiBjbGFzcz1cInBhZ2UtY29udGVudFwiPlxuICAgICAgPHNlY3Rpb24gY2xhc3M9XCJwYWdlLXNlY3Rpb25cIj5cbiAgICAgICAgPGgyIGNsYXNzPVwicGFnZS1zZWN0aW9uX190aXRsZVwiPlByb2R1Y3RzPC9oMj5cblxuICAgICAgICA8c29ydGFibGUtdGFibGVcbiAgICAgICAgICBkYXRhLXVybD1cIi9hcGkvcmVzdC9wcm9kdWN0cz9fZW1iZWQ9c3ViY2F0ZWdvcnkuY2F0ZWdvcnlcIixcbiAgICAgICAgICBkYXRhLWlzLWR5bmFtaWM9XCIxXCJcbiAgICAgICAgICBkYXRhLWZpZWxkcy1saXN0PVwiWydpbWFnZXMnLCAndGl0bGUnLCAnc3ViY2F0ZWdvcnknLCAncXVhbnRpdHknLCAncHJpY2UnLCAnc3RhdHVzJ11cIlxuICAgICAgICAgIGRhdGEtb3JkZXItZmllbGQ9J3RpdGxlJyxcbiAgICAgICAgICBkYXRhLW9yZGVyLWRpcmVjdGlvbj1cIjFcIlxuICAgICAgICAgID48L3NvcnRhYmxlLXRhYmxlPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvZGl2PmApO1xuICB9XG59XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIjpyb290ey0tYmx1ZTogIzEwOUNGMTstLWRhcmstYmx1ZTogIzMzNEQ2RTstLWxpZ2h0LWJsdWU6ICNDRkVCRkM7LS1taWRkbGUtYmx1ZTogIzlGRDdGOTstLXllbGxvdzogI0ZGQjk0NjstLXJlZDogI0Y3Njg1QjstLWdyZWVuOiAjMkVENDdBOy0tcHVycGxlOiAjODg1QUY4Oy0tYmxhY2s6ICMxOTJBM0U7LS10YWJsZS1ibGFjazogIzMyM0M0NzstLXRhYmxlLWdyZXk6ICM3MDc2ODM7LS1ncmV5OiAjOTBBMEI3Oy0tZ3JleS1saWdodDogI0MyQ0ZFMDstLWdyZXktZXh0cmEtbGlnaHQ6ICNFRkYxRjQ7LS1ncmV5LXNrZWxldG9uOiAjRjVGNkY4Oy0td2hpdGU6ICNGRkY7LS1yYWRpdXM6IDRweH0qe2JveC1zaXppbmc6Ym9yZGVyLWJveH1IVE1Me2ZvbnQtc2l6ZToxNnB4fUJPRFl7ZGlzcGxheTpmbGV4O21pbi1oZWlnaHQ6MTAwdmg7bWFyZ2luOjA7YmFja2dyb3VuZDojRkZGO2ZvbnQ6MXJlbS8xLjQgVHJlYnVjaGV0IE1TLCBWZXJkYW5hLCBzYW5zLXNlcmlmO2NvbG9yOiMwMDB9SDEsSDIsSDMsSDR7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206LjVlbTtmb250LXdlaWdodDpub3JtYWx9SDF7Zm9udC1zaXplOjIuNzVyZW19SDJ7Zm9udC1zaXplOjIuMjVyZW19SDN7Zm9udC1zaXplOjEuNzVyZW19SDR7Zm9udC1zaXplOjEuMjVyZW19QSxBOnZpc2l0ZWQsQTpob3Zlcntjb2xvcjppbmhlcml0fUE6aG92ZXJ7dGV4dC1kZWNvcmF0aW9uOm5vbmV9QlVUVE9OLElOUFVULFRFWFRBUkVBLFNFTEVDVHtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6LjVyZW07YmFja2dyb3VuZDpub25lO2JvcmRlci1yYWRpdXM6dmFyKC0tcmFkaXVzKTtmb250OmluaGVyaXR9SU5QVVQsVEVYVEFSRUEsU0VMRUNUe3dpZHRoOjEwMCU7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1ncmV5LWxpZ2h0KX0ucGFnZS1sYXlvdXR7ZGlzcGxheTpmbGV4O3dpZHRoOjEwMCV9LnNwaW5uZXJ7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToycmVtO2xlZnQ6MDtyaWdodDowO3dpZHRoOjRyZW07aGVpZ2h0OjRyZW07bWFyZ2luOmF1dG87YmFja2dyb3VuZDp2YXIoLS13aGl0ZSk7Ym94LXNoYWRvdzowIDAgLjVyZW0gY3VycmVudENvbG9yO2JvcmRlci1yYWRpdXM6NTAlO2NvbG9yOnZhcigtLWdyZXktbGlnaHQpfVtkYXRhLWxvYWRpbmc9XFxcIjFcXFwiXSAuc3Bpbm5lcntkaXNwbGF5OmJsb2NrfS5zcGlubmVyOjpiZWZvcmUsLnNwaW5uZXI6OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7bWFyZ2luOmF1dG87Ym94LXNpemluZzpib3JkZXItYm94O2JvcmRlcjozcHggc29saWQ7Ym9yZGVyLWNvbG9yOmN1cnJlbnRDb2xvciB0cmFuc3BhcmVudDtib3JkZXItcmFkaXVzOjUwJTthbmltYXRpb246cm90YXRlIDIuMXMgbGluZWFyIGluZmluaXRlfS5zcGlubmVyOjpiZWZvcmV7d2lkdGg6Mi4yNXJlbTtoZWlnaHQ6Mi4yNXJlbX0uc3Bpbm5lcjo6YWZ0ZXJ7d2lkdGg6MS4yNXJlbTtoZWlnaHQ6MS4yNXJlbTthbmltYXRpb24tZHVyYXRpb246MS4zczthbmltYXRpb24tZGlyZWN0aW9uOnJldmVyc2V9QGtleWZyYW1lcyByb3RhdGV7ZnJvbXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfXRve3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX19XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExheW91dCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgIHRoaXMuYXBwZW5kKHRoaXMucmVuZGVyKCkpO1xuICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgncGFnZScpO1xuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChgPGRpdiBjbGFzcz1cInBhZ2UtY29udGFpbmVyXCI+XG4gICAgICA8YXNpZGUgY2xhc3M9XCJwYWdlLWFzaWRlXCI+XG4gICAgICAgIDxoMSBjbGFzcz1cInBhZ2UtYXNpZGVfX3RpdGxlXCI+XG4gICAgICAgICAgPGEgaHJlZj1cIi4vXCI+U2hvcCBhZG1pbjwvYT5cbiAgICAgICAgPC9oMT5cblxuICAgICAgICA8bmF2IGNsYXNzPVwicGFnZS1hc2lkZV9fbmF2XCI+XG4gICAgICAgICAgPHVsIGNsYXNzPVwicGFnZS1hc2lkZV9fbGlzdFwiPlxuICAgICAgICAgICAgPGxpIGNsYXNzPVwicGFnZS1hc2lkZV9faXRlbVwiPlxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGNsYXNzPVwicGFnZS1hc2lkZV9fbGluayBwYWdlLWFzaWRlX19saW5rLS1kYXNoYm9hcmRcIlxuICAgICAgICAgICAgICAgIGhyZWY9XCIuL1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGFnZS1hc2lkZV9fbGluay10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICBEYXNoYm9hcmRcbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGkgY2xhc3M9XCJwYWdlLWFzaWRlX19pdGVtXCI+XG4gICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJwYWdlLWFzaWRlX19saW5rIHBhZ2UtYXNpZGVfX2xpbmstLXByb2R1Y3RzXCJcbiAgICAgICAgICAgICAgICBocmVmPVwiLi9wcm9kdWN0c1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGFnZS1hc2lkZV9fbGluay10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICBQcm9kdWN0c1xuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaSBjbGFzcz1cInBhZ2UtYXNpZGVfX2l0ZW1cIj5cbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICBjbGFzcz1cInBhZ2UtYXNpZGVfX2xpbmsgcGFnZS1hc2lkZV9fbGluay0tY2F0ZWdvcmllc1wiXG4gICAgICAgICAgICAgICAgaHJlZj1cIi4vY2F0ZWdvcmllc1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGFnZS1hc2lkZV9fbGluay10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICBDYXRlZ29yaWVzXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvbmF2PlxuICAgICAgPC9hc2lkZT5cblxuICAgICAgPG1haW4gY2xhc3M9XCJwYWdlLW1haW5cIiBpZD1cImNvbnRlbnRcIj5cbiAgICAgICAgPCEtLSBtYWluIGNvbnRlbnQgd2lsbCBiZSBoZXJlIC0tPlxuICAgICAgPC9tYWluPlxuICAgIDwvZGl2PmApO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGVsZW06ICdyYW5nZXBpY2tlcicsXG4gIGVsZW1PcGVuOiAncmFuZ2VwaWNrZXItLW9wZW4nLFxuICBpbnB1dDogJ3JhbmdlcGlja2VyX19pbnB1dCcsXG4gIGZyb206ICdyYW5nZXBpY2tlcl9fZnJvbScsXG4gIHRvOiAncmFuZ2VwaWNrZXJfX3RvJyxcbiAgc2VsZWN0b3I6ICdyYW5nZXBpY2tlcl9fc2VsZWN0b3InLFxuICBzZWxlY3RvckFycm93OiAncmFuZ2VwaWNrZXJfX3NlbGVjdG9yLWFycm93JyxcbiAgc2VsZWN0b3JDb250cm9sOiAncmFuZ2VwaWNrZXJfX3NlbGVjdG9yLWNvbnRyb2wnLFxuICBjYWxlbmRhcnM6ICdyYW5nZXBpY2tlcl9fY2FsZW5kYXJzJyxcbiAgY2FsZW5kYXI6ICdyYW5nZXBpY2tlcl9fY2FsZW5kYXInLFxuICBjZWxsOiAncmFuZ2VwaWNrZXJfX2NlbGwnLFxuICBzZWxlY3RlZEZyb206ICdyYW5nZXBpY2tlcl9fc2VsZWN0ZWQtZnJvbScsXG4gIHNlbGVjdGVkQmV0d2VlbjogJ3JhbmdlcGlja2VyX19zZWxlY3RlZC1iZXR3ZWVuJyxcbiAgc2VsZWN0ZWRUbzogJ3JhbmdlcGlja2VyX19zZWxlY3RlZC10bycsXG4gIG1vbnRoSW5kaWNhdG9yOiAncmFuZ2VwaWNrZXJfX21vbnRoLWluZGljYXRvcicsXG4gIGRheU9mV2VlazogJ3JhbmdlcGlja2VyX19kYXktb2Ytd2VlaycsXG4gIGRhdGVHcmlkOiAncmFuZ2VwaWNrZXJfX2RhdGUtZ3JpZCdcbn07XG4iLCJpbXBvcnQgY2xzIGZyb20gJy4vY2xhc3Nlcy5qcyc7XG5cbmV4cG9ydCBjb25zdCBpbnB1dCA9IGA8YnV0dG9uIGNsYXNzPVwiJHtjbHMuaW5wdXR9XCIgZGF0YS1lbGVtPVwiaW5wdXRcIiB0eXBlPVwiYnV0dG9uXCI+XG4gIDxzcGFuXG4gICAgY2xhc3M9XCIke2Nscy5mcm9tfVwiXG4gICAgZGF0YS1lbGVtPVwiZnJvbVwiPntmcm9tfTwvc3Bhbj4gLVxuICA8c3BhblxuICAgIGNsYXNzPVwiJHtjbHMudG99XCJcbiAgICBkYXRhLWVsZW09XCJ0b1wiXG4gICAgPnt0b308L3NwYW4+XG48L2J1dHRvbj5gO1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0b3IgPSBgXG48ZGl2IGNsYXNzPVwiJHtjbHMuc2VsZWN0b3J9XCIgZGF0YS1lbGVtPVwic2VsZWN0b3JcIj5cbiAgPGRpdiBjbGFzcz1cIiR7Y2xzLnNlbGVjdG9yQXJyb3d9XCI+PC9kaXY+XG4gIDxidXR0b25cbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICBjbGFzcz1cIiR7Y2xzLnNlbGVjdG9yQ29udHJvbH0gJHtjbHMuc2VsZWN0b3JDb250cm9sfS0tbGVmdFwiXG4gICAgZGF0YS1kaXJlY3Rpb249XCJwcmV2XCJcbiAgPjwvYnV0dG9uPlxuICA8YnV0dG9uXG4gICAgdHlwZT1cImJ1dHRvblwiXG4gICAgY2xhc3M9XCIke2Nscy5zZWxlY3RvckNvbnRyb2x9ICR7Y2xzLnNlbGVjdG9yQ29udHJvbH0tLXJpZ2h0XCJcbiAgICBkYXRhLWRpcmVjdGlvbj1cIm5leHRcIlxuICA+PC9idXR0b24+XG4gIDxkaXYgY2xhc3M9XCIke2Nscy5jYWxlbmRhcnN9XCI+PC9kaXY+XG48L2Rpdj5cbmA7XG5cbmV4cG9ydCBjb25zdCBjYWxlbmRhciA9IGBcbjxkaXYgY2xhc3M9XCIke2Nscy5jYWxlbmRhcn1cIj5cbiAgPGRpdiBjbGFzcz1cIiR7Y2xzLm1vbnRoSW5kaWNhdG9yfVwiPlxuICAgIDx0aW1lIGRhdGV0aW1lPVwie21vbnRofVwiPnttb250aH08L3RpbWU+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiJHtjbHMuZGF5T2ZXZWVrfVwiPlxuICAgIHt3ZWVrZGF5c31cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCIke2Nscy5kYXRlR3JpZH1cIj5cbiAgICB7ZGF5c31cbiAgPC9kaXY+XG48L2Rpdj5cbmA7XG5cbmV4cG9ydCBjb25zdCBkYXkgPSBgXG48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIiR7Y2xzLmNlbGx9IHttb2R9XCIgZGF0YS12YWx1ZT1cIntkYXRlVGltZX1cIiBzdHlsZT1cIntzdHlsZX1cIj57ZGF0ZU51bX08L2J1dHRvbj5cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5wdXQsXG4gIHNlbGVjdG9yLFxuICBjYWxlbmRhcixcbiAgZGF5XG59O1xuIiwiaW1wb3J0IHtcbiAgZmlsbFRlbXBsYXRlLFxuICBnZXRXZWVrRGF5c1xufSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCB0ZW1wbGF0ZXMgZnJvbSAnLi90ZW1wbGF0ZXMuanMnO1xuaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuXG5pbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0ICcuL2Fycm93LWljb24uc3ZnJztcbmltcG9ydCAnLi9jYWxlbmRhci1pY29uLnN2Zyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmdlUGlja2VyIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnRvZ2dsZVBpY2tlciA9IHRoaXMudG9nZ2xlUGlja2VyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZWxlY3Rvck9uQ2xpY2sgPSB0aGlzLnNlbGVjdG9yT25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYm9keU9uQ2xpY2sgPSB0aGlzLmJvZHlPbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVSYW5nZSA9IHRoaXMudXBkYXRlUmFuZ2UuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuaXNPcGVuZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVsZW0gPSB0aGlzO1xuICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKCdyYW5nZXBpY2tlcicpO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgIGNvbnN0IHsgZnJvbSwgdG8gfSA9IHRoaXMuZGF0YXNldDtcblxuICAgIHRoaXMuZGF0ZXMgPSB7XG4gICAgICBmcm9tOiBuZXcgRGF0ZShmcm9tKSxcbiAgICAgIHRvOiBuZXcgRGF0ZSh0bylcbiAgICB9O1xuXG4gICAgdGhpcy5tb250aGVzID0gdGhpcy5nZXREaXNwbGF5ZWRNb250aGVzKCk7XG4gICAgdGhpcy5uZXdEYXRlcyA9IFtdO1xuXG4gICAgdGhpcy5hZGRJbnB1dCgpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZURhdGUnLCB0aGlzLnVwZGF0ZVJhbmdlKTtcbiAgfVxuXG4gIGdldERpc3BsYXllZE1vbnRoZXMgKCkge1xuICAgIGNvbnN0IGN1cnJlbnRNb250aCA9IG5ldyBEYXRlKHRoaXMuZGF0ZXMuZnJvbSk7XG4gICAgbGV0IG1vbnRoID0gY3VycmVudE1vbnRoLmdldE1vbnRoKCk7XG4gICAgY29uc3QgY3VycmVudERheSA9IDE7XG4gICAgY3VycmVudE1vbnRoLnNldERhdGUoY3VycmVudERheSk7XG5cbiAgICBjb25zdCBuZXh0TW9udGggPSBuZXcgRGF0ZShjdXJyZW50TW9udGgpO1xuICAgIG5leHRNb250aC5zZXRNb250aCgrK21vbnRoKTtcblxuICAgIHJldHVybiBbY3VycmVudE1vbnRoLCBuZXh0TW9udGhdO1xuICB9XG5cbiAgYWRkSW5wdXQgKCkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBmcm9tOiB0aGlzLmRhdGVzLmZyb20udG9Mb2NhbGVEYXRlU3RyaW5nKCksXG4gICAgICB0bzogdGhpcy5kYXRlcy50by50b0xvY2FsZURhdGVTdHJpbmcoKVxuICAgIH07XG4gICAgY29uc3QgdG1wbCA9IHRlbXBsYXRlcy5pbnB1dDtcbiAgICBjb25zdCBpbnB1dFN0ciA9IGZpbGxUZW1wbGF0ZSh7XG4gICAgICB0bXBsLFxuICAgICAgZGF0YVxuICAgIH0pO1xuXG4gICAgdGhpcy5lbGVtLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJCZWdpbicsIGlucHV0U3RyKTtcbiAgICB0aGlzLmlucHV0ID0gdGhpcy5lbGVtLnF1ZXJ5U2VsZWN0b3IoYC4ke2Nscy5pbnB1dH1gKTtcbiAgICB0aGlzLmlucHV0RnJvbSA9IHRoaXMuaW5wdXQucXVlcnlTZWxlY3RvcihgLiR7Y2xzLmZyb219YCk7XG4gICAgdGhpcy5pbnB1dFRvID0gdGhpcy5pbnB1dC5xdWVyeVNlbGVjdG9yKGAuJHtjbHMudG99YCk7XG5cbiAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy50b2dnbGVQaWNrZXIpO1xuICAgIC8vIGNhcHR1cmU6IHRydWUgcmV2ZXJzZXMgb3JkZXIgb2YgZXZlbnRzXG4gICAgLy8gY2xpY2sgb24gYm9keSBmaXJlcyBmaXJzdFxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmJvZHlPbkNsaWNrLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBib2R5T25DbGljayAoKSB7XG4gICAgY29uc3QgcGFyZW50UmFuZ2VQaWNrZXIgPSBldmVudC50YXJnZXQuY2xvc2VzdChgLiR7Y2xzLmVsZW19YCk7XG5cbiAgICBpZiAoIXBhcmVudFJhbmdlUGlja2VyICYmIHRoaXMuaXNPcGVuZWQpIHtcbiAgICAgIHRoaXMuaGlkZVBpY2tlcigpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUlucHV0ICgpIHtcbiAgICB0aGlzLmlucHV0RnJvbS5pbm5lckhUTUwgPSB0aGlzLmRhdGVzLmZyb20udG9Mb2NhbGVEYXRlU3RyaW5nKCk7XG4gICAgdGhpcy5pbnB1dFRvLmlubmVySFRNTCA9IHRoaXMuZGF0ZXMudG8udG9Mb2NhbGVEYXRlU3RyaW5nKCk7XG4gIH1cblxuICB1cGRhdGVSYW5nZSAoKSB7XG4gICAgdGhpcy5tb250aGVzID0gdGhpcy5nZXREaXNwbGF5ZWRNb250aGVzKCk7XG4gICAgdGhpcy5uZXdEYXRlcyA9IFtdO1xuICAgIHRoaXMudXBkYXRlSW5wdXQoKTtcbiAgICB0aGlzLmhpZGVQaWNrZXIoKTtcbiAgfVxuXG4gIHRvZ2dsZVBpY2tlciAoKSB7XG4gICAgaWYgKHRoaXMuaXNPcGVuZWQpIHtcbiAgICAgIHRoaXMuaGlkZVBpY2tlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2hvd1BpY2tlcigpO1xuICAgIHRoaXMuaXNPcGVuZWQgPSB0cnVlO1xuICB9XG5cbiAgc2hvd1BpY2tlciAoKSB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdG9yKSB7XG4gICAgICB0aGlzLmFkZFNlbGVjdG9yKCk7XG5cbiAgICAgIHRoaXMuc2VsZWN0b3IgPSB0aGlzLmVsZW0ucXVlcnlTZWxlY3RvcihgLiR7Y2xzLnNlbGVjdG9yfWApO1xuICAgICAgdGhpcy5jYWxlbmRhcnMgPSB0aGlzLmVsZW0ucXVlcnlTZWxlY3RvcihgLiR7Y2xzLmNhbGVuZGFyc31gKTtcblxuICAgICAgdGhpcy5zZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc2VsZWN0b3JPbkNsaWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYWxlbmRhcnMuaW5uZXJIVE1MID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRDYWxlbmRhcnMoKTtcbiAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZChjbHMuZWxlbU9wZW4pO1xuICB9XG5cbiAgaGlkZVBpY2tlciAoKSB7XG4gICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xzLmVsZW1PcGVuKTtcbiAgICB0aGlzLmlzT3BlbmVkID0gZmFsc2U7XG4gICAgdGhpcy5uZXdEYXRlcyA9IFtdO1xuICB9XG5cbiAgYWRkU2VsZWN0b3IgKCkge1xuICAgIGNvbnN0IHNlbGVjdG9yU3RyID0gdGVtcGxhdGVzLnNlbGVjdG9yO1xuICAgIHRoaXMuZWxlbS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZUVuZCcsIHNlbGVjdG9yU3RyKTtcbiAgfVxuXG4gIHNlbGVjdG9yT25DbGljayAoKSB7XG4gICAgY29uc3QgeyBkYXRhc2V0IH0gPSBldmVudC50YXJnZXQ7XG4gICAgaWYgKGRhdGFzZXQudmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0RGF5KGV2ZW50LnRhcmdldCk7XG4gICAgfSBlbHNlIGlmIChkYXRhc2V0LmRpcmVjdGlvbikge1xuICAgICAgdGhpcy5tb3ZlTW9udGgoZGF0YXNldC5kaXJlY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIHNldERheSAoZWxlbSkge1xuICAgIGNvbnN0IGRhdGUgPSBlbGVtLmRhdGFzZXQudmFsdWU7XG5cbiAgICBpZiAodGhpcy5uZXdEYXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMubmV3RGF0ZXMucHVzaChuZXcgRGF0ZShkYXRlKSk7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkKGVsZW0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubmV3RGF0ZXMucHVzaChuZXcgRGF0ZShkYXRlKSk7XG5cbiAgICB0aGlzLm5ld0RhdGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBhIC0gYjtcbiAgICB9KTtcbiAgICB0aGlzLmRhdGVzID0ge1xuICAgICAgZnJvbTogdGhpcy5uZXdEYXRlc1swXSxcbiAgICAgIHRvOiB0aGlzLm5ld0RhdGVzWzFdXG4gICAgfTtcblxuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoJ2NoYW5nZURhdGUnLCB7XG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIGRhdGVzOiB7XG4gICAgICAgICAgICBmcm9tOiB0aGlzLmRhdGVzLmZyb20udG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHRvOiB0aGlzLmRhdGVzLnRvLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG1vdmVNb250aCAoZGlyZWN0aW9uKSB7XG4gICAgbGV0IHN0ZXAgPSAxO1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgc3RlcCA9IC0xO1xuICAgIH1cblxuICAgIHRoaXMubW9udGhlcy5mb3JFYWNoKGRhdGUgPT4ge1xuICAgICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbiAgICB9KTtcblxuICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJzKCk7XG4gIH1cblxuICBhZGRDYWxlbmRhcnMgKCkge1xuICAgIHRoaXMubW9udGhlcy5mb3JFYWNoKGRhdGUgPT4ge1xuICAgICAgdGhpcy5jYWxlbmRhcnMuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVFbmQnLCB0aGlzLmdldENhbGVuZGFyKGRhdGUpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUNhbGVuZGFycyAoKSB7XG4gICAgdGhpcy5jYWxlbmRhcnMuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5hZGRDYWxlbmRhcnMoKTtcbiAgfVxuXG4gIHVwZGF0ZVNlbGVjdGVkIChlbGVtKSB7XG4gICAgY29uc3QgY2VsbHMgPSB0aGlzLmVsZW0ucXVlcnlTZWxlY3RvckFsbChgLiR7Y2xzLmNlbGx9YCk7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtjbHMuc2VsZWN0ZWRCZXR3ZWVuLCBjbHMuc2VsZWN0ZWRGcm9tLCBjbHMuc2VsZWN0ZWRUb107XG5cbiAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xuICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXMpO1xuICAgIH0pO1xuXG4gICAgZWxlbS5jbGFzc0xpc3QuYWRkKGNscy5zZWxlY3RlZEZyb20pO1xuICB9XG5cbiAgZ2V0Q2FsZW5kYXIgKGRhdGUpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbW9udGg6IGRhdGUudG9Mb2NhbGVTdHJpbmcoJ2RlZmF1bHQnLCB7IG1vbnRoOiAnbG9uZycgfSksXG4gICAgICB3ZWVrZGF5czogZ2V0V2Vla0RheXMoJ2RpdicpLFxuICAgICAgZGF5czogdGhpcy5nZXRDZWxscyhkYXRlKVxuICAgIH07XG5cbiAgICBjb25zdCB0bXBsID0gdGVtcGxhdGVzLmNhbGVuZGFyO1xuICAgIGNvbnN0IGNhbGVuZGFyU3RyID0gZmlsbFRlbXBsYXRlKHtcbiAgICAgIHRtcGwsXG4gICAgICBkYXRhXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2FsZW5kYXJTdHI7XG4gIH1cblxuICBnZXRDZWxscyAoZGF0ZSkge1xuICAgIGNvbnN0IHRtcGwgPSB0ZW1wbGF0ZXMuZGF5O1xuICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgY29uc3QgbW9udGggPSBjdXJyZW50RGF0ZS5nZXRNb250aCgpO1xuICAgIGxldCBjdXJyZW50RGF5ID0gMTtcbiAgICBsZXQgZGF5c1N0ciA9ICcnO1xuXG4gICAgd2hpbGUgKGN1cnJlbnREYXRlLmdldE1vbnRoKCkgPT09IG1vbnRoKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IHRoaXMuZ2V0Q2VsbFN0YXJ0U3R5bGUoY3VycmVudERhdGUpO1xuICAgICAgY29uc3QgbW9kID0gdGhpcy5nZXRDZWxsTW9kKGN1cnJlbnREYXRlKTtcblxuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgZGF0ZVRpbWU6IGN1cnJlbnREYXRlLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGRhdGVOdW06IGN1cnJlbnREYXRlLmdldERhdGUoKSxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIG1vZFxuICAgICAgfTtcbiAgICAgIGRheXNTdHIgKz0gZmlsbFRlbXBsYXRlKHtcbiAgICAgICAgdG1wbCxcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG5cbiAgICAgIGN1cnJlbnREYXRlLnNldERhdGUoKytjdXJyZW50RGF5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF5c1N0cjtcbiAgfVxuXG4gIGdldENlbGxTdGFydFN0eWxlIChkYXRlKSB7XG4gICAgbGV0IHN0eWxlID0gJyc7XG4gICAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cbiAgICBpZiAoZGF5ID4gMSkge1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIGxldCB3ZWVrZGF5TnVtID0gZGF0ZS5nZXREYXkoKTtcbiAgICBpZiAod2Vla2RheU51bSA9PT0gMCkge1xuICAgICAgd2Vla2RheU51bSA9IDc7XG4gICAgfVxuXG4gICAgc3R5bGUgPSBgZ3JpZC1jb2x1bW4tc3RhcnQ6ICR7d2Vla2RheU51bX1gO1xuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZ2V0Q2VsbE1vZCAoZGF0ZSkge1xuICAgIGxldCBtb2QgPSAnJztcblxuICAgIGlmICh0aGlzLm5ld0RhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBtb2Q7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0ZU1zID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgY29uc3QgZGF0ZUZyb21NcyA9IHRoaXMuZGF0ZXMuZnJvbS52YWx1ZU9mKCk7XG4gICAgY29uc3QgZGF0ZVRvTXMgPSB0aGlzLmRhdGVzLnRvLnZhbHVlT2YoKTtcblxuICAgIGlmIChkYXRlTXMgPiBkYXRlRnJvbU1zICYmIGRhdGVNcyA8IGRhdGVUb01zKSB7XG4gICAgICBtb2QgPSBjbHMuc2VsZWN0ZWRCZXR3ZWVuO1xuICAgIH0gZWxzZSBpZiAoZGF0ZU1zID09PSBkYXRlRnJvbU1zKSB7XG4gICAgICBtb2QgPSBjbHMuc2VsZWN0ZWRGcm9tO1xuICAgIH0gZWxzZSBpZiAoZGF0ZU1zID09PSBkYXRlVG9Ncykge1xuICAgICAgbW9kID0gY2xzLnNlbGVjdGVkVG87XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZDtcbiAgfVxufVxuIiwiaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCAnLi9ncmFiLWljb24uc3ZnJztcblxuY29uc3QgY2xzID0ge1xuICBlbGVtOiAnZHJhZ2dhYmxlLWxpc3QnLFxuICBpdGVtczogJ2RyYWdnYWJsZS1saXN0X19pdGVtcycsXG4gIGl0ZW06ICdkcmFnZ2FibGUtbGlzdF9faXRlbScsXG4gIGRyYWdnZWQ6ICdkcmFnZ2FibGUtbGlzdF9faXRlbS0tZHJhZ2dlZCcsXG4gIHBsYWNlaG9sZGVyOiAnZHJhZ2dhYmxlLWxpc3RfX2l0ZW0tLXBsYWNlaG9sZGVyJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJhZ2dhYmxlTGlzdCBleHRlbmRzIEhUTUxVTGlzdEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc3RhcnREcmFnID0gdGhpcy5zdGFydERyYWcuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0b3BEcmFnID0gdGhpcy5zdG9wRHJhZy5iaW5kKHRoaXMpO1xuICAgIHRoaXMubW92ZSA9IHRoaXMubW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2V0UGxhY2Vob2xkZXJIZWlnaHQgPSB0aGlzLnNldFBsYWNlaG9sZGVySGVpZ2h0LmJpbmQodGhpcyk7XG4gIH1cblxuICBhc3luYyBjb25uZWN0ZWRDYWxsYmFjayAoKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKGNscy5lbGVtKTtcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xuICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLmNyZWF0ZVBsYWNlaG9sZGVyKCk7XG5cbiAgICB0aGlzLmFkZENsYXNzVG9JdGVtcygpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLnN0YXJ0RHJhZyk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuc2V0UGxhY2Vob2xkZXJIZWlnaHQsIHsgb25jZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIHN0YXJ0RHJhZyAoZXZlbnQpIHtcbiAgICB0aGlzLmN1cnJlbnRFbGVtID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5kcmFnZ2FibGUtbGlzdF9faXRlbScpO1xuICAgIGlmICghdGhpcy5jdXJyZW50RWxlbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudEVsZW0ucmVwbGFjZVdpdGgodGhpcy5wbGFjZWhvbGRlcik7XG4gICAgdGhpcy5jdXJyZW50RWxlbS5jbGFzc0xpc3QuYWRkKGNscy5kcmFnZ2VkKTtcbiAgICB0aGlzLmFwcGVuZCh0aGlzLmN1cnJlbnRFbGVtKTtcblxuICAgIGNvbnN0IHsgdG9wIH0gPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMudG9wID0gdG9wO1xuICAgIHRoaXMuZWxlbUhhbGYgPSB0aGlzLmN1cnJlbnRFbGVtLm9mZnNldEhlaWdodCAvIDI7XG5cbiAgICBjb25zdCBlbGVtVG9wID0gZXZlbnQuY2xpZW50WSAtIHRoaXMudG9wIC0gdGhpcy5lbGVtSGFsZjtcbiAgICB0aGlzLmN1cnJlbnRFbGVtLnN0eWxlLnRvcCA9IGAke2VsZW1Ub3B9cHhgO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMubW92ZSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLnN0b3BEcmFnKTtcbiAgfVxuXG4gIG1vdmUgKGV2ZW50KSB7XG4gICAgY29uc3QgZWxlbVRvcCA9IGV2ZW50LmNsaWVudFkgLSB0aGlzLnRvcCAtIHRoaXMuZWxlbUhhbGY7XG4gICAgdGhpcy5jdXJyZW50RWxlbS5zdHlsZS50b3AgPSBgJHtlbGVtVG9wfXB4YDtcblxuICAgIC8vIENoZWNrIGludGVyc2VjdGlvblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAoaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoY2xzLmRyYWdnZWQpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0b3AgPSBpdGVtLm9mZnNldFRvcDtcbiAgICAgIGNvbnN0IGJvdHRvbSA9IHRvcCArIGl0ZW0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgY29uc3QgbWlkZGxlID0gdG9wICsgaXRlbS5vZmZzZXRIZWlnaHQgLyAyO1xuICAgICAgY29uc3QgY2hlY2tMaW5lID0gZWxlbVRvcCArIHRoaXMuZWxlbUhhbGY7XG5cbiAgICAgIGlmIChjaGVja0xpbmUgPiB0b3AgJiYgY2hlY2tMaW5lIDwgYm90dG9tKSB7XG4gICAgICAgIGlmIChjaGVja0xpbmUgPD0gbWlkZGxlKSB7XG4gICAgICAgICAgaXRlbS5hZnRlcih0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtLmJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdG9wRHJhZyAoKSB7XG4gICAgdGhpcy5wbGFjZWhvbGRlci5yZXBsYWNlV2l0aCh0aGlzLmN1cnJlbnRFbGVtKTtcbiAgICB0aGlzLmN1cnJlbnRFbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xzLmRyYWdnZWQpO1xuICAgIHRoaXMuY3VycmVudEVsZW0uc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMubW92ZSk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLnN0b3BEcmFnKTtcbiAgfVxuXG4gIGNyZWF0ZVBsYWNlaG9sZGVyICgpIHtcbiAgICBjb25zdCBmaXJzdEl0ZW0gPSB0aGlzLml0ZW1zWzBdO1xuICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gZmlyc3RJdGVtLmNsb25lTm9kZSh0cnVlKTtcbiAgICBwbGFjZWhvbGRlci5jbGFzc0xpc3QuYWRkKGNscy5wbGFjZWhvbGRlciwgY2xzLml0ZW0pO1xuICAgIHBsYWNlaG9sZGVyLmlubmVySFRNTCA9ICcnO1xuXG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9XG5cbiAgc2V0UGxhY2Vob2xkZXJIZWlnaHQgKCkge1xuICAgIGNvbnN0IGZpcnN0SXRlbSA9IHRoaXMuaXRlbXNbMF07XG4gICAgdGhpcy5wbGFjZWhvbGRlci5zdHlsZS5taW5IZWlnaHQgPSBgJHtmaXJzdEl0ZW0ub2Zmc2V0SGVpZ2h0fXB4YDtcbiAgfVxuXG4gIGFkZENsYXNzVG9JdGVtcyAoKSB7XG4gICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jbGFzc0xpc3QuYWRkKGNscy5pdGVtKSk7XG4gIH1cbn1cbiIsImltcG9ydCByZW5kZXJQYWdlIGZyb20gJy4vcmVuZGVyUGFnZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnJvdXRlcyA9IFtdO1xuXG4gICAgdGhpcy5kb2N1bWVudENsaWNrID0gdGhpcy5kb2N1bWVudENsaWNrLmJpbmQodGhpcyk7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZG9jdW1lbnRDbGljayk7XG4gIH1cblxuICBzdGF0aWMgaW5zdGFuY2UgKCkge1xuICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IFJvdXRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gIH1cblxuICBhZGRSb3V0ZSAocGF0dGVybiwgcGF0aCkge1xuICAgIHRoaXMucm91dGVzLnB1c2goeyBwYXR0ZXJuLCBwYXRoIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0Tm90Rm91bmRQYWdlIChwYXRoKSB7XG4gICAgdGhpcy5ub3RGb3VuZFBhZ2VQYXRoID0gcGF0aDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG5hdmlnYXRlIChocmVmKSB7XG4gICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgaHJlZik7XG4gICAgdGhpcy5yb3V0ZSgpO1xuICB9XG5cbiAgYXN5bmMgcm91dGUgKCkge1xuICAgIGNvbnN0IHN0cmlwcGVkUGF0aCA9IGNsZWFuUGF0aCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIGxldCBtYXRjaDtcblxuICAgIGZvciAoY29uc3Qgcm91dGUgb2YgdGhpcy5yb3V0ZXMpIHtcbiAgICAgIG1hdGNoID0gc3RyaXBwZWRQYXRoLm1hdGNoKHJvdXRlLnBhdHRlcm4pO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHRoaXMucGFnZSA9IGF3YWl0IHRoaXMuY2hhbmdlUGFnZShyb3V0ZS5wYXRoLCBtYXRjaCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHRoaXMucGFnZSA9IGF3YWl0IHRoaXMuY2hhbmdlUGFnZSh0aGlzLm5vdEZvdW5kUGFnZVBhdGgpO1xuICAgIH1cblxuICAgIC8vIGN1c3RvbSBldmVudCBoZXJlXG4gIH1cblxuICBhc3luYyBjaGFuZ2VQYWdlIChwYXRoLCBtYXRjaCkge1xuICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLmRlc3Ryb3kpIHtcbiAgICAgIHRoaXMucGFnZS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy5wYWdlID0gYXdhaXQgcmVuZGVyUGFnZShwYXRoLCBtYXRjaCk7XG4gIH1cblxuICBhZGRMaXN0ZW5lciAoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgKCkgPT4gdGhpcy5yb3V0ZSgpKTtcbiAgICB0aGlzLnJvdXRlKCk7XG4gIH1cblxuICBkb2N1bWVudENsaWNrIChldmVudCkge1xuICAgIGNvbnN0IGxpbmsgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnYScpO1xuXG4gICAgaWYgKCFsaW5rKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaHJlZiA9IGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG5cbiAgICBpZiAoaHJlZiAmJiAoaHJlZi5zdGFydHNXaXRoKCcvJykgfHwgaHJlZi5zdGFydHNXaXRoKCcuLycpKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMubmF2aWdhdGUoaHJlZik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFuUGF0aCAocGF0aCkge1xuICByZXR1cm4gZGVjb2RlVVJJKHBhdGgpXG4gICAgLnJlcGxhY2UoL15cXC9zaG9wLWFkbWluLXBhZ2UvLCAnJykgLy8gZGlydHkgaGFjayBmb3IgZ2gtcGFnZXNcbiAgICAucmVwbGFjZSgvXlxcL3xcXC8kLywgJycpXG4gICAgLnJlcGxhY2UoL1xcPy4qJC8sICcnKVxuICAgIC5yZXBsYWNlKC8jLiokLywgJycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcmVuZGVyUGFnZSAocGF0aCwgbWF0Y2gpIHtcbiAgY29uc3QgeyBkZWZhdWx0OiBQYWdlIH0gPSBhd2FpdCBpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBgLi4vcGFnZXMvJHtwYXRofS9pbmRleC5qc2ApO1xuICBjb25zdCBwYWdlID0gbmV3IFBhZ2UobWF0Y2gpO1xuICBjb25zdCByZW5kZXJlZFBhZ2UgPSBhd2FpdCBwYWdlLnJlbmRlcigpO1xuXG4gIGNvbnN0IGNvbnRlbnRFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKTtcbiAgY29udGVudEVsZW0uaW5uZXJIVE1MID0gJyc7XG4gIGNvbnRlbnRFbGVtLmFwcGVuZChyZW5kZXJlZFBhZ2UpO1xufVxuIiwiaW1wb3J0IExheW91dCBmcm9tICcuL2NvbXBvbmVudHMvTGF5b3V0L2luZGV4LmpzJztcbmltcG9ydCBDb2x1bW5DaGFydCBmcm9tICcuL2NvbXBvbmVudHMvQ29sdW1uQ2hhcnQvaW5kZXguanMnO1xuaW1wb3J0IFJhbmdlUGlja2VyIGZyb20gJy4vY29tcG9uZW50cy9SYW5nZVBpY2tlci9pbmRleC5qcyc7XG5pbXBvcnQgU29ydGFibGVUYWJsZSBmcm9tICcuL2NvbXBvbmVudHMvU29ydGFibGVUYWJsZS9pbmRleC5qcyc7XG5pbXBvcnQgRHJhZ2dhYmxlTGlzdCBmcm9tICcuL2NvbXBvbmVudHMvRHJhZ2dhYmxlTGlzdC9pbmRleC5qcyc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vbGliL1JvdXRlci5qcyc7XG5cbmltcG9ydCAnLi9hc3NldHMvc2Nzcy9zdHlsZXMuc2Nzcyc7XG5cbi8vIFJvdXRpbmdcbmNvbnN0IHJvdXRlciA9IFJvdXRlci5pbnN0YW5jZSgpO1xuXG5yb3V0ZXJcbiAgLmFkZFJvdXRlKC9eJC8sICdkYXNoYm9hcmQnKVxuICAuYWRkUm91dGUoL15jYXRlZ29yaWVzJC8sICdjYXRlZ29yaWVzJylcbiAgLmFkZFJvdXRlKC9ecHJvZHVjdHNcXC8oW1xcUygpLV0rKS9nLCAncHJvZHVjdHMvZWRpdCcpXG4gIC5hZGRSb3V0ZSgvXnByb2R1Y3RzXFwvYWRkJC8sICdwcm9kdWN0cy9lZGl0JylcbiAgLmFkZFJvdXRlKC9ecHJvZHVjdHMkLywgJ3Byb2R1Y3RzJylcbiAgLnNldE5vdEZvdW5kUGFnZSgnZXJyb3I0MDQnKVxuICAuYWRkTGlzdGVuZXIoKTtcblxuLy8gSW5pdCBjdXN0b20gZWxlbWVudHNcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3BhZ2UtbGF5b3V0JywgTGF5b3V0KTtcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2NvbHVtbi1jaGFydCcsIENvbHVtbkNoYXJ0KTtcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3JhbmdlLXBpY2tlcicsIFJhbmdlUGlja2VyKTtcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3NvcnRhYmxlLXRhYmxlJywgU29ydGFibGVUYWJsZSk7XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkcmFnZ2FibGUtbGlzdCcsIERyYWdnYWJsZUxpc3QsIHsgZXh0ZW5kczogJ3VsJyB9KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=