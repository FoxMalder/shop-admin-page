!function(t){var e={};function r(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(i,a,function(e){return t[e]}.bind(null,a));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/shop-admin-page/",r(r.s=35)}([function(t,e,r){"use strict";var i="content"in document.createElement("template")?function(t){const e=document.createElement("template");return e.innerHTML=t,e.content.firstElementChild}:function(t){const e=document.createElement("div");return e.innerHTML=t,e.firstElementChild};function a(t){return t.replace(/&/g,"&").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"<").replace(/>/g,">")}function n({tmpl:t,data:e}){if(t&&e)return t.replace(/{([^"]{1,})}/g,(t,r)=>void 0!==e[r]?e[r]:"")}function s(t){const e=new Date(t).toDateString().split(" ");return`${e[1]} ${e[2]}, ${e[3]}`}function o(t){let e=t;if(t>=1e3){const r=t%1e3;e=`${(t-r)/1e3},${r}`}return`$${e}`}function l(t){const e=new Date(1970,0,5);let r="",i=0;for(;i<7;){r+=`<${t}>${e.toLocaleString("default",{weekday:"narrow"})}</${t}>`,e.setDate(e.getDate()+1),i++}return r}function c(t,e,r){let i,a=!1,n=!0;return function(){i=arguments,n&&(t.apply(e,...i),n=!1),a||(a=!0,setTimeout((function(){t.apply(e,...i),a=!1}),r))}}r(9);const d={elem:"notification",warning:"notification--warning",error:"notification--error"};class h{constructor({message:t,container:e,type:r}){this.message=t,this.container=e,this.type=r,this.duration=this.getDuration(),this.classNames=this.getClasses(),this.addElem(),this.isFinished=!1}addElem(){this.elem=document.createElement("div"),this.elem.classList.add(...this.classNames),this.elem.dataset.state="shown",this.elem.innerHTML=this.message,this.container.prepend(this.elem),setTimeout(()=>{this.hideElem()},this.duration)}async hideElem(t={}){return this.isFinished=!0,this.elem.dataset.state="hidden",new Promise((t,e)=>{this.elem.addEventListener("animationend",()=>{this.elem.remove(),t()})})}getDuration(){return"error"===this.type?5e3:3e3}getClasses(){const t=[d.elem];return this.type&&d[this.type]&&t.push(d[this.type]),t}}const p=document.createElement("div");p.classList.add("notifications"),document.body.append(p);let u=[];async function g(t){let e;try{e=await fetch(t)}catch(r){throw new m(e,null,`Network error for url ${t}`)}if(!e.ok){let r;const i=e.statusText;try{r=await e.json()}catch(t){}let a=`Error ${e.status} for url ${t}`;throw i&&(a+=`: ${i}`),new m(e,r,a)}try{e=await e.json()}catch(t){throw new m(e,null,t.message)}return e}class m extends Error{constructor(t,e,r){super(r),this.name="FetchError",this.response=t,this.body=e}}window.addEventListener("unhandledrejection",t=>{t.reason instanceof m&&async function(t,e){const r=new h({message:t,container:p,type:e});u.push(r),r.elem.offsetTop<0&&(u=u.filter(t=>!t.isFinished),u.shift().hideElem())}(t.reason.message,"error")}),r.d(e,"a",(function(){return i})),r.d(e,"b",(function(){return a})),r.d(e,"d",(function(){return n})),r.d(e,"e",(function(){return s})),r.d(e,"f",(function(){return o})),r.d(e,"g",(function(){return l})),r.d(e,"h",(function(){return c})),r.d(e,"c",(function(){return g}))},function(t,e,r){"use strict";var i,a=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},n=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),s={};function o(t,e,r){for(var i=0;i<e.length;i++){var a={css:e[i][1],media:e[i][2],sourceMap:e[i][3]};s[t][i]?s[t][i](a):s[t].push(m(a,r))}}function l(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var a=r.nc;a&&(i.nonce=a)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var s=n(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,d=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function h(t,e,r,i){var a=r?"":i.css;if(t.styleSheet)t.styleSheet.cssText=d(e,a);else{var n=document.createTextNode(a),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(n,s[e]):t.appendChild(n)}}function p(t,e,r){var i=r.css,a=r.media,n=r.sourceMap;if(a?t.setAttribute("media",a):t.removeAttribute("media"),n&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var u=null,g=0;function m(t,e){var r,i,a;if(e.singleton){var n=g++;r=u||(u=l(e)),i=h.bind(null,r,n,!1),a=h.bind(null,r,n,!0)}else r=l(e),i=p.bind(null,r,e),a=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else a()}}t.exports=function(t,e,r){return(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=a()),t=r.base?t+r.base:t,e=e||[],s[t]||(s[t]=[]),o(t,e,r),function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){s[t]||(s[t]=[]),o(t,e,r);for(var i=e.length;i<s[t].length;i++)s[t][i]();s[t].length=e.length,0===s[t].length&&delete s[t]}}}},function(t,e,r){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=function(t,e){var r=t[1]||"",i=t[3];if(!i)return r;if(e&&"function"==typeof btoa){var a=(s=i,o=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(l," */")),n=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[r].concat(n).concat([a]).join("\n")}var s,o,l;return[r].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,i){"string"==typeof t&&(t=[[null,t,""]]);var a={};if(i)for(var n=0;n<this.length;n++){var s=this[n][0];null!=s&&(a[s]=!0)}for(var o=0;o<t.length;o++){var l=[].concat(t[o]);i&&a[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),e.push(l))}},e}},function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));r(19);class i{constructor({title:t,text:e,callback:r,callbackText:i,error:a}){this.title=t,this.text=e||"Something went wrong",this.callback=r,this.callbackText=i,this.error=a,!this.title&&this.error&&(this.title="Error"),this.createElement()}createElement(){this.elem=document.createElement("div"),this.elem.classList.add("page-message"),this.error&&this.elem.classList.add("page-message--error"),this.content=`<h3>${this.title}</h3><p>${this.text}</p>`,this.error&&(this.content+=`<div class="page-message__error">\n        <div class="page-message__error-text">\n          <strong>${this.error.name}</strong>: ${this.error.message}</div>\n      </div>`),this.elem.insertAdjacentHTML("afterBegin",this.content)}}},function(t,e,r){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,r){"use strict";r.r(e),e.default=r.p+"682dedaafb044e7b9ea352a70baaf569.svg"},function(t,e,r){"use strict";r.r(e),e.default=r.p+"fb112b550276d752d0b3e107ade8d617.svg"},function(t,e,r){"use strict";r.r(e),e.default=r.p+"83c75420d0360ed22511c092e57d1d54.svg"},function(t,e,r){"use strict";r.r(e),e.default=r.p+"92679154afde0815c6222c7c0401f442.svg"},function(t,e,r){var i=r(1),a=r(10);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,'.notifications{position:fixed;display:flex;flex-direction:column;justify-content:flex-end;right:1rem;bottom:1rem;width:200px;max-height:50vh}.notification{margin-top:.5rem;padding:.75rem 1rem;background:var(--blue);border-radius:var(--radius);box-shadow:0 0 0.5em rgba(0,0,0,0.25);color:var(--white);opacity:0;transform:translateY(-1rem);animation:fadeIn .5s forwards}.notification--warning{background:var(--yellow)}.notification--error{background:var(--red)}.notification[data-state="hidden"]{animation:fadeOut .5s}@keyframes fadeIn{to{opacity:1;transform:translateY(0)}}@keyframes fadeOut{from{opacity:1;transform:translateY(0);margin-bottom:0}to{opacity:0;margin-bottom:-1rem}}\n',""]),t.exports=e},function(t,e,r){var i=r(1),a=r(12);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,'.page{width:100%}.page-container{display:flex;width:100%;max-width:1360px;margin:auto;min-height:100vh}.page-main,.page-aside,.page-footer{padding:2rem;box-sizing:border-box}.page-main{flex-grow:1}.page-aside{min-width:300px;background:var(--grey-extra-light)}.page-aside__title{min-height:3.2rem;margin-bottom:3rem;line-height:1;color:var(--table-grey)}.page-aside__title A{text-decoration:none}.page-aside__list{margin:0;padding:0;list-style-type:none}.page-aside__item{font-size:1.2rem}.page-aside__item+.page-aside__item{margin-top:1rem}.page-aside__link{text-decoration:none}.page-aside__link::before{margin-right:.45rem}.page-aside__link--dashboard::before{content:"📊"}.page-aside__link--products::before{content:"💼"}.page-aside__link--categories::before{content:"🗄"}.page-aside__link-text{text-decoration:underline}.page-aside__link:hover .page-aside__link-text{text-decoration:none}.page-footer{flex-basis:100%;display:flex}.page-footer A+A{margin-left:1rem}.page-content__header{display:flex;justify-content:space-between;align-items:center;margin-bottom:3rem}.page-content__title{margin-bottom:0;line-height:3rem;color:var(--grey)}.page-section{display:flex;flex-wrap:wrap}.page-section+.page-section{margin-top:2rem}.page-section__title{flex-basis:100%;line-height:3rem;color:var(--grey)}\n',""]),t.exports=e},function(t,e,r){var i=r(1),a=r(14);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,'.tooltips-container{position:relative}.tooltip{position:absolute;z-index:3;left:0;top:0;margin:1rem 0 0 1rem;padding:.5rem .75rem;background:#EEE;border-radius:3px;box-shadow:0 0 5px rgba(0,0,0,0.25);line-height:1;color:#555;transform:translate(0, 0);opacity:0;transition:opacity .2s;pointer-events:none}.tooltip[data-visible="1"]{opacity:1}[data-tooltip-content]{opacity:1;transition:opacity .2s}.tooltips-container--dimmed [data-tooltip-content]:not(:hover){opacity:.4}\n',""]),t.exports=e},function(t,e,r){var i=r(1),a=r(16);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,".column-chart{display:flex;position:relative;min-width:180px;flex-basis:calc((100% - 2rem) / 3);max-width:300px;min-height:150px;max-height:300px;margin:0 0 .5rem 0;padding:20px;box-sizing:border-box;border:1px solid var(--grey-light);border-left:5px solid var(--grey-light);border-radius:5px}.column-chart+.column-chart{margin-left:1rem}.column-chart__content{position:relative;flex-grow:1;display:flex;flex-wrap:wrap;max-width:100%}.column-chart__title{margin:0;line-height:1;font-weight:normal;font-size:1em;color:var(--grey)}.column-chart__total{margin-top:1rem;font-size:1.6em;line-height:1}.column-chart__list{display:flex;align-items:flex-end;width:100%;height:50px;margin:0;margin-top:.5rem;padding:0;list-style:none}.column-chart__item{flex-grow:1;margin-left:1px;background:var(--grey-light);cursor:pointer}.column-chart__item:first-child{margin-left:0}.column-chart__tooltip-date{font-size:.9em}.column-chart__tooltip-quantity{margin-top:.25em;font-size:1.1em}.column-chart--customers{border-left-color:gold}.column-chart--customers .column-chart__item{background:gold}.column-chart--orders{border-left-color:turquoise}.column-chart--orders .column-chart__item{background:turquoise}.column-chart--sales{border-left-color:yellowgreen}.column-chart--sales .column-chart__item{background:yellowgreen}.column-chart__error{max-width:100%;overflow:auto}\n",""]),t.exports=e},function(t,e,r){var i=r(1),a=r(18);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){var i=r(2),a=r(4),n=r(5),s=r(6);e=i(!1);var o=a(n),l=a(s);e.push([t.i,".rangepicker{position:relative;z-index:11}.rangepicker__input{display:inline-flex;padding:12px 16px 12px 40px;cursor:pointer;font-weight:normal;font-size:16px;line-height:20px;border:1px solid var(--grey-light);border-radius:4px;outline:none;background:var(--white) url("+o+') 16px center no-repeat;background-color:var(--white);background-size:18px 18px}.rangepicker_open .rangepicker__input,.rangepicker__input:focus,.rangepicker__input:active{border-color:var(--blue)}.rangepicker__input>SPAN{display:inline-flex;margin:0 4px}.rangepicker__input>SPAN:last-child{margin-right:0}.rangepicker__selector{display:none;background-color:var(--white);padding:32px 26px;border-radius:6px;box-shadow:0 4px 29px rgba(0,0,0,0.09);flex-direction:row;justify-content:space-between;flex:1 0 auto;position:absolute;top:calc(100% + 16px);right:0;z-index:1}.rangepicker--open .rangepicker__selector{display:inline-flex}.rangepicker__selector-arrow{width:30px;height:15px;position:absolute;bottom:100%;right:60px;overflow:hidden}.rangepicker__selector-arrow::after{content:"";position:absolute;width:12px;height:12px;background:var(--white);transform:translateX(-50%) translateY(-50%) rotate(45deg);top:100%;left:50%;box-shadow:0 1px 10px rgba(0,0,0,0.09)}.rangepicker__calendars{display:flex}.rangepicker__calendar{width:252px}.rangepicker__calendar:last-child{margin-left:26px}.rangepicker__month-indicator{text-align:center;font-weight:600;font-size:20px;line-height:24px;padding:0 15px;color:var(--dark-blue-text)}.rangepicker__selector-control{position:absolute;top:32px;width:15px;height:24px;display:flex;flex-direction:column;justify-content:center;cursor:pointer;transition:.3s all;background:url('+l+") left center no-repeat;background-size:9px 13px;border:0}.rangepicker__selector-control:hover{opacity:.8}.rangepicker__selector-control--left{left:26px}.rangepicker__selector-control--right{right:26px;transform:rotate(180deg)}.rangepicker__day-of-week,.rangepicker__date-grid{display:grid;grid-template-columns:repeat(7, 1fr)}.rangepicker__day-of-week{margin-top:28px;font-weight:400;font-size:14px;line-height:20px;color:var(--grey);text-align:center}.rangepicker__date-grid{margin-top:16px}.rangepicker__cell{position:relative;border:0;width:36px;height:36px;background-color:transparent;color:var(--dark-blue-text);border-radius:0;font-weight:400;font-size:16px;line-height:20px;cursor:pointer}.rangepicker__cell:active,.rangepicker__cell.rangepicker__selected,.rangepicker__cell.rangepicker__selected-from,.rangepicker__cell.rangepicker__selected-to{background-color:var(--blue);color:var(--white)}.rangepicker__cell:hover,.rangepicker__cell:focus{outline:none;background-color:var(--light-blue);color:var(--dark-blue-text);transition:.2s all}.rangepicker__cell.rangepicker__selected:hover,.rangepicker__cell.rangepicker__selected-from:hover,.rangepicker__cell.rangepicker__selected-to:hover,.rangepicker__cell.rangepicker__selected:focus,.rangepicker__cell.rangepicker__selected-from:focus,.rangepicker__cell.rangepicker__selected-to:focus{background-color:var(--middle-blue);color:var(--dark-blue-text)}.rangepicker__cell.rangepicker__selected-between{background-color:var(--light-blue)}\n",""]),t.exports=e},function(t,e,r){var i=r(1),a=r(20);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,".page-message{max-width:800px;margin:2rem auto;padding:1rem;background:lightgoldenrodyellow;border-radius:var(--radius)}.page-message--error{background:mistyrose}.page-message__error{margin-top:1rem;padding:1rem;background:#FFF;border-radius:var(--radius)}.page-message__error-text{font-family:Courier New, Courier, monospace}\n",""]),t.exports=e},function(t,e,r){var i=r(1),a=r(22);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,'.sortable-table{position:relative;width:100%;max-width:100%;min-height:200px;margin-bottom:40px;background-color:var(--white)}.sortable-table__table{width:100%}.sortable-table__row{position:relative;display:grid;grid:auto-flow / 12% 38% 20% 10% 10% 10%;text-decoration:none}.sortable-table__cell{padding:16px;font-size:16px;line-height:20px;color:var(--table-black);display:flex;align-items:center;border-bottom:1px solid var(--grey-light)}.sortable-table__cell:first-child{padding-left:32px}.sortable-table__cell:last-child{padding-right:32px}.sortable-table__cell--error{grid-column-start:1;grid-column-end:7}.sortable-table__thead{display:block;position:sticky;z-index:3;top:0;background-color:var(--white)}.sortable-table__header .sortable-table__cell{min-width:120px;color:var(--grey-light)}.sortable-table__header .sortable-table__cell[data-sortable]{cursor:pointer}.sortable-table__cell--quantity,.sortable-table__cell--price{justify-content:flex-end}.sortable-table__cell--disabled{opacity:.5}.sortable-table__cell[data-sort-direction]::after{content:"";display:block;width:0;height:0;margin-top:.25em;margin-left:.25em;border:5px solid;border-color:currentColor transparent}.sortable-table__cell[data-sort-direction="asc"]::after{border-top:none}.sortable-table__cell[data-sort-direction="desc"]::after{border-bottom:none}.sortable-table__cell--sorter:hover{cursor:pointer;color:var(--grey)}.sortable-table__image-wrapper{position:relative}.sortable-table__image{display:block;height:40px;width:100%;max-width:100%;min-width:40px;object-fit:contain;padding:4px;border:1px solid var(--grey-light);border-radius:2px}.sortable-table__preview{position:absolute;z-index:2;top:0;left:0;width:100%;height:100%;opacity:0;padding:.25em;background-origin:content-box;background-color:var(--white);background-size:contain;background-repeat:no-repeat;background-position:50% 50%;border:1px solid var(--grey-light);transition:all .25s}.sortable-table__preview:hover{width:300%;height:300%;opacity:1}.sortable-table__link{position:absolute;top:0;right:0;bottom:0;left:0}.sortable-table__category{position:relative;cursor:pointer}.sortable-table__tooltip-category{color:var(--grey)}\n',""]),t.exports=e},function(t,e,r){var i=r(1),a=r(24);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){var i=r(2),a=r(4),n=r(7);e=i(!1);var s=a(n);e.push([t.i,'.draggable-list{position:relative}.draggable-list__item{display:flex;align-items:center;cursor:grab}.draggable-list__item::before{content:"";display:block;height:18px;width:11px;margin-right:1rem;background:url('+s+") 50% 50% no-repeat;opacity:.5}.draggable-list .draggable-list__item--placeholder{background-color:var(--grey-light)}.draggable-list .draggable-list__item--placeholder::before{background:none}.draggable-list__item--dragged{position:absolute;left:0;right:0;background:var(--white);box-shadow:0 0 1rem rgba(0,0,0,0.35);cursor:grabbing}.draggable-list__item--dragged::before{opacity:1}\n",""]),t.exports=e},function(t,e,r){var i={"./categories/index.js":37,"./dashboard/index.js":28,"./error404/index.js":29,"./products/edit/index.js":36,"./products/index.js":32};function a(t){return n(t).then(r)}function n(t){return Promise.resolve().then((function(){if(!r.o(i,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return i[t]}))}a.keys=function(){return Object.keys(i)},a.resolve=n,a.id=25,t.exports=a},function(t,e,r){var i=r(1),a=r(27);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,'.categories__list{width:100%;list-style-type:none;margin:0;margin-top:2rem;padding:0}.categories__list--subcategories{display:none;margin-top:.5rem;margin-bottom:1rem}.categories__item{border-radius:var(--radius);background:var(--white);border:1px solid var(--grey-light)}.categories__item--topcategory{margin:0}.categories__item--topcategory+.categories__item--topcategory{margin-top:1rem}.categories__item--subcategory{display:flex;align-items:center;margin:0 1rem 0 2rem;padding:1rem}.categories__item--subcategory+.categories__item--subcategory{margin-top:.5rem}.categories__item--open{background:var(--grey-extra-light);border:1px solid var(--grey-light)}.categories__item--open .categories__list--subcategories{display:block}.categories__counter{margin-left:auto;color:var(--grey)}.categories__toggler{display:flex;align-items:center;width:100%;border:none;padding:1rem;text-align:left;cursor:pointer}.categories__toggler::before{content:"";display:block;width:0;height:0;margin-right:.5rem;border:.5rem solid;border-bottom:0;border-color:var(--grey-light) transparent;transform:rotate(-90deg);transition:transform .25s}.categories__item--open .categories__toggler::before{transform:rotate(0deg)}\n',""]),t.exports=e},function(t,e,r){"use strict";r.r(e);var i=r(0);const a=new Date;a.setMonth(a.getMonth()-1);const n=new Date,s=a.toISOString(),o=n.toISOString();e.default=class{async render(){return Object(i.a)(`<div class="page-content">\n      <header class="page-content__header">\n        <h2 class="page-content__title">Dashboard</h2>\n\n        <range-picker\n          data-from="${s}"\n          data-to="${o}"\n          ></range-picker>\n        </header>\n\n        <section class="page-section page-section--column-charts">\n          <column-chart\n            data-type="orders"\n            data-from="${s}"\n            data-to="${o}"\n          ></column-chart>\n\n          <column-chart\n            data-type="sales"\n            data-is-money="true"\n            data-from="${s}"\n            data-to="${o}"\n          ></column-chart>\n\n          <column-chart\n            data-type="customers"\n            data-from="${s}"\n            data-to="${o}"\n          ></column-chart>\n        </section>\n\n        <section class="page-section">\n          <h3 class="page-section__title">Bestsellers</h3>\n\n        <sortable-table\n          data-url="/api/dashboard/bestsellers?_embed=subcategory.category",\n          data-is-dynamic="0"\n          data-fields-list="['images', 'title', 'subcategory', 'quantity', 'price', 'status']"\n          data-order-field='title',\n          data-order-direction="1"\n          data-from="${s}"\n          data-to="${o}"\n          ></sortable-table>\n        </section>\n      </div>`)}}},function(t,e,r){"use strict";r.r(e);var i=r(0);e.default=class{async render(){return Object(i.a)('<div class="page-content">\n        <section class="page-section page-section--404">\n          <h2 class="page-section__title">Page not found</h2>\n          <p>No such page</p>\n        </section>\n      </div>')}}},function(t,e,r){var i=r(1),a=r(31);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){var i=r(2),a=r(4),n=r(8);e=i(!1);var s=a(n);e.push([t.i,".product-form{margin-bottom:2rem}.product-form__list,.product-form__footer{display:grid;grid-template-columns:repeat(3, 1fr);grid-gap:1rem}.product-form__list{margin:0;padding:0;list-style-type:none}.product-form__item{grid-column:1 / span 2}.product-form__item--full{grid-column:1 / span 3}.product-form__item--tiny{grid-column:1 / span 1}.product-form__item--follow{grid-column-start:auto}.product-form__item+.product-form__item{margin-top:1rem}.product-form__link{position:absolute;top:0;right:0;bottom:0;left:0}.product-form__input--textarea{min-height:200px}.product-form__images-list{margin:0;padding:0;list-style-type:none}.product-form__images-item{display:flex;align-items:center;padding:.5rem;background:var(--grey-extra-light);border-radius:var(--radius)}.product-form__images-item+.product-form__images-item{margin-top:.5rem}.product-form__image-wrapper{position:relative}.product-form__image{display:block;width:100%;max-width:80px;min-width:40px;height:40px;object-fit:contain;padding:4px;border:1px solid var(--grey-light);background:var(--white);border-radius:var(--radius)}.product-form__preview{position:absolute;z-index:2;top:0;left:0;width:100%;height:100%;opacity:0;padding:.25em;background-origin:content-box;background-color:var(--white);background-size:contain;background-repeat:no-repeat;background-position:50% 50%;border:1px solid var(--grey-light);transition:all .25s}.product-form__preview:hover{width:300%;height:300%;transform:translateX(-35%) translateY(-35%);opacity:1}.product-form__image-source{margin-left:1rem}.product-form__image-remove{width:3rem;align-self:stretch;margin-left:auto;background:url("+s+") 50% 50% no-repeat;font-size:0;border:none}.product-form__footer{margin-top:2rem}\n",""]),t.exports=e},function(t,e,r){"use strict";r.r(e);var i=r(0);e.default=class{async render(){return Object(i.a)("<div class=\"page-content\">\n      <section class=\"page-section\">\n        <h2 class=\"page-section__title\">Products</h2>\n\n        <sortable-table\n          data-url=\"/api/rest/products?_embed=subcategory.category\",\n          data-is-dynamic=\"1\"\n          data-fields-list=\"['images', 'title', 'subcategory', 'quantity', 'price', 'status']\"\n          data-order-field='title',\n          data-order-direction=\"1\"\n          ></sortable-table>\n      </section>\n    </div>")}}},function(t,e,r){var i=r(1),a=r(34);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,':root{--blue: #109CF1;--dark-blue: #334D6E;--light-blue: #CFEBFC;--middle-blue: #9FD7F9;--yellow: #FFB946;--red: #F7685B;--green: #2ED47A;--purple: #885AF8;--black: #192A3E;--table-black: #323C47;--table-grey: #707683;--grey: #90A0B7;--grey-light: #C2CFE0;--grey-extra-light: #EFF1F4;--grey-skeleton: #F5F6F8;--white: #FFF;--radius: 4px}*{box-sizing:border-box}HTML{font-size:16px}BODY{display:flex;min-height:100vh;margin:0;background:#FFF;font:1rem/1.4 Trebuchet MS, Verdana, sans-serif;color:#000}H1,H2,H3,H4{margin-top:0;margin-bottom:.5em;font-weight:normal}H1{font-size:2.75rem}H2{font-size:2.25rem}H3{font-size:1.75rem}H4{font-size:1.25rem}A,A:visited,A:hover{color:inherit}A:hover{text-decoration:none}BUTTON,INPUT,TEXTAREA,SELECT{display:block;padding:.5rem;background:none;border-radius:var(--radius);font:inherit}INPUT,TEXTAREA,SELECT{width:100%;border:1px solid var(--grey-light)}.page-layout{display:flex;width:100%}.spinner{display:none;position:absolute;bottom:2rem;left:0;right:0;width:4rem;height:4rem;margin:auto;background:var(--white);box-shadow:0 0 .5rem currentColor;border-radius:50%;color:var(--grey-light)}[data-loading="1"] .spinner{display:block}.spinner::before,.spinner::after{content:"";position:absolute;top:0;right:0;bottom:0;left:0;margin:auto;box-sizing:border-box;border:3px solid;border-color:currentColor transparent;border-radius:50%;animation:rotate 2.1s linear infinite}.spinner::before{width:2.25rem;height:2.25rem}.spinner::after{width:1.25rem;height:1.25rem;animation-duration:1.3s;animation-direction:reverse}@keyframes rotate{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}\n',""]),t.exports=e},function(t,e,r){"use strict";r.r(e);var i=r(0);r(11);class a extends HTMLElement{connectedCallback(){this.append(this.render()),this.classList.add("page")}render(){return Object(i.a)('<div class="page-container">\n      <aside class="page-aside">\n        <h1 class="page-aside__title">\n          <a href="./">Shop admin</a>\n        </h1>\n\n        <nav class="page-aside__nav">\n          <ul class="page-aside__list">\n            <li class="page-aside__item">\n              <a\n                class="page-aside__link page-aside__link--dashboard"\n                href="./">\n                <span class="page-aside__link-text">\n                  Dashboard\n                </span>\n              </a>\n            </li>\n            <li class="page-aside__item">\n              <a\n                class="page-aside__link page-aside__link--products"\n                href="./products">\n                <span class="page-aside__link-text">\n                  Products\n                </span>\n              </a>\n            </li>\n            <li class="page-aside__item">\n              <a\n                class="page-aside__link page-aside__link--categories"\n                href="./categories">\n                <span class="page-aside__link-text">\n                  Categories\n                </span>\n              </a>\n            </li>\n          </ul>\n        </nav>\n      </aside>\n\n      <main class="page-main" id="content">\n        \x3c!-- main content will be here --\x3e\n      </main>\n    </div>')}}var n="tooltips-container",s="tooltips-container--dimmed",o="tooltip";r(13);class l{constructor({elem:t,dimSiblings:e}){this.elem=t,this.elem.classList.add(n),this.dimSiblings=e,this.tooltip=Object(i.a)(`<div class="${o}"></div>`),this.elem.append(this.tooltip),this.listMouseMove=this.listMouseMove.bind(this),this.listMouseOut=this.listMouseOut.bind(this),this.elem.addEventListener("mousemove",this.listMouseMove),this.elem.addEventListener("mouseleave",this.listMouseOut)}listMouseMove(){if(!event.target.dataset.tooltipContent)return void this.hideTooltip();const{tooltipContent:t}=event.target.dataset;this.tooltip.innerHTML=t,this.tooltip.dataset.visible=1,this.elemCoords=this.elem.getBoundingClientRect();const e={x:event.clientX-this.elemCoords.x,y:event.clientY-this.elemCoords.y};this.tooltip.style=`transform: translate(${e.x}px, ${e.y}px)`,this.tooltipCoords=this.tooltip.getBoundingClientRect();const r=this.tooltipCoords.right-document.documentElement.clientWidth;r>0&&(e.x-=r,this.tooltip.style=`transform: translate(${e.x}px, ${e.y}px)`),this.dimSiblings&&this.elem.classList.add(s)}listMouseOut(){event.target.dataset.tooltipContent||this.hideTooltip()}hideTooltip(){this.tooltip.dataset.visible=0,this.elem.classList.remove(s)}}var c="column-chart",d="column-chart__content",h="column-chart__list",p="column-chart__tooltip-date",u="column-chart__tooltip-quantity",g="column-chart__error";var m={header:`<header class="${"column-chart__header"}">\n  <h3 class="${"column-chart__title"}">{title}</h3>\n  <div class="${"column-chart__total"}">{total}</div>\n</header>`,chartItem:`<li\n  class="${"column-chart__item"}"\n  data-tooltip-content="{tootipContent}"\n  style="height: {height}"></li>`};r(15);class f extends HTMLElement{constructor(){super(),this.elem=document.createElement("div"),this.apiUrl="http://localhost:8080",this.changeDate=this.changeDate.bind(this)}async connectedCallback(){const{type:t,isMoney:e,from:r,to:a}=this.dataset;this.dates={from:new Date(r),to:new Date(a)},this.type=t,this.formatTotal=e?i.f:null,this.classList.add(c,`${c}--${t}`),this.elem.classList.add(d),this.title=`Total ${t}`,this.url=this.getUrl(),await this.render(),this.append(this.elem),document.addEventListener("changeDate",this.changeDate)}getUrl(){return`${this.apiUrl}/api/dashboard/${this.type}?from=${this.dates.from}&to=${this.dates.to}`}async getData(){try{return{data:await Object(i.c)(this.url)}}catch(t){return{error:t}}}async render(){const{data:t,error:e}=await this.getData();if(this.data=t,e)return void this.elem.insertAdjacentHTML("beforeEnd",`<div class="${g}">${e}</div>`);this.values=Object.values(this.data),0===this.values.length&&this.values.push("No data");const r=this.getHeaderStr(),i=this.getListStr();this.elem.insertAdjacentHTML("beforeEnd",r+i),this.addActions()}getHeaderStr(){return this.total=this.values.reduce((t,e)=>t+e,0),this.formatTotal&&(this.total=this.formatTotal(this.total)),Object(i.d)({tmpl:m.header,data:this})}getListStr(){const t=Math.max(...this.values);let e="";for(const r in this.data){const a=Object(i.e)(r);let n=this.data[r];const s=`${(n/t*100).toFixed(2)}%`;this.formatTotal&&(n=this.formatTotal(n));const o=`<small class="${p}">${a}</small><div class="${u}">${n}</div>`;e+=Object(i.d)({tmpl:m.chartItem,data:{...this,height:s,tootipContent:Object(i.b)(o)}})}return`<ul class="${h}">${e}</ul>`}addActions(){this.tooltips=new l({elem:this.elem,dimSiblings:!0})}async changeDate(t){if(!t.detail||!t.detail.dates)return;const{from:e,to:r}=t.detail.dates;this.dates={from:e,to:r},this.url=this.getUrl(),this.elem.innerHTML="",await this.render(),this.append(this.elem)}}var b="rangepicker",_="rangepicker--open",v="rangepicker__input",y="rangepicker__from",x="rangepicker__to",w="rangepicker__selector",k="rangepicker__selector-control",$="rangepicker__calendars",E="rangepicker__cell",L="rangepicker__selected-from",D="rangepicker__selected-between",T="rangepicker__selected-to";var C={input:`<button class="${v}" data-elem="input" type="button">\n  <span\n    class="${y}"\n    data-elem="from">{from}</span> -\n  <span\n    class="${x}"\n    data-elem="to"\n    >{to}</span>\n</button>`,selector:`\n<div class="${w}" data-elem="selector">\n  <div class="${"rangepicker__selector-arrow"}"></div>\n  <button\n    type="button"\n    class="${k} ${k}--left"\n    data-direction="prev"\n  ></button>\n  <button\n    type="button"\n    class="${k} ${k}--right"\n    data-direction="next"\n  ></button>\n  <div class="${$}"></div>\n</div>\n`,calendar:`\n<div class="${"rangepicker__calendar"}">\n  <div class="${"rangepicker__month-indicator"}">\n    <time datetime="{month}">{month}</time>\n  </div>\n  <div class="${"rangepicker__day-of-week"}">\n    {weekdays}\n  </div>\n  <div class="${"rangepicker__date-grid"}">\n    {days}\n  </div>\n</div>\n`,day:`\n<button type="button" class="${E} {mod}" data-value="{dateTime}" style="{style}">{dateNum}</button>\n`};r(17),r(6),r(5);class M extends HTMLElement{constructor(){super(),this.togglePicker=this.togglePicker.bind(this),this.selectorOnClick=this.selectorOnClick.bind(this),this.bodyOnClick=this.bodyOnClick.bind(this),this.updateRange=this.updateRange.bind(this),this.isOpened=!1,this.elem=this,this.elem.classList.add("rangepicker")}async connectedCallback(){const{from:t,to:e}=this.dataset;this.dates={from:new Date(t),to:new Date(e)},this.monthes=this.getDisplayedMonthes(),this.newDates=[],this.addInput(),document.addEventListener("changeDate",this.updateRange)}getDisplayedMonthes(){const t=new Date(this.dates.from);let e=t.getMonth();t.setDate(1);const r=new Date(t);return r.setMonth(++e),[t,r]}addInput(){const t={from:this.dates.from.toLocaleDateString(),to:this.dates.to.toLocaleDateString()},e=C.input,r=Object(i.d)({tmpl:e,data:t});this.elem.insertAdjacentHTML("afterBegin",r),this.input=this.elem.querySelector(`.${v}`),this.inputFrom=this.input.querySelector(`.${y}`),this.inputTo=this.input.querySelector(`.${x}`),this.input.addEventListener("pointerdown",this.togglePicker),document.body.addEventListener("pointerdown",this.bodyOnClick,{capture:!0})}bodyOnClick(){!event.target.closest(`.${b}`)&&this.isOpened&&this.hidePicker()}updateInput(){this.inputFrom.innerHTML=this.dates.from.toLocaleDateString(),this.inputTo.innerHTML=this.dates.to.toLocaleDateString()}updateRange(){this.monthes=this.getDisplayedMonthes(),this.newDates=[],this.updateInput(),this.hidePicker()}togglePicker(){this.isOpened?this.hidePicker():(this.showPicker(),this.isOpened=!0)}showPicker(){this.selector?this.calendars.innerHTML="":(this.addSelector(),this.selector=this.elem.querySelector(`.${w}`),this.calendars=this.elem.querySelector(`.${$}`),this.selector.addEventListener("click",this.selectorOnClick)),this.addCalendars(),this.elem.classList.add(_)}hidePicker(){this.elem.classList.remove(_),this.isOpened=!1,this.newDates=[]}addSelector(){const t=C.selector;this.elem.insertAdjacentHTML("beforeEnd",t)}selectorOnClick(){const{dataset:t}=event.target;t.value?this.setDay(event.target):t.direction&&this.moveMonth(t.direction)}setDay(t){const e=t.dataset.value;if(0===this.newDates.length)return this.newDates.push(new Date(e)),void this.updateSelected(t);this.newDates.push(new Date(e)),this.newDates.sort((t,e)=>t-e),this.dates={from:this.newDates[0],to:this.newDates[1]},document.dispatchEvent(new CustomEvent("changeDate",{detail:{dates:{from:this.dates.from.toISOString(),to:this.dates.to.toISOString()}}}))}moveMonth(t){let e=1;"prev"===t&&(e=-1),this.monthes.forEach(t=>{t.setMonth(t.getMonth()+e)}),this.updateCalendars()}addCalendars(){this.monthes.forEach(t=>{this.calendars.insertAdjacentHTML("beforeEnd",this.getCalendar(t))})}updateCalendars(){this.calendars.innerHTML="",this.addCalendars()}updateSelected(t){const e=this.elem.querySelectorAll(`.${E}`),r=[D,L,T];e.forEach(t=>{t.classList.remove(...r)}),t.classList.add(L)}getCalendar(t){const e={month:t.toLocaleString("default",{month:"long"}),weekdays:Object(i.g)("div"),days:this.getCells(t)},r=C.calendar;return Object(i.d)({tmpl:r,data:e})}getCells(t){const e=C.day,r=new Date(t),a=r.getMonth();let n=1,s="";for(;r.getMonth()===a;){const t=this.getCellStartStyle(r),a=this.getCellMod(r),o={dateTime:r.toISOString(),dateNum:r.getDate(),style:t,mod:a};s+=Object(i.d)({tmpl:e,data:o}),r.setDate(++n)}return s}getCellStartStyle(t){let e="";if(t.getDate()>1)return e;let r=t.getDay();return 0===r&&(r=7),e=`grid-column-start: ${r}`,e}getCellMod(t){let e="";if(this.newDates.length>0)return e;const r=t.valueOf(),i=this.dates.from.valueOf(),a=this.dates.to.valueOf();return r>i&&r<a?e=D:r===i?e=L:r===a&&(e=T),e}}var O="sortable-table",j="sortable-table__table",S="sortable-table__thead",H="sortable-table__header",P="sortable-table__row",A="sortable-table__cell",F="sortable-table__cell--error",U="sortable-table__cell--sorter",N="sortable-table__image",B="sortable-table__image-wrapper",R="sortable-table__preview",z="sortable-table__link",q="sortable-table__category",I="sortable-table__tooltip-category",Y="sortable-table__tooltip-subcategory",W={0:"Disabled",1:"Enabled"},X={images:{title:"Image",render({images:t}){if(!t||!t[0].url)return"";const e=t[0].url;return`<div class="${B}">\n      <img src="${e}" class="${N}">\n      <span style="background-image: url(${e})" class="${R}"><span>\n      <div>`},compare:null},title:{title:"Name",render:({title:t,id:e})=>`\n      ${t}\n      <a class="${z}" href="/products/${e}"></a>\n      `,compare:(t,e)=>t.title.localeCompare(e.title)},subcategory:{title:"Category",render({subcategory:t}){const e=t.category,r=`<span class="${I}">${e.title}</span>/<span class="${Y}">${t.title}</span>`;return`<span class="${q}" data-tooltip-content="${Object(i.b)(r)}">${t.title}</span>`},compare(t,e){const r=t.subcategory.title,i=e.subcategory.title;return r.localeCompare(i)}},quantity:{title:"Quantity",render:({quantity:t})=>t,compare:(t,e)=>t.quantity-e.quantity},price:{title:"Price",render:({price:t})=>Object(i.f)(t),compare:(t,e)=>t.price-e.price},status:{title:"Status",render:({status:t})=>W[t],compare:(t,e)=>t.status-e.status}},J={0:"desc",1:"asc"};const Q=t=>J[+t];var V=r(3);r(21);class G extends HTMLElement{constructor(){super(),this.sorting={current:null,isAsc:!0},this.page={items:20,current:0,isDataEnded:!1},this.apiUrl="http://localhost:8080",this.changeDate=this.changeDate.bind(this)}async connectedCallback(){const{url:t,fieldsList:e,orderField:r,orderDirection:a,isDynamic:n,from:s,to:o}=this.dataset;this.dates={from:s,to:o},this.url=this.apiUrl+t,this.fieldsList=JSON.parse(e.replace(/'/g,'"')),this.isDynamic=+n,this.order={field:r,direction:a},this.initTable=this.initTable.bind(this),this.isLoading=!1,this.order&&void 0!==this.order.direction&&(this.sorting.isAsc=this.order.direction),this.fetchUrl=this.getFetchUrl(),this.onBodyScrollThrottle=Object(i.h)(this.onBodyScroll,this,500),this.initTable(),document.addEventListener("changeDate",this.changeDate)}async loadData(){this.isLoading=!0,this.table.dataset.loading=1;try{const t=await Object(i.c)(this.fetchUrl);return this.isLoading=!1,this.table.dataset.loading=0,t}catch(t){const e=new V.a({error:t});this.table.dataset.loading=0,this.tBody.insertAdjacentHTML("beforeEnd",`<tr class="${P}"><td class="${F}">${e.elem.outerHTML}</tr>`)}}initTable(){this.createLayout(),this.addElemHeader(),this.addTableEvents(),this.fillTBody()}async fillTBody(){this.page.isDataEnded||(this.tableRows=await this.loadData(),this.tableRows.length<this.page.items&&(this.page.isDataEnded=!0,0===this.tableRows.length)||(!this.isDynamic&&this.order&&this.order.field?this.sortRows(this.order.field):this.renderTBody()))}getFetchUrl(){const t={start:this.page.current*this.page.items,end:(this.page.current+1)*this.page.items,sort:this.order.field,order:Q(this.sorting.isAsc)};this.dates&&this.dates.from&&(t.from=this.dates.from,t.to=this.dates.to);let e="";for(const r in t){let i="_";"from"!==r&&"to"!==r||(i=""),e+=`&${i}${r}=${t[r]}`}return this.url+e}createLayout(){this.classList.add(O),this.table=document.createElement("table"),this.table.classList.add(j),this.tBody=document.createElement("tbody"),this.table.append(this.tBody),this.table.insertAdjacentHTML("beforeEnd",`<tfoot><tr><td colspan="${this.fieldsList.length}"><div class="spinner"></div></td></tr></tfoot>`),this.append(this.table)}addElemHeader(){let t="";this.fieldsList.forEach(e=>{let r=A;const i={sorter:"",sortDirection:""};if(X[e].compare&&(r+=` ${U}`,i.sorter='data-sorter="1"'),e===this.order.field){const t=Q(this.sorting.isAsc);i.sortDirection=`data-sort-direction="${t}"`}t+=`<th class="${r}"\n        data-name="${e}"\n        ${i.sorter}\n        ${i.sortDirection}\n        >${X[e].title}</th>`});const e=`<thead class="${S}"><tr class="${H} ${P}">\n      ${t}\n    </tr></thead>`;this.table.insertAdjacentHTML("afterBegin",e),this.sorting.current=this.table.querySelector("[data-sort-direction]")}sorterOnClick(t){const{name:e}=t.dataset;t.dataset.sortDirection?this.sorting.isAsc=!this.sorting.isAsc:(this.sorting.current&&delete this.sorting.current.dataset.sortDirection,this.sorting.isAsc=!0,this.sorting.current=t),t.dataset.sortDirection=Q(this.sorting.isAsc),this.isDynamic?this.sortRowsDynamic(e):this.sortRows(e)}sortRows(t){this.tableRows.sort(X[t].compare),this.sorting.isAsc||this.tableRows.reverse(),this.tBody.innerHTML="",this.renderTBody()}sortRowsDynamic(t){this.order.field=t,this.page.current=0,this.page.isDataEnded=!1,this.fetchUrl=this.getFetchUrl(),this.tBody.innerHTML="",this.fillTBody()}addTableEvents(){this.table.addEventListener("click",this),window.addEventListener("scroll",this.onBodyScrollThrottle),this.tooltips=new l({elem:this})}handleEvent(){event.target.dataset.sorter&&this.sorterOnClick(event.target)}onBodyScroll(){if(this.isLoading)return;document.documentElement.getBoundingClientRect().bottom-window.innerHeight<100&&(this.page.current++,this.fetchUrl=this.getFetchUrl(),this.fillTBody())}renderTBody(){this.pageYOffset=window.pageYOffset,this.tableRows.forEach(t=>{let e="";const{status:r}=t;this.fieldsList.forEach(i=>{const a=[A,`${A}--${i}`,`${A}--${W[r].toLowerCase()}`],n=(0,X[i].render)(t);n&&(e+=`<td class="${a.join(" ")}">${n}</td>`)}),this.tBody.insertAdjacentHTML("beforeEnd",`<tr class="${P}">${e}</tr>`)}),this.pageYOffset&&window.scrollTo(0,this.pageYOffset)}async changeDate(t){t.detail&&t.detail.dates&&(this.dates=t.detail.dates,this.fetchUrl=this.getFetchUrl(),this.tBody.innerHTML="",this.fillTBody())}}r(23),r(7);const K="draggable-list",Z="draggable-list__item",tt="draggable-list__item--dragged",et="draggable-list__item--placeholder";class rt extends HTMLUListElement{constructor(){super(),this.startDrag=this.startDrag.bind(this),this.stopDrag=this.stopDrag.bind(this),this.move=this.move.bind(this),this.setPlaceholderHeight=this.setPlaceholderHeight.bind(this)}async connectedCallback(){this.classList.add(K),this.items=this.querySelectorAll("li"),this.placeholder=this.createPlaceholder(),this.addClassToItems(),this.addEventListener("pointerdown",this.startDrag),this.addEventListener("pointerdown",this.setPlaceholderHeight,{once:!0})}startDrag(t){if(this.currentElem=t.target.closest(".draggable-list__item"),!this.currentElem)return;this.currentElem.replaceWith(this.placeholder),this.currentElem.classList.add(tt),this.append(this.currentElem);const{top:e}=this.getBoundingClientRect();this.top=e,this.elemHalf=this.currentElem.offsetHeight/2;const r=t.clientY-this.top-this.elemHalf;this.currentElem.style.top=`${r}px`,this.addEventListener("pointermove",this.move),this.addEventListener("pointerup",this.stopDrag)}move(t){const e=t.clientY-this.top-this.elemHalf;this.currentElem.style.top=`${e}px`;for(const t of this.items){if(t.classList.contains(tt))continue;const r=t.offsetTop,i=r+t.offsetHeight,a=r+t.offsetHeight/2,n=e+this.elemHalf;if(n>r&&n<i){n<=a?t.after(this.placeholder):t.before(this.placeholder);break}}}stopDrag(){this.placeholder.replaceWith(this.currentElem),this.currentElem.classList.remove(tt),this.currentElem.style.top="",this.removeEventListener("pointermove",this.move),this.removeEventListener("pointerup",this.stopDrag)}createPlaceholder(){const t=this.items[0].cloneNode(!0);return t.classList.add(et,Z),t.innerHTML="",t}setPlaceholderHeight(){const t=this.items[0];this.placeholder.style.minHeight=`${t.offsetHeight}px`}addClassToItems(){this.items.forEach(t=>t.classList.add(Z))}}class it{constructor(){this.routes=[],this.documentClick=this.documentClick.bind(this),document.addEventListener("click",this.documentClick)}static instance(){return this._instance||(this._instance=new it),this._instance}addRoute(t,e){return this.routes.push({pattern:t,path:e}),this}setNotFoundPage(t){return this.notFoundPagePath=t,this}navigate(t){history.pushState(null,null,t),this.route()}async route(){const t=(e=window.location.pathname,decodeURI(e).replace(/^\/shop-admin-page/,"").replace(/^\/|\/$/,"").replace(/\?.*$/,"").replace(/#.*$/,""));var e;let r;for(const e of this.routes)if(r=t.match(e.pattern),r){this.page=await this.changePage(e.path,r);break}r||(this.page=await this.changePage(this.notFoundPagePath))}async changePage(t,e){this.page&&this.page.destroy&&this.page.destroy(),this.page=await async function(t,e){const{default:i}=await r(25)(`./${t}/index.js`),a=new i(e),n=await a.render(),s=document.getElementById("content");s.innerHTML="",s.append(n)}(t,e)}addListener(){window.addEventListener("popstate",()=>this.route()),this.route()}documentClick(t){const e=t.target.closest("a");if(!e)return;const r=e.getAttribute("href");r&&(r.startsWith("/")||r.startsWith("./"))&&(t.preventDefault(),this.navigate(r))}}r(33);it.instance().addRoute(/^$/,"dashboard").addRoute(/^categories$/,"categories").addRoute(/^products\/([\S()-]+)/g,"products/edit").addRoute(/^products\/add$/,"products/edit").addRoute(/^products$/,"products").setNotFoundPage("error404").addListener(),window.customElements.define("page-layout",a),window.customElements.define("column-chart",f),window.customElements.define("range-picker",M),window.customElements.define("sortable-table",G),window.customElements.define("draggable-list",rt,{extends:"ul"})},function(t,e,r){"use strict";r.r(e);var i=r(0),a=r(3),n="product-form",s="product-form__list",o="product-form__item",l="product-form__item--tiny",c="product-form__item--full",d="product-form__label",h="product-form__input",p="product-form__images-list",u="product-form__images-item",g="product-form__image",m="product-form__image-wrapper",f="product-form__image-source",b="product-form__image-remove",_="product-form__preview",v="product-form__footer",y="product-form__submit";const x='<header class="page-content__header">\n  <h1 class="page-content__title">\n  <a href="/products">Products</a>\n  /Edit Product</h1>\n</header>',w=`<label class="${d}">\n  {fieldName}\n\n  <input\n    class="${h} ${"product-form__input--text"}"\n    type="text"\n    name="{id}"\n    value="{value}"/>\n</label>`,k=`<label class="${d}">\n  {fieldName}\n\n  <input\n    class="${h} ${"product-form__input--number"}"\n    type="number"\n    name="{id}"\n    value="{value}"/>\n</label>`,$=`<label class="${d}">\n  {fieldName}\n\n  <textarea\n    class="${h} ${"product-form__input--textarea"}"\n    name="{id}">{value}</textarea>\n</label>`,E=`<label class="${d}">\n  {fieldName}\n\n  <select\n    class="${h} ${"product-form__input--select"}"\n    name="{id}">\n    {options}\n  </select>\n</label>`;var L={0:"Disabled",1:"Enabled"};function D(t){const e=[];for(const r of t)for(const t of r.subcategories)e.push({value:t.id,text:`${r.title} > ${t.title}`});return e}function T(t,e){return t.map((t,r)=>{const i=t.value||r,a=t.text||t;return`<option value="${i}" ${i===e?"selected":""}>${a}</option>`}).join("")}var C={images:{render:({images:t})=>t?function(t){const e=t.map(t=>`<li class="${u}">\n        <div class="${m}">\n          <img src="${t.url}" class="${g}">\n          <span style="background-image: url(${t.url})" class="${_}"><span>\n        </div>\n        <span class="${f}">${t.source}</span>\n        <button type="button" class="${b}">Remove</button>\n      </li>`);return` + upload\n    <ul class="${p}" is="draggable-list">${e.join(" ")}</ul>`}(t):"",compare:null},title:{render({title:t}){const e={id:"title",fieldName:"Name",value:t};return Object(i.d)({tmpl:w,data:e})}},description:{render({description:t}){const e={id:"description",fieldName:"Description",value:t};return Object(i.d)({tmpl:$,data:e})}},subcategory:{render({categories:t,subcategory:e}){const r={id:"subcategory",fieldName:"Category",options:T(D(t),e)};return Object(i.d)({tmpl:E,data:r})}},quantity:{render({quantity:t}){const e={id:"quantity",fieldName:"Quantity",value:t};return Object(i.d)({tmpl:k,data:e})}},price:{render({price:t}){const e={id:"price",fieldName:"Price",value:t};return Object(i.d)({tmpl:k,data:e})}},discount:{render({discount:t}){const e={id:"discount",fieldName:"Discount",value:t};return Object(i.d)({tmpl:k,data:e})}},status:{render({status:t}){const e={id:"status",fieldName:"Status",value:t,options:T(Object.values(L),t)};return Object(i.d)({tmpl:E,data:e})}}},M=[{name:"title"},{name:"description",mods:[c]},{name:"images",mods:[c]},{name:"subcategory"},{name:"price",mods:[l]},{name:"discount",mods:[l,"product-form__item--follow"]},{name:"quantity",mods:[l]},{name:"status",mods:[l]}];r(8),r(30),e.default=class{constructor(t){this.id=t[0].replace("products/",""),t[0]||(this.id="3d-ochki-optoma-zd302"),this.apiUrl="http://localhost:8080",this.fetchProductUrl=this.apiUrl+`/api/rest/products?id=${this.id}`,this.fetchCategoriesUrl=this.apiUrl+"/api/rest/categories?_sort=weight&_refs=subcategory"}async render(){const{productData:t,categories:e,errorMessage:r}=await this.loadData();if(r)return Object(i.a)(`<div class="page-content">\n        ${x}\n\n        ${r.outerHTML}\n      </div>\n      `);const a=t[0],l=[];for(const{name:t,mods:r}of M)if(C[t]){let i=a;"subcategory"===t&&(i={...i,categories:e});const n=C[t].render(i);let s=[o];r&&(s=s.concat(r)),l.push(`<li class="${s.join(" ")}">${n}</li>`)}return Object(i.a)(`<div class="page-content">\n      ${x}\n\n      <form action="" class="${n}}">\n        <ul class="${s}">\n          ${l.join("\n")}\n        </ul>\n\n        <footer class="${v}">\n          <button class="${y}">Save</button>\n        </footer>\n      </form>\n    </div>`)}async loadData(){try{return{productData:await Object(i.c)(this.fetchProductUrl),categories:await Object(i.c)(this.fetchCategoriesUrl)}}catch(t){return{errorMessage:new a.a({error:t}).elem}}}}},function(t,e,r){"use strict";r.r(e);var i=r(0),a=r(3),n="categories__list",s="categories__list--topcategories",o="categories__list--subcategories",l="categories__item",c="categories__item--topcategory",d="categories__item--subcategory",h="categories__item--open",p="categories__toggler",u="categories__counter";r(26),e.default=class{constructor(){this.apiUrl="http://localhost:8080",this.fetchUrl=`${this.apiUrl}/api/rest/categories?_sort=weight&_refs=subcategory`,this.listClick=this.listClick.bind(this)}async render(){const{categories:t,message:e}=await this.loadData();if(e)return Object(i.a)(`<div class="page-content">\n        <section class="page-section categories">\n          <h2 class="page-section__title">Categories</h2>\n\n          ${e.elem.outerHTML}\n        </section>\n      </div>\n      `);const r=this.createList(t);return this.elem=Object(i.a)(`<div class="page-content">\n      <section class="page-section categories">\n        <h2 class="page-section__title">Categories</h2>\n\n        ${r}\n      </section>\n    </div>`),this.addEvents(),this.elem}async loadData(){try{return{categories:await Object(i.c)(this.fetchUrl)}}catch(t){return{message:new a.a({error:t})}}}createList(t,e=!1){let r="",i=s,a=l,h="";if(e?(i=o,a+=` ${d}`,h='is="draggable-list"'):a+=` ${c}`,0===t.length)return"";for(const i of t){let t="",n=i.title;const s=i.subcategories;let o="";if(e){const t=this.getPlural(i.count,["product","products"]);o=`<span class="${u}">${t}</span>`}s&&(n=` <button class="${p}">${i.title}</button>`,t=this.createList(s,!0)),r+=`<li class="${a}">\n        ${n}\n        ${o}\n        ${t}\n      </li>`}return`<ul\n      class="${n} ${i}" ${h}\n      >\n      ${r}\n    </ul>`}addEvents(){this.elem.querySelector(`.${s}`).addEventListener("click",this.listClick)}listClick(){event.target.closest(`.${p}`)&&event.target.closest(`.${c}`).classList.toggle(h)}getPlural(t,e){let r=e[0];return 1!==t&&(r=e[1]),`${t} ${r}`}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,