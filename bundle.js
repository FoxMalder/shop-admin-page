!function(t){var e={};function r(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(i,a,function(e){return t[e]}.bind(null,a));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/shop-admin-page/",r(r.s=36)}([function(t,e,r){"use strict";var i="content"in document.createElement("template")?function(t){const e=document.createElement("template");return e.innerHTML=t,e.content.firstElementChild}:function(t){const e=document.createElement("div");return e.innerHTML=t,e.firstElementChild};function a(t){return t.replace(/&/g,"&").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"<").replace(/>/g,">")}function n({tmpl:t,data:e}){if(t&&e)return t.replace(/{([^"]{1,})}/g,(t,r)=>void 0!==e[r]?e[r]:"")}function s(t){const e=new Date(t).toDateString().split(" ");return`${e[1]} ${e[2]}, ${e[3]}`}function o(t){let e=t;if(t>=1e3){const r=t%1e3;e=`${(t-r)/1e3},${r}`}return`$${e}`}function l(t){const e=new Date(1970,0,5);let r="",i=0;for(;i<7;){r+=`<${t}>${e.toLocaleString("default",{weekday:"narrow"})}</${t}>`,e.setDate(e.getDate()+1),i++}return r}function c(t,e,r){let i,a=!1,n=!0;return function(){i=arguments,n&&(t.apply(e,...i),n=!1),a||(a=!0,setTimeout((function(){t.apply(e,...i),a=!1}),r))}}r(9);const d={elem:"notification",warning:"notification--warning",error:"notification--error"};class h{constructor({message:t,container:e,type:r}){this.message=t,this.container=e,this.type=r,this.duration=this.getDuration(),this.classNames=this.getClasses(),this.addElem(),this.isFinished=!1}addElem(){this.elem=document.createElement("div"),this.elem.classList.add(...this.classNames),this.elem.dataset.state="shown",this.elem.innerHTML=this.message,this.container.prepend(this.elem),setTimeout(()=>{this.hideElem()},this.duration)}async hideElem(t={}){return this.isFinished=!0,this.elem.dataset.state="hidden",new Promise((t,e)=>{this.elem.addEventListener("animationend",()=>{this.elem.remove(),t()})})}getDuration(){return"error"===this.type?5e3:3e3}getClasses(){const t=[d.elem];return this.type&&d[this.type]&&t.push(d[this.type]),t}}const u=document.createElement("div");u.classList.add("notifications"),document.body.append(u);let p=[];async function g(t){let e;try{e=await fetch(t)}catch(r){throw new m(e,null,`Network error for url ${t}`)}if(!e.ok){let r;const i=e.statusText;try{r=await e.json()}catch(t){}let a=`Error ${e.status} for url ${t}`;throw i&&(a+=`: ${i}`),new m(e,r,a)}try{e=await e.json()}catch(t){throw new m(e,null,t.message)}return e}class m extends Error{constructor(t,e,r){super(r),this.name="FetchError",this.response=t,this.body=e}}window.addEventListener("unhandledrejection",t=>{t.reason instanceof m&&async function(t,e){const r=new h({message:t,container:u,type:e});p.push(r),r.elem.offsetTop<0&&(p=p.filter(t=>!t.isFinished),p.shift().hideElem())}(t.reason.message,"error")}),r.d(e,"a",(function(){return i})),r.d(e,"b",(function(){return a})),r.d(e,"d",(function(){return n})),r.d(e,"e",(function(){return s})),r.d(e,"f",(function(){return o})),r.d(e,"g",(function(){return l})),r.d(e,"h",(function(){return c})),r.d(e,"c",(function(){return g}))},function(t,e,r){"use strict";var i,a=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},n=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),s={};function o(t,e,r){for(var i=0;i<e.length;i++){var a={css:e[i][1],media:e[i][2],sourceMap:e[i][3]};s[t][i]?s[t][i](a):s[t].push(m(a,r))}}function l(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var a=r.nc;a&&(i.nonce=a)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var s=n(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,d=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function h(t,e,r,i){var a=r?"":i.css;if(t.styleSheet)t.styleSheet.cssText=d(e,a);else{var n=document.createTextNode(a),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(n,s[e]):t.appendChild(n)}}function u(t,e,r){var i=r.css,a=r.media,n=r.sourceMap;if(a?t.setAttribute("media",a):t.removeAttribute("media"),n&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var p=null,g=0;function m(t,e){var r,i,a;if(e.singleton){var n=g++;r=p||(p=l(e)),i=h.bind(null,r,n,!1),a=h.bind(null,r,n,!0)}else r=l(e),i=u.bind(null,r,e),a=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else a()}}t.exports=function(t,e,r){return(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=a()),t=r.base?t+r.base:t,e=e||[],s[t]||(s[t]=[]),o(t,e,r),function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){s[t]||(s[t]=[]),o(t,e,r);for(var i=e.length;i<s[t].length;i++)s[t][i]();s[t].length=e.length,0===s[t].length&&delete s[t]}}}},function(t,e,r){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=function(t,e){var r=t[1]||"",i=t[3];if(!i)return r;if(e&&"function"==typeof btoa){var a=(s=i,o=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(l," */")),n=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[r].concat(n).concat([a]).join("\n")}var s,o,l;return[r].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,i){"string"==typeof t&&(t=[[null,t,""]]);var a={};if(i)for(var n=0;n<this.length;n++){var s=this[n][0];null!=s&&(a[s]=!0)}for(var o=0;o<t.length;o++){var l=[].concat(t[o]);i&&a[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),e.push(l))}},e}},function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));r(19);class i{constructor({title:t,text:e,callback:r,callbackText:i,error:a}){this.title=t,this.text=e||"Something went wrong",this.callback=r,this.callbackText=i,this.error=a,!this.title&&this.error&&(this.title="Error"),this.createElement()}createElement(){this.elem=document.createElement("div"),this.elem.classList.add("page-message"),this.error&&this.elem.classList.add("page-message--error"),this.content=`<h3>${this.title}</h3><p>${this.text}</p>`,this.error&&(this.content+=`<div class="page-message__error">\n        <div class="page-message__error-text">\n          <strong>${this.error.name}</strong>: ${this.error.message}</div>\n      </div>`),this.elem.insertAdjacentHTML("afterBegin",this.content)}}},function(t,e,r){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,r){"use strict";r.r(e),e.default=r.p+"682dedaafb044e7b9ea352a70baaf569.svg"},function(t,e,r){"use strict";r.r(e),e.default=r.p+"fb112b550276d752d0b3e107ade8d617.svg"},function(t,e,r){"use strict";r.r(e),e.default=r.p+"83c75420d0360ed22511c092e57d1d54.svg"},function(t,e,r){"use strict";r.r(e),e.default=r.p+"92679154afde0815c6222c7c0401f442.svg"},function(t,e,r){var i=r(1),a=r(10);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,'.notifications{position:fixed;display:flex;flex-direction:column;justify-content:flex-end;right:1rem;bottom:1rem;width:200px;max-height:50vh}.notification{margin-top:.5rem;padding:.75rem 1rem;background:var(--blue);border-radius:var(--radius);box-shadow:0 0 0.5em rgba(0,0,0,0.25);color:var(--white);opacity:0;transform:translateY(-1rem);animation:fadeIn .5s forwards}.notification--warning{background:var(--yellow)}.notification--error{background:var(--red)}.notification[data-state="hidden"]{animation:fadeOut .5s}@keyframes fadeIn{to{opacity:1;transform:translateY(0)}}@keyframes fadeOut{from{opacity:1;transform:translateY(0);margin-bottom:0}to{opacity:0;margin-bottom:-1rem}}\n',""]),t.exports=e},function(t,e,r){var i=r(1),a=r(12);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,".page{width:100%}.page-container{display:flex;width:100%;min-height:100vh}.page-main,.page-aside,.page-footer{padding:1rem;box-sizing:border-box}.page-main{flex-grow:1}.page-aside{min-width:250px;background:#EEE}.page-footer{flex-basis:100%;display:flex}.page-footer A+A{margin-left:1rem}.page-content__header{display:flex;justify-content:space-between}.page-section{display:flex;flex-wrap:wrap}.page-section+.page-section{margin-top:2rem}.page-section__title{flex-basis:100%}\n",""]),t.exports=e},function(t,e,r){var i=r(1),a=r(14);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,'.tooltips-container{position:relative}.tooltip{position:absolute;z-index:3;left:0;top:0;margin:1rem 0 0 1rem;padding:.5rem .75rem;background:#EEE;border-radius:3px;box-shadow:0 0 5px rgba(0,0,0,0.25);line-height:1;color:#555;transform:translate(0, 0);opacity:0;transition:opacity .2s;pointer-events:none}.tooltip[data-visible="1"]{opacity:1}[data-tooltip-content]{opacity:1;transition:opacity .2s}.tooltips-container--dimmed [data-tooltip-content]:not(:hover){opacity:.4}\n',""]),t.exports=e},function(t,e,r){var i=r(1),a=r(16);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,".column-chart{display:flex;position:relative;min-width:180px;flex-basis:calc((100% - 2rem) / 3);max-width:300px;min-height:150px;max-height:300px;margin:0 0 .5rem 0;padding:20px;box-sizing:border-box;border:1px solid var(--grey-light);border-left:5px solid var(--grey-light);border-radius:5px}.column-chart+.column-chart{margin-left:1rem}.column-chart__content{position:relative;flex-grow:1;display:flex;flex-wrap:wrap;max-width:100%}.column-chart__title{margin:0;line-height:1;font-weight:normal;font-size:1em;color:var(--grey)}.column-chart__total{margin-top:1rem;font-size:1.6em;line-height:1}.column-chart__list{display:flex;align-items:flex-end;width:100%;height:50px;margin:0;margin-top:.5rem;padding:0;list-style:none}.column-chart__item{flex-grow:1;margin-left:1px;background:var(--grey-light);cursor:pointer}.column-chart__item:first-child{margin-left:0}.column-chart__tooltip-date{font-size:.9em}.column-chart__tooltip-quantity{margin-top:.25em;font-size:1.1em}.column-chart--customers{border-left-color:gold}.column-chart--customers .column-chart__item{background:gold}.column-chart--orders{border-left-color:turquoise}.column-chart--orders .column-chart__item{background:turquoise}.column-chart--sales{border-left-color:yellowgreen}.column-chart--sales .column-chart__item{background:yellowgreen}.column-chart__error{max-width:100%;overflow:auto}\n",""]),t.exports=e},function(t,e,r){var i=r(1),a=r(18);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){var i=r(2),a=r(4),n=r(5),s=r(6);e=i(!1);var o=a(n),l=a(s);e.push([t.i,".rangepicker{position:relative;z-index:11}.rangepicker__input{display:inline-flex;padding:12px 16px 12px 40px;cursor:pointer;font-weight:normal;font-size:16px;line-height:20px;border:1px solid var(--grey-light);border-radius:4px;outline:none;background:var(--white) url("+o+') 16px center no-repeat;background-color:var(--white);background-size:18px 18px}.rangepicker_open .rangepicker__input,.rangepicker__input:focus,.rangepicker__input:active{border-color:var(--blue)}.rangepicker__input>SPAN{display:inline-flex;margin:0 4px}.rangepicker__input>SPAN:last-child{margin-right:0}.rangepicker__selector{display:none;background-color:var(--white);padding:32px 26px;border-radius:6px;box-shadow:0 4px 29px rgba(0,0,0,0.09);flex-direction:row;justify-content:space-between;flex:1 0 auto;position:absolute;top:calc(100% + 16px);right:0;z-index:1}.rangepicker--open .rangepicker__selector{display:inline-flex}.rangepicker__selector-arrow{width:30px;height:15px;position:absolute;bottom:100%;right:60px;overflow:hidden}.rangepicker__selector-arrow::after{content:"";position:absolute;width:12px;height:12px;background:var(--white);transform:translateX(-50%) translateY(-50%) rotate(45deg);top:100%;left:50%;box-shadow:0 1px 10px rgba(0,0,0,0.09)}.rangepicker__calendars{display:flex}.rangepicker__calendar{width:252px}.rangepicker__calendar:last-child{margin-left:26px}.rangepicker__month-indicator{text-align:center;font-weight:600;font-size:20px;line-height:24px;padding:0 15px;color:var(--dark-blue-text)}.rangepicker__selector-control{position:absolute;top:32px;width:15px;height:24px;display:flex;flex-direction:column;justify-content:center;cursor:pointer;transition:.3s all;background:url('+l+") left center no-repeat;background-size:9px 13px;border:0}.rangepicker__selector-control:hover{opacity:.8}.rangepicker__selector-control--left{left:26px}.rangepicker__selector-control--right{right:26px;transform:rotate(180deg)}.rangepicker__day-of-week,.rangepicker__date-grid{display:grid;grid-template-columns:repeat(7, 1fr)}.rangepicker__day-of-week{margin-top:28px;font-weight:400;font-size:14px;line-height:20px;color:var(--grey);text-align:center}.rangepicker__date-grid{margin-top:16px}.rangepicker__cell{position:relative;border:0;width:36px;height:36px;background-color:transparent;color:var(--dark-blue-text);border-radius:0;font-weight:400;font-size:16px;line-height:20px;cursor:pointer}.rangepicker__cell:active,.rangepicker__cell.rangepicker__selected,.rangepicker__cell.rangepicker__selected-from,.rangepicker__cell.rangepicker__selected-to{background-color:var(--blue);color:var(--white)}.rangepicker__cell:hover,.rangepicker__cell:focus{outline:none;background-color:var(--light-blue);color:var(--dark-blue-text);transition:.2s all}.rangepicker__cell.rangepicker__selected:hover,.rangepicker__cell.rangepicker__selected-from:hover,.rangepicker__cell.rangepicker__selected-to:hover,.rangepicker__cell.rangepicker__selected:focus,.rangepicker__cell.rangepicker__selected-from:focus,.rangepicker__cell.rangepicker__selected-to:focus{background-color:var(--middle-blue);color:var(--dark-blue-text)}.rangepicker__cell.rangepicker__selected-between{background-color:var(--light-blue)}\n",""]),t.exports=e},function(t,e,r){var i=r(1),a=r(20);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,".page-message{max-width:800px;margin:2rem auto;padding:1rem;background:lightgoldenrodyellow;border-radius:var(--radius)}.page-message--error{background:mistyrose}.page-message__error{margin-top:1rem;padding:1rem;background:#FFF;border-radius:var(--radius)}.page-message__error-text{font-family:Courier New, Courier, monospace}\n",""]),t.exports=e},function(t,e,r){var i=r(1),a=r(22);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,'.sortable-table{position:relative;width:100%;max-width:100%;min-height:200px;margin-bottom:40px;background-color:var(--white)}.sortable-table__table{width:100%}.sortable-table__row{position:relative;display:grid;grid:auto-flow / 12% 38% 20% 10% 10% 10%;text-decoration:none}.sortable-table__cell{padding:16px;font-size:16px;line-height:20px;color:var(--table-black);display:flex;align-items:center;border-bottom:1px solid var(--grey-light)}.sortable-table__cell:first-child{padding-left:32px}.sortable-table__cell:last-child{padding-right:32px}.sortable-table__cell--error{grid-column-start:1;grid-column-end:7}.sortable-table__thead{display:block;position:sticky;z-index:3;top:0;background-color:var(--white)}.sortable-table__header .sortable-table__cell{min-width:120px;color:var(--grey-light)}.sortable-table__header .sortable-table__cell[data-sortable]{cursor:pointer}.sortable-table__cell--quantity,.sortable-table__cell--price{justify-content:flex-end}.sortable-table__cell--disabled{opacity:.5}.sortable-table__cell[data-sort-direction]::after{content:"";display:block;width:0;height:0;margin-top:.25em;margin-left:.25em;border:5px solid;border-color:currentColor transparent}.sortable-table__cell[data-sort-direction="asc"]::after{border-top:none}.sortable-table__cell[data-sort-direction="desc"]::after{border-bottom:none}.sortable-table__cell--sorter:hover{cursor:pointer;color:var(--grey)}.sortable-table__image-wrapper{position:relative}.sortable-table__image{display:block;height:40px;width:100%;max-width:100%;min-width:40px;object-fit:contain;padding:4px;border:1px solid var(--grey-light);border-radius:2px}.sortable-table__preview{position:absolute;z-index:2;top:0;left:0;width:100%;height:100%;opacity:0;padding:.25em;background-origin:content-box;background-color:var(--white);background-size:contain;background-repeat:no-repeat;background-position:50% 50%;border:1px solid var(--grey-light);transition:all .25s}.sortable-table__preview:hover{width:300%;height:300%;opacity:1}.sortable-table__link{position:absolute;top:0;right:0;bottom:0;left:0}.sortable-table__category{position:relative;cursor:pointer}.sortable-table__tooltip-category{color:var(--grey)}\n',""]),t.exports=e},function(t,e,r){var i=r(1),a=r(24);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){var i=r(2),a=r(4),n=r(7);e=i(!1);var s=a(n);e.push([t.i,'.draggable-list{position:relative}.draggable-list__item{display:flex;align-items:center;cursor:grab}.draggable-list__item::before{content:"";display:block;height:18px;width:11px;margin-right:1rem;background:url('+s+") 50% 50% no-repeat;opacity:.5}.draggable-list .draggable-list__item--placeholder{background-color:var(--grey-light)}.draggable-list .draggable-list__item--placeholder::before{background:none}.draggable-list__item--dragged{position:absolute;left:0;right:0;background:var(--white);box-shadow:0 0 1rem rgba(0,0,0,0.35);cursor:grabbing}.draggable-list__item--dragged::before{opacity:1}\n",""]),t.exports=e},function(t,e,r){var i={"./categories/index.js":26,"./dashboard/index.js":29,"./error404/index.js":30,"./products/edit/index.js":37,"./products/index.js":33};function a(t){return n(t).then(r)}function n(t){return Promise.resolve().then((function(){if(!r.o(i,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return i[t]}))}a.keys=function(){return Object.keys(i)},a.resolve=n,a.id=25,t.exports=a},function(t,e,r){"use strict";r.r(e);var i=r(0),a=r(3);r(27);const n="categories__list",s="categories__list--topcategories",o="categories__list--subcategories",l="categories__item",c="categories__item--topcategory",d="categories__item--subcategory",h="categories__item--open",u="categories__toggler",p="categories__counter";e.default=class{constructor(){this.apiUrl="http://localhost:8080",this.fetchUrl=`${this.apiUrl}/api/rest/categories?_sort=weight&_refs=subcategory`,this.listClick=this.listClick.bind(this)}async render(){const{categories:t,message:e}=await this.loadData(),r='<header class="page-content__header">\n        <h1 class="page-content__title">Dashboard/Categories</h1>\n      </header>';if(e)return Object(i.a)(`<div class="page-content">\n        ${r}\n\n        ${e.elem.outerHTML}\n      </div>\n      `);const a=this.createList(t);return this.elem=Object(i.a)(`<div class="page-content">\n      ${r}\n\n      <section class="page-section categories">\n        <h2 class="page-section__title">Categories</h2>\n\n        ${a}\n      </section>\n    </div>`),this.addEvents(),this.elem}async loadData(){try{return{categories:await Object(i.c)(this.fetchUrl)}}catch(t){return{message:new a.a({error:t})}}}createList(t,e=!1){let r="",i=s,a=l,h="";if(e?(i=o,a+=` ${d}`,h='is="draggable-list"'):a+=` ${c}`,0===t.length)return"";for(const i of t){let t="",n=i.title;const s=i.subcategories;let o="";if(e){const t=this.getPlural(i.count,["product","products"]);o=`<span class="${p}">${t}</span>`}s&&(n=` <button class="${u}">${i.title}</button>`,t=this.createList(s,!0)),r+=`<li class="${a}">\n        ${n}\n        ${o}\n        ${t}\n      </li>`}return`<ul\n      class="${n} ${i}" ${h}\n      >\n      ${r}\n    </ul>`}addEvents(){this.elem.querySelector(`.${s}`).addEventListener("click",this.listClick)}listClick(){event.target.closest(`.${u}`)&&event.target.closest(`.${c}`).classList.toggle(h)}getPlural(t,e){let r=e[0];return 1!==t&&(r=e[1]),`${t} ${r}`}}},function(t,e,r){var i=r(1),a=r(28);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,'.categories__list{width:100%;list-style-type:none;margin:0;padding:0}.categories__list--subcategories{display:none;margin-top:.5rem;margin-bottom:1rem}.categories__item{border-radius:var(--radius);background:var(--white);border:1px solid var(--grey-light)}.categories__item--topcategory{margin:1rem}.categories__item--topcategory+.categories__item--topcategory{margin-top:1rem}.categories__item--subcategory{display:flex;align-items:center;margin:0 1rem 0 2rem;padding:1rem}.categories__item--subcategory+.categories__item--subcategory{margin-top:.5rem}.categories__item--open{background:var(--grey-extra-light);border:1px solid var(--grey-light)}.categories__item--open .categories__list--subcategories{display:block}.categories__counter{margin-left:auto;color:var(--grey)}.categories__toggler{display:flex;align-items:center;width:100%;border:none;padding:1rem;text-align:left;cursor:pointer}.categories__toggler::before{content:"";display:block;width:0;height:0;margin-right:.5rem;border:.5rem solid;border-bottom:0;border-color:var(--grey-light) transparent;transform:rotate(-90deg);transition:transform .25s}.categories__item--open .categories__toggler::before{transform:rotate(0deg)}\n',""]),t.exports=e},function(t,e,r){"use strict";r.r(e);var i=r(0);const a=new Date;a.setMonth(a.getMonth()-1);const n=new Date,s=a.toISOString(),o=n.toISOString();e.default=class{async render(){return Object(i.a)(`<div class="page-content">\n      <header class="page-content__header">\n        <h1 class="page-content__title">Dashboard</h1>\n\n        <range-picker\n          data-from="${s}"\n          data-to="${o}"\n        ></range-picker>\n      </header>\n\n        <section class="page-section page-section--column-charts">\n          <column-chart\n            data-type="orders"\n            data-from="${s}"\n            data-to="${o}"\n          ></column-chart>\n\n          <column-chart\n            data-type="sales"\n            data-is-money="true"\n            data-from="${s}"\n            data-to="${o}"\n          ></column-chart>\n\n          <column-chart\n            data-type="customers"\n            data-from="${s}"\n            data-to="${o}"\n          ></column-chart>\n        </section>\n\n        <section class="page-section">\n          <h2 class="page-section__title">Bestsellers</h2>\n\n        <sortable-table\n          data-url="/api/dashboard/bestsellers?_embed=subcategory.category",\n          data-is-dynamic="0"\n          data-fields-list="['images', 'title', 'subcategory', 'quantity', 'price', 'status']"\n          data-order-field='title',\n          data-order-direction="1"\n          data-from="${s}"\n          data-to="${o}"\n          ></sortable-table>\n        </section>\n      </div>`)}}},function(t,e,r){"use strict";r.r(e);var i=r(0);e.default=class{async render(){return Object(i.a)('<div class="404">\n        <h1>Page not found</h1>\n        <p>No such page</p>\n      </div>')}}},function(t,e,r){var i=r(1),a=r(32);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){var i=r(2),a=r(4),n=r(8);e=i(!1);var s=a(n);e.push([t.i,".product-form{margin-bottom:2rem}.product-form__list,.product-form__footer{display:grid;grid-template-columns:repeat(3, 1fr);grid-gap:1rem}.product-form__list{margin:0;padding:0;list-style-type:none}.product-form__item{grid-column:1 / span 2}.product-form__item--full{grid-column:1 / span 3}.product-form__item--tiny{grid-column:1 / span 1}.product-form__item--follow{grid-column-start:auto}.product-form__item+.product-form__item{margin-top:1rem}.product-form__link{position:absolute;top:0;right:0;bottom:0;left:0}.product-form__input--textarea{min-height:200px}.product-form__images-list{margin:0;padding:0;list-style-type:none}.product-form__images-item{display:flex;align-items:center;padding:.5rem;background:var(--grey-extra-light);border-radius:var(--radius)}.product-form__images-item+.product-form__images-item{margin-top:.5rem}.product-form__image-wrapper{position:relative}.product-form__image{display:block;width:100%;max-width:80px;min-width:40px;height:40px;object-fit:contain;padding:4px;border:1px solid var(--grey-light);background:var(--white);border-radius:var(--radius)}.product-form__preview{position:absolute;z-index:2;top:0;left:0;width:100%;height:100%;opacity:0;padding:.25em;background-origin:content-box;background-color:var(--white);background-size:contain;background-repeat:no-repeat;background-position:50% 50%;border:1px solid var(--grey-light);transition:all .25s}.product-form__preview:hover{width:300%;height:300%;transform:translateX(-35%) translateY(-35%);opacity:1}.product-form__image-source{margin-left:1rem}.product-form__image-remove{width:3rem;align-self:stretch;margin-left:auto;background:url("+s+") 50% 50% no-repeat;font-size:0;border:none}.product-form__footer{margin-top:2rem}\n",""]),t.exports=e},function(t,e,r){"use strict";r.r(e);var i=r(0);e.default=class{async render(){return Object(i.a)('<div class="page-content">\n      <header class="page-content__header">\n        <h1 class="page-content__title">Dashboard/Products</h1>\n      </header>\n\n      <section class="page-section">\n        <h2 class="page-section__title">Products</h2>\n\n        <sortable-table\n          data-url="/api/rest/products?_embed=subcategory.category",\n          data-is-dynamic="1"\n          data-fields-list="[\'images\', \'title\', \'subcategory\', \'quantity\', \'price\', \'status\']"\n          data-order-field=\'title\',\n          data-order-direction="1"\n          ></sortable-table>\n      </section>\n    </div>')}}},function(t,e,r){var i=r(1),a=r(35);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var n={insert:"head",singleton:!1},s=(i(t.i,a,n),a.locals?a.locals:{});t.exports=s},function(t,e,r){(e=r(2)(!1)).push([t.i,':root{--blue: #109CF1;--dark-blue: #334D6E;--light-blue: #CFEBFC;--middle-blue: #9FD7F9;--yellow: #FFB946;--red: #F7685B;--green: #2ED47A;--purple: #885AF8;--black: #192A3E;--table-black: #323C47;--table-grey: #707683;--grey: #90A0B7;--grey-light: #C2CFE0;--grey-extra-light: #EFF1F4;--grey-skeleton: #F5F6F8;--white: #FFF;--radius: 4px}*{box-sizing:border-box}HTML{font-size:16px}BODY{display:flex;min-height:100vh;margin:0;background:#FFF;font:1rem/1.4 Trebuchet MS, Verdana, sans-serif;color:#000}H1,H2,H3,H4{margin-top:0;margin-bottom:.5em;font-weight:normal}H1{font-size:2.75rem}A,A:visited,A:hover{color:inherit}A:hover{text-decoration:none}BUTTON,INPUT,TEXTAREA,SELECT{display:block;padding:.5rem;background:none;border-radius:var(--radius);font:inherit}INPUT,TEXTAREA,SELECT{width:100%;border:1px solid var(--grey-light)}.page-layout{display:flex;width:100%}.spinner{display:none;position:absolute;bottom:2rem;left:0;right:0;width:4rem;height:4rem;margin:auto;background:var(--white);box-shadow:0 0 .5rem currentColor;border-radius:50%;color:var(--grey-light)}[data-loading="1"] .spinner{display:block}.spinner::before,.spinner::after{content:"";position:absolute;top:0;right:0;bottom:0;left:0;margin:auto;box-sizing:border-box;border:3px solid;border-color:currentColor transparent;border-radius:50%;animation:rotate 2.1s linear infinite}.spinner::before{width:2.25rem;height:2.25rem}.spinner::after{width:1.25rem;height:1.25rem;animation-duration:1.3s;animation-direction:reverse}@keyframes rotate{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}\n',""]),t.exports=e},function(t,e,r){"use strict";r.r(e);var i=r(0);r(11);class a extends HTMLElement{connectedCallback(){this.append(this.render()),this.classList.add("page")}render(){return Object(i.a)('<div class="page-container">\n      <aside class="page-aside">\n        <nav>\n          <ul>\n            <li>\n              <a href="./">Dashboard</a>\n            </li>\n            <li>\n              <a href="./products">Products</a>\n            </li>\n            <li>\n              <a href="./categories">Categories</a>\n            </li>\n          </ul>\n        </nav>\n      </aside>\n\n      <main class="page-main" id="content">\n        \x3c!-- main content will be here --\x3e\n      </main>\n    </div>')}}var n="tooltips-container",s="tooltips-container--dimmed",o="tooltip";r(13);class l{constructor({elem:t,dimSiblings:e}){this.elem=t,this.elem.classList.add(n),this.dimSiblings=e,this.tooltip=Object(i.a)(`<div class="${o}"></div>`),this.elem.append(this.tooltip),this.listMouseMove=this.listMouseMove.bind(this),this.listMouseOut=this.listMouseOut.bind(this),this.elem.addEventListener("mousemove",this.listMouseMove),this.elem.addEventListener("mouseleave",this.listMouseOut)}listMouseMove(){if(!event.target.dataset.tooltipContent)return void this.hideTooltip();const{tooltipContent:t}=event.target.dataset;this.tooltip.innerHTML=t,this.tooltip.dataset.visible=1,this.elemCoords=this.elem.getBoundingClientRect();const e={x:event.clientX-this.elemCoords.x,y:event.clientY-this.elemCoords.y};this.tooltip.style=`transform: translate(${e.x}px, ${e.y}px)`,this.tooltipCoords=this.tooltip.getBoundingClientRect();const r=this.tooltipCoords.right-document.documentElement.clientWidth;r>0&&(e.x-=r,this.tooltip.style=`transform: translate(${e.x}px, ${e.y}px)`),this.dimSiblings&&this.elem.classList.add(s)}listMouseOut(){event.target.dataset.tooltipContent||this.hideTooltip()}hideTooltip(){this.tooltip.dataset.visible=0,this.elem.classList.remove(s)}}var c="column-chart",d="column-chart__content",h="column-chart__list",u="column-chart__tooltip-date",p="column-chart__tooltip-quantity",g="column-chart__error";var m={header:`<header class="${"column-chart__header"}">\n  <h3 class="${"column-chart__title"}">{title}</h3>\n  <div class="${"column-chart__total"}">{total}</div>\n</header>`,chartItem:`<li\n  class="${"column-chart__item"}"\n  data-tooltip-content="{tootipContent}"\n  style="height: {height}"></li>`};r(15);class f extends HTMLElement{constructor(){super(),this.elem=document.createElement("div"),this.apiUrl="http://localhost:8080",this.changeDate=this.changeDate.bind(this)}async connectedCallback(){const{type:t,isMoney:e,from:r,to:a}=this.dataset;this.dates={from:new Date(r),to:new Date(a)},this.type=t,this.formatTotal=e?i.f:null,this.classList.add(c,`${c}--${t}`),this.elem.classList.add(d),this.title=`Total ${t}`,this.url=this.getUrl(),await this.render(),this.append(this.elem),document.addEventListener("changeDate",this.changeDate)}getUrl(){return`${this.apiUrl}/api/dashboard/${this.type}?from=${this.dates.from}&to=${this.dates.to}`}async getData(){try{return{data:await Object(i.c)(this.url)}}catch(t){return{error:t}}}async render(){const{data:t,error:e}=await this.getData();if(this.data=t,e)return void this.elem.insertAdjacentHTML("beforeEnd",`<div class="${g}">${e}</div>`);this.values=Object.values(this.data),0===this.values.length&&this.values.push("No data");const r=this.getHeaderStr(),i=this.getListStr();this.elem.insertAdjacentHTML("beforeEnd",r+i),this.addActions()}getHeaderStr(){return this.total=this.values.reduce((t,e)=>t+e,0),this.formatTotal&&(this.total=this.formatTotal(this.total)),Object(i.d)({tmpl:m.header,data:this})}getListStr(){const t=Math.max(...this.values);let e="";for(const r in this.data){const a=Object(i.e)(r);let n=this.data[r];const s=`${(n/t*100).toFixed(2)}%`;this.formatTotal&&(n=this.formatTotal(n));const o=`<small class="${u}">${a}</small><div class="${p}">${n}</div>`;e+=Object(i.d)({tmpl:m.chartItem,data:{...this,height:s,tootipContent:Object(i.b)(o)}})}return`<ul class="${h}">${e}</ul>`}addActions(){this.tooltips=new l({elem:this.elem,dimSiblings:!0})}async changeDate(t){if(!t.detail||!t.detail.dates)return;const{from:e,to:r}=t.detail.dates;this.dates={from:e,to:r},this.url=this.getUrl(),this.elem.innerHTML="",await this.render(),this.append(this.elem)}}var b="rangepicker",_="rangepicker--open",v="rangepicker__input",y="rangepicker__from",x="rangepicker__to",w="rangepicker__selector",k="rangepicker__selector-control",$="rangepicker__calendars",E="rangepicker__cell",L="rangepicker__selected-from",D="rangepicker__selected-between",T="rangepicker__selected-to";var C={input:`<button class="${v}" data-elem="input" type="button">\n  <span\n    class="${y}"\n    data-elem="from">{from}</span> -\n  <span\n    class="${x}"\n    data-elem="to"\n    >{to}</span>\n</button>`,selector:`\n<div class="${w}" data-elem="selector">\n  <div class="${"rangepicker__selector-arrow"}"></div>\n  <button\n    type="button"\n    class="${k} ${k}--left"\n    data-direction="prev"\n  ></button>\n  <button\n    type="button"\n    class="${k} ${k}--right"\n    data-direction="next"\n  ></button>\n  <div class="${$}"></div>\n</div>\n`,calendar:`\n<div class="${"rangepicker__calendar"}">\n  <div class="${"rangepicker__month-indicator"}">\n    <time datetime="{month}">{month}</time>\n  </div>\n  <div class="${"rangepicker__day-of-week"}">\n    {weekdays}\n  </div>\n  <div class="${"rangepicker__date-grid"}">\n    {days}\n  </div>\n</div>\n`,day:`\n<button type="button" class="${E} {mod}" data-value="{dateTime}" style="{style}">{dateNum}</button>\n`};r(17),r(6),r(5);class M extends HTMLElement{constructor(){super(),this.togglePicker=this.togglePicker.bind(this),this.selectorOnClick=this.selectorOnClick.bind(this),this.bodyOnClick=this.bodyOnClick.bind(this),this.updateRange=this.updateRange.bind(this),this.isOpened=!1,this.elem=this,this.elem.classList.add("rangepicker")}async connectedCallback(){const{from:t,to:e}=this.dataset;this.dates={from:new Date(t),to:new Date(e)},this.monthes=this.getDisplayedMonthes(),this.newDates=[],this.addInput(),document.addEventListener("changeDate",this.updateRange)}getDisplayedMonthes(){const t=new Date(this.dates.from);let e=t.getMonth();t.setDate(1);const r=new Date(t);return r.setMonth(++e),[t,r]}addInput(){const t={from:this.dates.from.toLocaleDateString(),to:this.dates.to.toLocaleDateString()},e=C.input,r=Object(i.d)({tmpl:e,data:t});this.elem.insertAdjacentHTML("afterBegin",r),this.input=this.elem.querySelector(`.${v}`),this.inputFrom=this.input.querySelector(`.${y}`),this.inputTo=this.input.querySelector(`.${x}`),this.input.addEventListener("pointerdown",this.togglePicker),document.body.addEventListener("pointerdown",this.bodyOnClick,{capture:!0})}bodyOnClick(){!event.target.closest(`.${b}`)&&this.isOpened&&this.hidePicker()}updateInput(){this.inputFrom.innerHTML=this.dates.from.toLocaleDateString(),this.inputTo.innerHTML=this.dates.to.toLocaleDateString()}updateRange(){this.monthes=this.getDisplayedMonthes(),this.newDates=[],this.updateInput(),this.hidePicker()}togglePicker(){this.isOpened?this.hidePicker():(this.showPicker(),this.isOpened=!0)}showPicker(){this.selector?this.calendars.innerHTML="":(this.addSelector(),this.selector=this.elem.querySelector(`.${w}`),this.calendars=this.elem.querySelector(`.${$}`),this.selector.addEventListener("click",this.selectorOnClick)),this.addCalendars(),this.elem.classList.add(_)}hidePicker(){this.elem.classList.remove(_),this.isOpened=!1,this.newDates=[]}addSelector(){const t=C.selector;this.elem.insertAdjacentHTML("beforeEnd",t)}selectorOnClick(){const{dataset:t}=event.target;t.value?this.setDay(event.target):t.direction&&this.moveMonth(t.direction)}setDay(t){const e=t.dataset.value;if(0===this.newDates.length)return this.newDates.push(new Date(e)),void this.updateSelected(t);this.newDates.push(new Date(e)),this.newDates.sort((t,e)=>t-e),this.dates={from:this.newDates[0],to:this.newDates[1]},document.dispatchEvent(new CustomEvent("changeDate",{detail:{dates:{from:this.dates.from.toISOString(),to:this.dates.to.toISOString()}}}))}moveMonth(t){let e=1;"prev"===t&&(e=-1),this.monthes.forEach(t=>{t.setMonth(t.getMonth()+e)}),this.updateCalendars()}addCalendars(){this.monthes.forEach(t=>{this.calendars.insertAdjacentHTML("beforeEnd",this.getCalendar(t))})}updateCalendars(){this.calendars.innerHTML="",this.addCalendars()}updateSelected(t){const e=this.elem.querySelectorAll(`.${E}`),r=[D,L,T];e.forEach(t=>{t.classList.remove(...r)}),t.classList.add(L)}getCalendar(t){const e={month:t.toLocaleString("default",{month:"long"}),weekdays:Object(i.g)("div"),days:this.getCells(t)},r=C.calendar;return Object(i.d)({tmpl:r,data:e})}getCells(t){const e=C.day,r=new Date(t),a=r.getMonth();let n=1,s="";for(;r.getMonth()===a;){const t=this.getCellStartStyle(r),a=this.getCellMod(r),o={dateTime:r.toISOString(),dateNum:r.getDate(),style:t,mod:a};s+=Object(i.d)({tmpl:e,data:o}),r.setDate(++n)}return s}getCellStartStyle(t){let e="";if(t.getDate()>1)return e;let r=t.getDay();return 0===r&&(r=7),e=`grid-column-start: ${r}`,e}getCellMod(t){let e="";if(this.newDates.length>0)return e;const r=t.valueOf(),i=this.dates.from.valueOf(),a=this.dates.to.valueOf();return r>i&&r<a?e=D:r===i?e=L:r===a&&(e=T),e}}var O="sortable-table",j="sortable-table__table",S="sortable-table__thead",H="sortable-table__header",P="sortable-table__row",F="sortable-table__cell",A="sortable-table__cell--error",U="sortable-table__cell--sorter",N="sortable-table__image",B="sortable-table__image-wrapper",R="sortable-table__preview",z="sortable-table__link",q="sortable-table__category",I="sortable-table__tooltip-category",Y="sortable-table__tooltip-subcategory",W={0:"Disabled",1:"Enabled"},X={images:{title:"Image",render({images:t}){if(!t||!t[0].url)return"";const e=t[0].url;return`<div class="${B}">\n      <img src="${e}" class="${N}">\n      <span style="background-image: url(${e})" class="${R}"><span>\n      <div>`},compare:null},title:{title:"Name",render:({title:t,id:e})=>`\n      ${t}\n      <a class="${z}" href="/products/${e}"></a>\n      `,compare:(t,e)=>t.title.localeCompare(e.title)},subcategory:{title:"Category",render({subcategory:t}){const e=t.category,r=`<span class="${I}">${e.title}</span>/<span class="${Y}">${t.title}</span>`;return`<span class="${q}" data-tooltip-content="${Object(i.b)(r)}">${t.title}</span>`},compare(t,e){const r=t.subcategory.title,i=e.subcategory.title;return r.localeCompare(i)}},quantity:{title:"Quantity",render:({quantity:t})=>t,compare:(t,e)=>t.quantity-e.quantity},price:{title:"Price",render:({price:t})=>Object(i.f)(t),compare:(t,e)=>t.price-e.price},status:{title:"Status",render:({status:t})=>W[t],compare:(t,e)=>t.status-e.status}},J={0:"desc",1:"asc"};const Q=t=>J[+t];var V=r(3);r(21);class G extends HTMLElement{constructor(){super(),this.sorting={current:null,isAsc:!0},this.page={items:20,current:0,isDataEnded:!1},this.apiUrl="http://localhost:8080",this.changeDate=this.changeDate.bind(this)}async connectedCallback(){const{url:t,fieldsList:e,orderField:r,orderDirection:a,isDynamic:n,from:s,to:o}=this.dataset;this.dates={from:s,to:o},this.url=this.apiUrl+t,this.fieldsList=JSON.parse(e.replace(/'/g,'"')),this.isDynamic=+n,this.order={field:r,direction:a},this.initTable=this.initTable.bind(this),this.isLoading=!1,this.order&&void 0!==this.order.direction&&(this.sorting.isAsc=this.order.direction),this.fetchUrl=this.getFetchUrl(),this.onBodyScrollThrottle=Object(i.h)(this.onBodyScroll,this,500),this.initTable(),document.addEventListener("changeDate",this.changeDate)}async loadData(){this.isLoading=!0,this.table.dataset.loading=1;try{const t=await Object(i.c)(this.fetchUrl);return this.isLoading=!1,this.table.dataset.loading=0,t}catch(t){const e=new V.a({error:t});this.table.dataset.loading=0,this.tBody.insertAdjacentHTML("beforeEnd",`<tr class="${P}"><td class="${A}">${e.elem.outerHTML}</tr>`)}}initTable(){this.createLayout(),this.addElemHeader(),this.addTableEvents(),this.fillTBody()}async fillTBody(){this.page.isDataEnded||(this.tableRows=await this.loadData(),this.tableRows.length<this.page.items&&(this.page.isDataEnded=!0,0===this.tableRows.length)||(!this.isDynamic&&this.order&&this.order.field?this.sortRows(this.order.field):this.renderTBody()))}getFetchUrl(){const t={start:this.page.current*this.page.items,end:(this.page.current+1)*this.page.items,sort:this.order.field,order:Q(this.sorting.isAsc)};this.dates&&this.dates.from&&(t.from=this.dates.from,t.to=this.dates.to);let e="";for(const r in t){let i="_";"from"!==r&&"to"!==r||(i=""),e+=`&${i}${r}=${t[r]}`}return this.url+e}createLayout(){this.classList.add(O),this.table=document.createElement("table"),this.table.classList.add(j),this.tBody=document.createElement("tbody"),this.table.append(this.tBody),this.table.insertAdjacentHTML("beforeEnd",`<tfoot><tr><td colspan="${this.fieldsList.length}"><div class="spinner"></div></td></tr></tfoot>`),this.append(this.table)}addElemHeader(){let t="";this.fieldsList.forEach(e=>{let r=F;const i={sorter:"",sortDirection:""};if(X[e].compare&&(r+=` ${U}`,i.sorter='data-sorter="1"'),e===this.order.field){const t=Q(this.sorting.isAsc);i.sortDirection=`data-sort-direction="${t}"`}t+=`<th class="${r}"\n        data-name="${e}"\n        ${i.sorter}\n        ${i.sortDirection}\n        >${X[e].title}</th>`});const e=`<thead class="${S}"><tr class="${H} ${P}">\n      ${t}\n    </tr></thead>`;this.table.insertAdjacentHTML("afterBegin",e),this.sorting.current=this.table.querySelector("[data-sort-direction]")}sorterOnClick(t){const{name:e}=t.dataset;t.dataset.sortDirection?this.sorting.isAsc=!this.sorting.isAsc:(this.sorting.current&&delete this.sorting.current.dataset.sortDirection,this.sorting.isAsc=!0,this.sorting.current=t),t.dataset.sortDirection=Q(this.sorting.isAsc),this.isDynamic?this.sortRowsDynamic(e):this.sortRows(e)}sortRows(t){this.tableRows.sort(X[t].compare),this.sorting.isAsc||this.tableRows.reverse(),this.tBody.innerHTML="",this.renderTBody()}sortRowsDynamic(t){this.order.field=t,this.page.current=0,this.page.isDataEnded=!1,this.fetchUrl=this.getFetchUrl(),this.tBody.innerHTML="",this.fillTBody()}addTableEvents(){this.table.addEventListener("click",this),window.addEventListener("scroll",this.onBodyScrollThrottle),this.tooltips=new l({elem:this})}handleEvent(){event.target.dataset.sorter&&this.sorterOnClick(event.target)}onBodyScroll(){if(this.isLoading)return;document.documentElement.getBoundingClientRect().bottom-window.innerHeight<100&&(this.page.current++,this.fetchUrl=this.getFetchUrl(),this.fillTBody())}renderTBody(){this.pageYOffset=window.pageYOffset,this.tableRows.forEach(t=>{let e="";const{status:r}=t;this.fieldsList.forEach(i=>{const a=[F,`${F}--${i}`,`${F}--${W[r].toLowerCase()}`],n=(0,X[i].render)(t);n&&(e+=`<td class="${a.join(" ")}">${n}</td>`)}),this.tBody.insertAdjacentHTML("beforeEnd",`<tr class="${P}">${e}</tr>`)}),this.pageYOffset&&window.scrollTo(0,this.pageYOffset)}async changeDate(t){t.detail&&t.detail.dates&&(this.dates=t.detail.dates,this.fetchUrl=this.getFetchUrl(),this.tBody.innerHTML="",this.fillTBody())}}r(23),r(7);const K="draggable-list",Z="draggable-list__item",tt="draggable-list__item--dragged",et="draggable-list__item--placeholder";class rt extends HTMLUListElement{constructor(){super(),this.startDrag=this.startDrag.bind(this),this.stopDrag=this.stopDrag.bind(this),this.move=this.move.bind(this),this.setPlaceholderHeight=this.setPlaceholderHeight.bind(this)}async connectedCallback(){this.classList.add(K),this.items=this.querySelectorAll("li"),this.placeholder=this.createPlaceholder(),this.addClassToItems(),this.addEventListener("pointerdown",this.startDrag),this.addEventListener("pointerdown",this.setPlaceholderHeight,{once:!0})}startDrag(t){if(this.currentElem=t.target.closest(".draggable-list__item"),!this.currentElem)return;this.currentElem.replaceWith(this.placeholder),this.currentElem.classList.add(tt),this.append(this.currentElem);const{top:e}=this.getBoundingClientRect();this.top=e,this.elemHalf=this.currentElem.offsetHeight/2;const r=t.clientY-this.top-this.elemHalf;this.currentElem.style.top=`${r}px`,this.addEventListener("pointermove",this.move),this.addEventListener("pointerup",this.stopDrag)}move(t){const e=t.clientY-this.top-this.elemHalf;this.currentElem.style.top=`${e}px`;for(const t of this.items){if(t.classList.contains(tt))continue;const r=t.offsetTop,i=r+t.offsetHeight,a=r+t.offsetHeight/2,n=e+this.elemHalf;if(n>r&&n<i){n<=a?t.after(this.placeholder):t.before(this.placeholder);break}}}stopDrag(){this.placeholder.replaceWith(this.currentElem),this.currentElem.classList.remove(tt),this.currentElem.style.top="",this.removeEventListener("pointermove",this.move),this.removeEventListener("pointerup",this.stopDrag)}createPlaceholder(){const t=this.items[0].cloneNode(!0);return t.classList.add(et,Z),t.innerHTML="",t}setPlaceholderHeight(){const t=this.items[0];this.placeholder.style.minHeight=`${t.offsetHeight}px`}addClassToItems(){this.items.forEach(t=>t.classList.add(Z))}}class it{constructor(){this.routes=[],this.documentClick=this.documentClick.bind(this),document.addEventListener("click",this.documentClick)}static instance(){return this._instance||(this._instance=new it),this._instance}addRoute(t,e){return this.routes.push({pattern:t,path:e}),this}setNotFoundPage(t){return this.notFoundPagePath=t,this}navigate(t){history.pushState(null,null,t),this.route()}async route(){const t=(e=window.location.pathname,console.log("path",e),decodeURI(e).replace(/^\/shop-admin-page/,"").replace(/^\/|\/$/,"").replace(/\?.*$/,"").replace(/#.*$/,""));var e;let r;console.log("strippedPath",t);for(const e of this.routes)if(r=t.match(e.pattern),r){this.page=await this.changePage(e.path,r);break}r||(this.page=await this.changePage(this.notFoundPagePath))}async changePage(t,e){this.page&&this.page.destroy&&this.page.destroy(),this.page=await async function(t,e){const{default:i}=await r(25)(`./${t}/index.js`),a=new i(e),n=await a.render(),s=document.getElementById("content");s.innerHTML="",s.append(n)}(t,e)}addListener(){window.addEventListener("popstate",()=>this.route()),this.route()}documentClick(t){const e=t.target.closest("a");if(!e)return;const r=e.getAttribute("href");console.log("href",r),t.preventDefault(),r&&(r.startsWith("/")||r.startsWith("./"))&&(t.preventDefault(),this.navigate(r))}}r(34);it.instance().addRoute(/^$/,"dashboard").addRoute(/^categories$/,"categories").addRoute(/^products\/([\S()-]+)/g,"products/edit").addRoute(/^products\/add$/,"products/edit").addRoute(/^products$/,"products").setNotFoundPage("error404").addListener(),window.customElements.define("page-layout",a),window.customElements.define("column-chart",f),window.customElements.define("range-picker",M),window.customElements.define("sortable-table",G),window.customElements.define("draggable-list",rt,{extends:"ul"})},function(t,e,r){"use strict";r.r(e);var i=r(0),a=r(3),n="product-form",s="product-form__list",o="product-form__item",l="product-form__item--tiny",c="product-form__item--full",d="product-form__label",h="product-form__input",u="product-form__images-list",p="product-form__images-item",g="product-form__image",m="product-form__image-wrapper",f="product-form__image-source",b="product-form__image-remove",_="product-form__preview",v="product-form__footer",y="product-form__submit";const x='<header class="page-content__header">\n  <h1 class="page-content__title">\n  <a href="/products">Products</a>\n  /Edit Product</h1>\n</header>',w=`<label class="${d}">\n  {fieldName}\n\n  <input\n    class="${h} ${"product-form__input--text"}"\n    type="text"\n    name="{id}"\n    value="{value}"/>\n</label>`,k=`<label class="${d}">\n  {fieldName}\n\n  <input\n    class="${h} ${"product-form__input--number"}"\n    type="number"\n    name="{id}"\n    value="{value}"/>\n</label>`,$=`<label class="${d}">\n  {fieldName}\n\n  <textarea\n    class="${h} ${"product-form__input--textarea"}"\n    name="{id}">{value}</textarea>\n</label>`,E=`<label class="${d}">\n  {fieldName}\n\n  <select\n    class="${h} ${"product-form__input--select"}"\n    name="{id}">\n    {options}\n  </select>\n</label>`;var L={0:"Disabled",1:"Enabled"};function D(t){const e=[];for(const r of t)for(const t of r.subcategories)e.push({value:t.id,text:`${r.title} > ${t.title}`});return e}function T(t,e){return t.map((t,r)=>{const i=t.value||r,a=t.text||t;return`<option value="${i}" ${i===e?"selected":""}>${a}</option>`}).join("")}var C={images:{render:({images:t})=>t?function(t){const e=t.map(t=>`<li class="${p}">\n        <div class="${m}">\n          <img src="${t.url}" class="${g}">\n          <span style="background-image: url(${t.url})" class="${_}"><span>\n        </div>\n        <span class="${f}">${t.source}</span>\n        <button type="button" class="${b}">Remove</button>\n      </li>`);return` + upload\n    <ul class="${u}" is="draggable-list">${e.join(" ")}</ul>`}(t):"",compare:null},title:{render({title:t}){const e={id:"title",fieldName:"Name",value:t};return Object(i.d)({tmpl:w,data:e})}},description:{render({description:t}){const e={id:"description",fieldName:"Description",value:t};return Object(i.d)({tmpl:$,data:e})}},subcategory:{render({categories:t,subcategory:e}){const r={id:"subcategory",fieldName:"Category",options:T(D(t),e)};return Object(i.d)({tmpl:E,data:r})}},quantity:{render({quantity:t}){const e={id:"quantity",fieldName:"Quantity",value:t};return Object(i.d)({tmpl:k,data:e})}},price:{render({price:t}){const e={id:"price",fieldName:"Price",value:t};return Object(i.d)({tmpl:k,data:e})}},discount:{render({discount:t}){const e={id:"discount",fieldName:"Discount",value:t};return Object(i.d)({tmpl:k,data:e})}},status:{render({status:t}){const e={id:"status",fieldName:"Status",value:t,options:T(Object.values(L),t)};return Object(i.d)({tmpl:E,data:e})}}},M=[{name:"title"},{name:"description",mods:[c]},{name:"images",mods:[c]},{name:"subcategory"},{name:"price",mods:[l]},{name:"discount",mods:[l,"product-form__item--follow"]},{name:"quantity",mods:[l]},{name:"status",mods:[l]}];r(8),r(31),e.default=class{constructor(t){this.id=t[0].replace("products/",""),t[0]||(this.id="3d-ochki-optoma-zd302"),this.apiUrl="http://localhost:8080",this.fetchProductUrl=this.apiUrl+`/api/rest/products?id=${this.id}`,this.fetchCategoriesUrl=this.apiUrl+"/api/rest/categories?_sort=weight&_refs=subcategory"}async render(){const{productData:t,categories:e,errorMessage:r}=await this.loadData();if(r)return Object(i.a)(`<div class="page-content">\n        ${x}\n\n        ${r.outerHTML}\n      </div>\n      `);const a=t[0],l=[];for(const{name:t,mods:r}of M)if(C[t]){let i=a;"subcategory"===t&&(i={...i,categories:e});const n=C[t].render(i);let s=[o];r&&(s=s.concat(r)),l.push(`<li class="${s.join(" ")}">${n}</li>`)}return Object(i.a)(`<div class="page-content">\n      ${x}\n\n      <form action="" class="${n}}">\n        <ul class="${s}">\n          ${l.join("\n")}\n        </ul>\n\n        <footer class="${v}">\n          <button class="${y}">Save</button>\n        </footer>\n      </form>\n    </div>`)}async loadData(){try{return{productData:await Object(i.c)(this.fetchProductUrl),categories:await Object(i.c)(this.fetchCategoriesUrl)}}catch(t){return{errorMessage:new a.a({error:t}).elem}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMvY3JlYXRlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9lc2NhcGVIVE1MLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2ZpbGxUZW1wbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9mb3JtYXREYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2Zvcm1hdFRvdGFsLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2dldFdlZWtEYXlzLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL3Rocm90dGxlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05vdGlmaWNhdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL25vdGlmaWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2ZldGNoSnNvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QYWdlTWVzc2FnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL2NhbGVuZGFyLWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL2Fycm93LWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RyYWdnYWJsZUxpc3QvZ3JhYi1pY29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC9pY29uLXRyYXNoLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RpZmljYXRpb24vc3R5bGVzLnNjc3M/ZGY5MiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RpZmljYXRpb24vc3R5bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGF5b3V0L3N0eWxlcy5zY3NzP2UyYzMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGF5b3V0L3N0eWxlcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2x0aXBzL3N0eWxlcy5zY3NzPzdjYzUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbHRpcHMvc3R5bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29sdW1uQ2hhcnQvc3R5bGVzLnNjc3M/YTIzMCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db2x1bW5DaGFydC9zdHlsZXMuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SYW5nZVBpY2tlci9zdHlsZXMuc2Nzcz83MTVhIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL3N0eWxlcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BhZ2VNZXNzYWdlL3N0eWxlcy5zY3NzPzExMzciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUGFnZU1lc3NhZ2Uvc3R5bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU29ydGFibGVUYWJsZS9zdHlsZXMuc2Nzcz9lOGM3Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvcnRhYmxlVGFibGUvc3R5bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRHJhZ2dhYmxlTGlzdC9zdHlsZXMuc2Nzcz85N2M3Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RyYWdnYWJsZUxpc3Qvc3R5bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzIGVhZ2VyIF5cXC5cXC8uKlxcL2luZGV4XFwuanMkIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL2NhdGVnb3JpZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL2NhdGVnb3JpZXMvc3R5bGVzLnNjc3M/YzAwNyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvY2F0ZWdvcmllcy9zdHlsZXMuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvZGFzaGJvYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9lcnJvcjQwNC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC9zdHlsZS5zY3NzP2QzMTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3Byb2R1Y3RzL2VkaXQvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zY3NzL3N0eWxlcy5zY3NzP2YzYzgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zY3NzL3N0eWxlcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xheW91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sdGlwcy9jbGFzc2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2x0aXBzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbHVtbkNoYXJ0L2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29sdW1uQ2hhcnQvdGVtcGxhdGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbHVtbkNoYXJ0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmFuZ2VQaWNrZXIvdGVtcGxhdGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhbmdlUGlja2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvcnRhYmxlVGFibGUvY2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3J0YWJsZVRhYmxlL3N0YXR1c1RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU29ydGFibGVUYWJsZS9maWVsZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU29ydGFibGVUYWJsZS9kaXJlY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvcnRhYmxlVGFibGUvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3J0YWJsZVRhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RyYWdnYWJsZUxpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9yZW5kZXJQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3Byb2R1Y3RzL2VkaXQvY2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC90ZW1wbGF0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3Byb2R1Y3RzL2VkaXQvc3RhdHVzVGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9wcm9kdWN0cy9lZGl0L2ZpZWxkcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC9maWVsZHNPcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcHJvZHVjdHMvZWRpdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImh0bWwiLCJ0ZW1wbGF0ZSIsImlubmVySFRNTCIsImNvbnRlbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImRpdiIsImVzY2FwZUhUTUwiLCJzdHJpbmciLCJyZXBsYWNlIiwiZmlsbFRlbXBsYXRlIiwidG1wbCIsImRhdGEiLCJtYXRjaCIsInN0ciIsInVuZGVmaW5lZCIsImZvcm1hdERhdGUiLCJkYXRhUGFydHMiLCJEYXRlIiwidG9EYXRlU3RyaW5nIiwic3BsaXQiLCJmb3JtYXRUb3RhbCIsIm51bSIsImZvcm1hdHRlZCIsInRhaWwiLCJnZXRXZWVrRGF5cyIsInRhZyIsImRhdGUiLCJ3ZWVrZGF5c1N0ciIsImNvdW50ZXIiLCJ0b0xvY2FsZVN0cmluZyIsIndlZWtkYXkiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInRocm90dGxlIiwiZnVuYyIsImNvbnRleHQiLCJ0aW1lb3V0IiwiYXJncyIsImlzV2FpdGluZyIsImlzRmlyc3RDYWxsIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzZXRUaW1lb3V0IiwiY2xzIiwiZWxlbSIsIndhcm5pbmciLCJlcnJvciIsIk5vdGlmaWNhdGlvbiIsIm1lc3NhZ2UiLCJjb250YWluZXIiLCJ0eXBlIiwidGhpcyIsImR1cmF0aW9uIiwiZ2V0RHVyYXRpb24iLCJjbGFzc05hbWVzIiwiZ2V0Q2xhc3NlcyIsImFkZEVsZW0iLCJpc0ZpbmlzaGVkIiwiY2xhc3NMaXN0IiwiYWRkIiwiZGF0YXNldCIsInN0YXRlIiwicHJlcGVuZCIsImhpZGVFbGVtIiwicGFyYW1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlIiwiY2xhc3NlcyIsInB1c2giLCJub3RpZkNvbnRhaW5lciIsImJvZHkiLCJhcHBlbmQiLCJub3RpZmljYXRpb25zIiwiYXN5bmMiLCJmZXRjaEpTT04iLCJ1cmwiLCJyZXNwb25zZSIsImZldGNoIiwiRmV0Y2hFcnJvciIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iLCJzdGF0dXMiLCJFcnJvciIsInN1cGVyIiwid2luZG93IiwiZXZlbnQiLCJyZWFzb24iLCJub3RpZmljYXRpb24iLCJvZmZzZXRUb3AiLCJmaWx0ZXIiLCJzaGlmdCIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJtb2R1bGVzVG9Eb20iLCJsaXN0Iiwib3B0aW9ucyIsImxlbmd0aCIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50Iiwiam9pbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJvYmoiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwiY29uY2F0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImJhc2UiLCJuZXdMaXN0IiwidG9TdHJpbmciLCJqIiwidXNlU291cmNlTWFwIiwibWFwIiwiaXRlbSIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwiYmFzZTY0Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiaWQiLCJfaSIsIlBhZ2VNZXNzYWdlIiwidGl0bGUiLCJ0ZXh0IiwiY2FsbGJhY2siLCJjYWxsYmFja1RleHQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJhcGkiLCJleHBvcnRlZCIsImxvY2FscyIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJ3ZWJwYWNrQXN5bmNDb250ZXh0IiwicmVxIiwid2VicGFja0FzeW5jQ29udGV4dFJlc29sdmUiLCJ0aGVuIiwiY29kZSIsImFwaVVybCIsImZldGNoVXJsIiwibGlzdENsaWNrIiwiY2F0ZWdvcmllcyIsImxvYWREYXRhIiwiaGVhZGVyIiwib3V0ZXJIVE1MIiwiY3JlYXRlTGlzdCIsImFkZEV2ZW50cyIsIml0ZW1zIiwiaXNTdWJjYXQiLCJpdGVtc1N0ciIsImxpc3RDbGFzcyIsIml0ZW1DbGFzcyIsImlzRHJhZ2dhYmxlQXR0ciIsInN1YkNhdHNMaXN0Iiwic3ViQ2F0cyIsInN1YmNhdGVnb3JpZXMiLCJjb3VudGVyVGV4dCIsImdldFBsdXJhbCIsImNvdW50IiwiY2xvc2VzdCIsInRvZ2dsZSIsInZhcmlhbnRzIiwidmFyaWFudCIsImZyb20iLCJzZXRNb250aCIsImdldE1vbnRoIiwidG8iLCJkYXRlcyIsInRvSVNPU3RyaW5nIiwiSFRNTEVsZW1lbnQiLCJyZW5kZXIiLCJkaW1TaWJsaW5ncyIsInRvb2x0aXAiLCJsaXN0TW91c2VNb3ZlIiwibGlzdE1vdXNlT3V0IiwidG9vbHRpcENvbnRlbnQiLCJoaWRlVG9vbHRpcCIsInZpc2libGUiLCJlbGVtQ29vcmRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY29vcmRzIiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsInRvb2x0aXBDb29yZHMiLCJoaWRkZW5CeVdpbmRvdyIsInJpZ2h0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjaGFydEl0ZW0iLCJjaGFuZ2VEYXRlIiwiaXNNb25leSIsImdldFVybCIsImdldERhdGEiLCJ2YWx1ZXMiLCJoZWFkZXJTdHIiLCJnZXRIZWFkZXJTdHIiLCJsaXN0U3RyIiwiZ2V0TGlzdFN0ciIsImFkZEFjdGlvbnMiLCJ0b3RhbCIsInJlZHVjZSIsInByZXYiLCJjdXJyZW50IiwidGVtcGxhdGVzIiwibWF4IiwiTWF0aCIsImNoYXJ0U3RyIiwiaGVpZ2h0IiwidG9GaXhlZCIsInRvb3RpcENvbnRlbnQiLCJ0b29sdGlwcyIsImRldGFpbCIsImlucHV0Iiwic2VsZWN0b3IiLCJjYWxlbmRhciIsImRheSIsInRvZ2dsZVBpY2tlciIsInNlbGVjdG9yT25DbGljayIsImJvZHlPbkNsaWNrIiwidXBkYXRlUmFuZ2UiLCJpc09wZW5lZCIsIm1vbnRoZXMiLCJnZXREaXNwbGF5ZWRNb250aGVzIiwibmV3RGF0ZXMiLCJhZGRJbnB1dCIsImN1cnJlbnRNb250aCIsIm1vbnRoIiwibmV4dE1vbnRoIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiaW5wdXRTdHIiLCJpbnB1dEZyb20iLCJpbnB1dFRvIiwiY2FwdHVyZSIsImhpZGVQaWNrZXIiLCJ1cGRhdGVJbnB1dCIsInNob3dQaWNrZXIiLCJjYWxlbmRhcnMiLCJhZGRTZWxlY3RvciIsImFkZENhbGVuZGFycyIsInNlbGVjdG9yU3RyIiwic2V0RGF5IiwiZGlyZWN0aW9uIiwibW92ZU1vbnRoIiwidXBkYXRlU2VsZWN0ZWQiLCJzb3J0IiwiYSIsImIiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJzdGVwIiwidXBkYXRlQ2FsZW5kYXJzIiwiZ2V0Q2FsZW5kYXIiLCJjZWxscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjZWxsIiwid2Vla2RheXMiLCJkYXlzIiwiZ2V0Q2VsbHMiLCJjdXJyZW50RGF0ZSIsImN1cnJlbnREYXkiLCJkYXlzU3RyIiwiZ2V0Q2VsbFN0YXJ0U3R5bGUiLCJtb2QiLCJnZXRDZWxsTW9kIiwiZGF0ZVRpbWUiLCJkYXRlTnVtIiwid2Vla2RheU51bSIsImdldERheSIsImRhdGVNcyIsInZhbHVlT2YiLCJkYXRlRnJvbU1zIiwiZGF0ZVRvTXMiLCIwIiwiMSIsImltYWdlcyIsInNyYyIsImNvbXBhcmUiLCJsb2NhbGVDb21wYXJlIiwic3ViY2F0ZWdvcnkiLCJjYXRlZ29yeSIsImFDYXROYW1lIiwiYkNhdE5hbWUiLCJxdWFudGl0eSIsInByaWNlIiwiZ2V0RGlyZWN0aW9uVGV4dCIsImlzQXNjIiwiZGlyZWN0aW9ucyIsInNvcnRpbmciLCJwYWdlIiwiaXNEYXRhRW5kZWQiLCJmaWVsZHNMaXN0Iiwib3JkZXJGaWVsZCIsIm9yZGVyRGlyZWN0aW9uIiwiaXNEeW5hbWljIiwicGFyc2UiLCJvcmRlciIsImZpZWxkIiwiaW5pdFRhYmxlIiwiaXNMb2FkaW5nIiwiZ2V0RmV0Y2hVcmwiLCJvbkJvZHlTY3JvbGxUaHJvdHRsZSIsIm9uQm9keVNjcm9sbCIsInRhYmxlIiwibG9hZGluZyIsInRhYmxlRGF0YSIsInRCb2R5IiwiY3JlYXRlTGF5b3V0IiwiYWRkRWxlbUhlYWRlciIsImFkZFRhYmxlRXZlbnRzIiwiZmlsbFRCb2R5IiwidGFibGVSb3dzIiwic29ydFJvd3MiLCJyZW5kZXJUQm9keSIsInN0YXJ0IiwiZW5kIiwicGFyYW1zU3RyIiwicHJlZml4IiwiaGVhZGVyQ29udGVudCIsInRoQ2xhc3MiLCJzb3J0ZXIiLCJzb3J0RGlyZWN0aW9uIiwiZmllbGRzIiwidGhlYWRTdHIiLCJ0aCIsInNvcnRSb3dzRHluYW1pYyIsInJldmVyc2UiLCJzb3J0ZXJPbkNsaWNrIiwiYm90dG9tIiwiaW5uZXJIZWlnaHQiLCJwYWdlWU9mZnNldCIsInJvdyIsInJvd0NvbnRlbnQiLCJ0ZENsYXNzZXMiLCJ0b0xvd2VyQ2FzZSIsInJlbmRlcmVkQ29udGVudCIsInJlbmRlckZpZWxkIiwic2Nyb2xsVG8iLCJEcmFnZ2FibGVMaXN0IiwiSFRNTFVMaXN0RWxlbWVudCIsInN0YXJ0RHJhZyIsInN0b3BEcmFnIiwibW92ZSIsInNldFBsYWNlaG9sZGVySGVpZ2h0IiwicGxhY2Vob2xkZXIiLCJjcmVhdGVQbGFjZWhvbGRlciIsImFkZENsYXNzVG9JdGVtcyIsIm9uY2UiLCJjdXJyZW50RWxlbSIsInJlcGxhY2VXaXRoIiwidG9wIiwiZWxlbUhhbGYiLCJvZmZzZXRIZWlnaHQiLCJlbGVtVG9wIiwiY29udGFpbnMiLCJtaWRkbGUiLCJjaGVja0xpbmUiLCJhZnRlciIsImJlZm9yZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbG9uZU5vZGUiLCJmaXJzdEl0ZW0iLCJtaW5IZWlnaHQiLCJyb3V0ZXMiLCJkb2N1bWVudENsaWNrIiwiX2luc3RhbmNlIiwicGF0dGVybiIsInBhdGgiLCJub3RGb3VuZFBhZ2VQYXRoIiwiaHJlZiIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyb3V0ZSIsInN0cmlwcGVkUGF0aCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJjb25zb2xlIiwibG9nIiwiZGVjb2RlVVJJIiwiY2hhbmdlUGFnZSIsImRlc3Ryb3kiLCJQYWdlIiwicmVuZGVyZWRQYWdlIiwiY29udGVudEVsZW0iLCJnZXRFbGVtZW50QnlJZCIsInJlbmRlclBhZ2UiLCJsaW5rIiwiZ2V0QXR0cmlidXRlIiwicHJldmVudERlZmF1bHQiLCJzdGFydHNXaXRoIiwibmF2aWdhdGUiLCJpbnN0YW5jZSIsImFkZFJvdXRlIiwic2V0Tm90Rm91bmRQYWdlIiwiYWRkTGlzdGVuZXIiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImV4dGVuZHMiLCJpbnB1dFRleHQiLCJpbnB1dE51bWJlciIsImlucHV0VGV4dGFyZWEiLCJpbnB1dFNlbGVjdCIsImNhdGVnb3JpZXNUb0ZsYXRMaXN0IiwiZmxhdExpc3QiLCJnZXRPcHRpb25zIiwic2VsZWN0ZWQiLCJpbWFnZXNJdGVtcyIsImdldEltZ3NMaXN0TWFya3VwIiwiZmllbGROYW1lIiwiZGVzY3JpcHRpb24iLCJkaXNjb3VudCIsIm1vZHMiLCJmZXRjaFByb2R1Y3RVcmwiLCJmZXRjaENhdGVnb3JpZXNVcmwiLCJwcm9kdWN0RGF0YSIsImVycm9yTWVzc2FnZSIsInByb2R1Y3QiLCJpbnB1dHMiLCJmaWVsZHNPcmRlciJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMs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QkFHWjVILEtBQUt1SixPQUFTLHdCQUNkdkosS0FBSzBhLGdCQUFrQjFhLEtBQUt1SixPQUFTLHlCQUF5QnZKLEtBQUs0SCxLQUNuRTVILEtBQUsyYSxtQkFBcUIzYSxLQUFLdUosT0FBUyxzREFHMUMsZUFDRSxNQUFNLFlBQUVxUixFQUFXLFdBQUVsUixFQUFVLGFBQUVtUixTQUF1QjdhLEtBQUsySixXQUU3RCxHQUFJa1IsRUFDRixPQUFPLFlBQWMsdUNBQ2pCalIsZ0JBRUFpUixFQUFhaFIsbUNBS25CLE1BQU1pUixFQUFVRixFQUFZLEdBQ3RCRyxFQUFTLEdBRWYsSUFBSyxNQUFNLEtBQUU3ZixFQUFJLEtBQUV1ZixLQUFVTyxFQUMzQixHQUFJaEcsRUFBTzlaLEdBQU8sQ0FDaEIsSUFBSTJGLEVBQVNpYSxFQUVBLGdCQUFUNWYsSUFDRjJGLEVBQVMsSUFDSkEsRUFDSDZJLGVBSUosTUFBTXlFLEVBQVE2RyxFQUFPOVosR0FBTXFRLE9BQU8xSyxHQUNsQyxJQUFJTSxFQUFVLENBQUMsR0FFWHNaLElBQ0Z0WixFQUFVQSxFQUFRMEUsT0FBTzRVLElBRzNCTSxFQUFPM1osS0FBSyxjQUFjRCxFQUFRNkQsS0FBSyxTQUFTbUosVUFJcEQsT0FBTyxZQUFjLHFDQUNqQnZFLHFDQUV1Qiw0QkFDVixrQkFDVG1SLEVBQU8vVixLQUFLLGtEQUdDLGlDQUNFLGtFQU16QixpQkFFRSxJQUlFLE1BQU8sQ0FBRTRWLGtCQUhpQixZQUFVNWEsS0FBSzBhLGlCQUduQmhSLGlCQUZHLFlBQVUxSixLQUFLMmEscUJBR3hDLE1BQU9oYixHQUVQLE1BQU8sQ0FBRWtiLGFBRE8sSUFBSS9TLEVBQUEsRUFBWSxDQUFFbkksVUFDSEYiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvc2hvcC1hZG1pbi1wYWdlL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzYpO1xuIiwiLy8gbmljZSBvdmVydmlldzpcbi8vIGh0dHBzOi8vZ3Jyci50ZWNoL3Bvc3RzL2NyZWF0ZS1kb20tbm9kZS1mcm9tLWh0bWwtc3RyaW5nL1xuXG4vLyBubyBJRTExXG5jb25zdCBzdXBwb3J0c1RlbXBsYXRlID0gJ2NvbnRlbnQnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5cbmNvbnN0IGNyZWF0ZUVsZW1lbnQgPSBzdXBwb3J0c1RlbXBsYXRlXG4gID8gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICByZXR1cm4gdGVtcGxhdGUuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICB9XG4gIDogZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICByZXR1cm4gZGl2LmZpcnN0RWxlbWVudENoaWxkO1xuICAgIH07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVsZW1lbnQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlc2NhcGVIVE1MIChzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1xuICAgIC5yZXBsYWNlKC8mL2csICcmJylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgLnJlcGxhY2UoLycvZywgJyYjMzk7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnPCcpXG4gICAgLnJlcGxhY2UoLz4vZywgJz4nKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbGxUZW1wbGF0ZSAoeyB0bXBsLCBkYXRhIH0pIHtcbiAgaWYgKCF0bXBsIHx8ICFkYXRhKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHRtcGwucmVwbGFjZSgveyhbXlwiXXsxLH0pfS9nLCAobWF0Y2gsIHN0cikgPT4ge1xuICAgIGlmIChkYXRhW3N0cl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGRhdGFbc3RyXTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERhdGUgKHN0cikge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoc3RyKS50b0RhdGVTdHJpbmcoKTtcbiAgY29uc3QgZGF0YVBhcnRzID0gZGF0ZS5zcGxpdCgnICcpO1xuICBjb25zdCBtb250aCA9IGRhdGFQYXJ0c1sxXTtcbiAgY29uc3QgZGF5ID0gZGF0YVBhcnRzWzJdO1xuICBjb25zdCB5ZWFyID0gZGF0YVBhcnRzWzNdO1xuXG4gIHJldHVybiBgJHttb250aH0gJHtkYXl9LCAke3llYXJ9YDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFRvdGFsIChudW0pIHtcbiAgbGV0IGZvcm1hdHRlZCA9IG51bTtcbiAgaWYgKG51bSA+PSAxMDAwKSB7XG4gICAgY29uc3QgdGFpbCA9IG51bSAlIDEwMDA7XG4gICAgZm9ybWF0dGVkID0gYCR7KG51bSAtIHRhaWwpIC8gMTAwMH0sJHt0YWlsfWA7XG4gIH1cblxuICByZXR1cm4gYCQke2Zvcm1hdHRlZH1gO1xufVxuIiwiLy8gRGlydHkgd2F5IHRvIGdldCB3ZWVrZGF5cyBpbiBjdXJyZW50IGxhbmdcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdlZWtEYXlzICh0YWcpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKDE5NzAsIDAsIDUpO1xuICBsZXQgd2Vla2RheXNTdHIgPSAnJztcbiAgbGV0IGNvdW50ZXIgPSAwO1xuXG4gIHdoaWxlIChjb3VudGVyIDwgNykge1xuICAgIGNvbnN0IGRheW5hbWUgPSBkYXRlLnRvTG9jYWxlU3RyaW5nKCdkZWZhdWx0JywgeyB3ZWVrZGF5OiAnbmFycm93JyB9KTtcbiAgICB3ZWVrZGF5c1N0ciArPSBgPCR7dGFnfT4ke2RheW5hbWV9PC8ke3RhZ30+YDtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICBjb3VudGVyKys7XG4gIH1cblxuICByZXR1cm4gd2Vla2RheXNTdHI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aHJvdHRsZSAoZnVuYywgY29udGV4dCwgdGltZW91dCkge1xuICBsZXQgYXJncztcbiAgbGV0IGlzV2FpdGluZyA9IGZhbHNlO1xuICBsZXQgaXNGaXJzdENhbGwgPSB0cnVlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIGlmIChpc0ZpcnN0Q2FsbCkge1xuICAgICAgZnVuYy5hcHBseShjb250ZXh0LCAuLi5hcmdzKTtcbiAgICAgIGlzRmlyc3RDYWxsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFpc1dhaXRpbmcpIHtcbiAgICAgIGlzV2FpdGluZyA9IHRydWU7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIC4uLmFyZ3MpO1xuICAgICAgICBpc1dhaXRpbmcgPSBmYWxzZTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5cbmNvbnN0IGNscyA9IHtcbiAgZWxlbTogJ25vdGlmaWNhdGlvbicsXG4gIHdhcm5pbmc6ICdub3RpZmljYXRpb24tLXdhcm5pbmcnLFxuICBlcnJvcjogJ25vdGlmaWNhdGlvbi0tZXJyb3InXG59O1xuXG5jb25zdCBzZWNvbmQgPSAxMDAwO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RpZmljYXRpb24ge1xuICBjb25zdHJ1Y3RvciAoeyBtZXNzYWdlLCBjb250YWluZXIsIHR5cGUgfSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgIHRoaXMuY2xhc3NOYW1lcyA9IHRoaXMuZ2V0Q2xhc3NlcygpO1xuICAgIHRoaXMuYWRkRWxlbSgpO1xuICAgIHRoaXMuaXNGaW5pc2hlZCA9IGZhbHNlO1xuICB9XG5cbiAgYWRkRWxlbSAoKSB7XG4gICAgdGhpcy5lbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5hZGQoLi4udGhpcy5jbGFzc05hbWVzKTtcbiAgICB0aGlzLmVsZW0uZGF0YXNldC5zdGF0ZSA9ICdzaG93bic7XG4gICAgdGhpcy5lbGVtLmlubmVySFRNTCA9IHRoaXMubWVzc2FnZTtcbiAgICB0aGlzLmNvbnRhaW5lci5wcmVwZW5kKHRoaXMuZWxlbSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5oaWRlRWxlbSgpOyB9LCB0aGlzLmR1cmF0aW9uKTtcbiAgfVxuXG4gIGFzeW5jIGhpZGVFbGVtIChwYXJhbXMgPSB7fSkge1xuICAgIHRoaXMuaXNGaW5pc2hlZCA9IHRydWU7XG4gICAgdGhpcy5lbGVtLmRhdGFzZXQuc3RhdGUgPSAnaGlkZGVuJztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmVsZW0uYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmVsZW0ucmVtb3ZlKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0RHVyYXRpb24gKCkge1xuICAgIGlmICh0aGlzLnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgIHJldHVybiA1ICogc2Vjb25kO1xuICAgIH1cblxuICAgIHJldHVybiAzICogc2Vjb25kO1xuICB9XG5cbiAgZ2V0Q2xhc3NlcyAoKSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtjbHMuZWxlbV07XG5cbiAgICBpZiAodGhpcy50eXBlICYmIGNsc1t0aGlzLnR5cGVdKSB7XG4gICAgICBjbGFzc2VzLnB1c2goY2xzW3RoaXMudHlwZV0pO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG59XG4iLCJpbXBvcnQgTm90aWZpY2F0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvTm90aWZpY2F0aW9uL2luZGV4LmpzJztcblxuY29uc3Qgbm90aWZDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbm5vdGlmQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ25vdGlmaWNhdGlvbnMnKTtcbmRvY3VtZW50LmJvZHkuYXBwZW5kKG5vdGlmQ29udGFpbmVyKTtcblxubGV0IG5vdGlmaWNhdGlvbnMgPSBbXTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gbm90aWZ5IChtZXNzYWdlLCB0eXBlKSB7XG4gIGNvbnN0IG5vdGlmaWNhdGlvbiA9IG5ldyBOb3RpZmljYXRpb24oe1xuICAgIG1lc3NhZ2UsXG4gICAgY29udGFpbmVyOiBub3RpZkNvbnRhaW5lcixcbiAgICB0eXBlXG4gIH0pO1xuXG4gIG5vdGlmaWNhdGlvbnMucHVzaChub3RpZmljYXRpb24pO1xuXG4gIGlmIChub3RpZmljYXRpb24uZWxlbS5vZmZzZXRUb3AgPCAwKSB7XG4gICAgbm90aWZpY2F0aW9ucyA9IG5vdGlmaWNhdGlvbnMuZmlsdGVyKG5vdGlmaWNhdGlvbiA9PiB7XG4gICAgICByZXR1cm4gIW5vdGlmaWNhdGlvbi5pc0ZpbmlzaGVkO1xuICAgIH0pO1xuICAgIG5vdGlmaWNhdGlvbnMuc2hpZnQoKS5oaWRlRWxlbSgpO1xuICB9XG59XG4iLCIvLyBJbnNwaXJlZCBieSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9pbGlha2FuL2RkNmFkMGRhZGI2NjMwNTQ0ZDExODdjNGM5NGNjZjQwXG5pbXBvcnQgbm90aWZpZXIgZnJvbSAnLi4vbGliL25vdGlmaWVyLmpzJztcblxuLy8gY29uc29sZS5jbGVhcigpO1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hKU09OICh1cmwpIHtcbiAgbGV0IHJlc3BvbnNlO1xuXG4gIC8vIEVycm9yIHdoaWxlIGxvYWRpbmcgKGJhZCB1cmwgb3IgY29ubmVjdGlvbilcbiAgdHJ5IHtcbiAgICByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEZldGNoRXJyb3IocmVzcG9uc2UsIG51bGwsIGBOZXR3b3JrIGVycm9yIGZvciB1cmwgJHt1cmx9YCk7XG4gIH1cblxuICAvLyBCYWQgcmVzcG9uc2UgZnJvbSBzZXJ2ZXJcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIGxldCBib2R5O1xuICAgIGNvbnN0IHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0dXNUZXh0O1xuXG4gICAgdHJ5IHtcbiAgICAgIGJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAvLyBjYW4ndCByZXByb2R1Y2UgZ2V0dGluZyBib2R5IHdpdGggbm90IG9rIHN0YXR1c1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxuICAgIGxldCBtZXNzYWdlID0gYEVycm9yICR7cmVzcG9uc2Uuc3RhdHVzfSBmb3IgdXJsICR7dXJsfWA7XG5cbiAgICBpZiAoc3RhdHVzVGV4dCkge1xuICAgICAgbWVzc2FnZSArPSBgOiAke3N0YXR1c1RleHR9YDtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRmV0Y2hFcnJvcihyZXNwb25zZSwgYm9keSwgbWVzc2FnZSk7XG4gIH1cblxuICAvLyBSZXNwb25zZSBpcyBjb3JyZWN0LCB0cnkgdG8gZ2V0IGRhdGFcbiAgdHJ5IHtcbiAgICByZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRmV0Y2hFcnJvcihyZXNwb25zZSwgbnVsbCwgZXJyb3IubWVzc2FnZSk7XG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmNsYXNzIEZldGNoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yIChyZXNwb25zZSwgYm9keSwgbWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdGZXRjaEVycm9yJztcblxuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB0aGlzLmJvZHkgPSBib2R5O1xuICB9XG59XG5cbi8vIGhhbmRsZSB1bmNhdWdodCBmYWlsZWQgZmV0Y2ggdGhyb3VnaFxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIGV2ZW50ID0+IHtcbiAgaWYgKGV2ZW50LnJlYXNvbiBpbnN0YW5jZW9mIEZldGNoRXJyb3IpIHtcbiAgICBub3RpZmllcihldmVudC5yZWFzb24ubWVzc2FnZSwgJ2Vycm9yJyk7XG4gIH1cbn0pO1xuIiwiaW1wb3J0IGNyZWF0ZUVsZW1lbnQgZnJvbSAnLi9jcmVhdGVFbGVtZW50LmpzJztcbmltcG9ydCBlc2NhcGVIVE1MIGZyb20gJy4vZXNjYXBlSFRNTC5qcyc7XG5pbXBvcnQgZmlsbFRlbXBsYXRlIGZyb20gJy4vZmlsbFRlbXBsYXRlLmpzJztcbmltcG9ydCBmb3JtYXREYXRlIGZyb20gJy4vZm9ybWF0RGF0ZS5qcyc7XG5pbXBvcnQgZm9ybWF0VG90YWwgZnJvbSAnLi9mb3JtYXRUb3RhbC5qcyc7XG5pbXBvcnQgZ2V0RGF0ZUZyb21TdHJpbmcgZnJvbSAnLi9nZXREYXRlRnJvbVN0cmluZy5qcyc7XG5pbXBvcnQgZ2V0V2Vla0RheXMgZnJvbSAnLi9nZXRXZWVrRGF5cy5qcyc7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSAnLi90aHJvdHRsZS5qcyc7XG5pbXBvcnQgZmV0Y2hKc29uIGZyb20gJy4vZmV0Y2hKc29uLmpzJztcblxuZXhwb3J0IHtcbiAgY3JlYXRlRWxlbWVudCxcbiAgZXNjYXBlSFRNTCxcbiAgZmlsbFRlbXBsYXRlLFxuICBmb3JtYXREYXRlLFxuICBmb3JtYXRUb3RhbCxcbiAgZ2V0RGF0ZUZyb21TdHJpbmcsXG4gIGdldFdlZWtEYXlzLFxuICB0aHJvdHRsZSxcbiAgZmV0Y2hKc29uXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKG1vZHVsZUlkLCBsaXN0LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgY3NzOiBsaXN0W2ldWzFdLFxuICAgICAgbWVkaWE6IGxpc3RbaV1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGxpc3RbaV1bM11cbiAgICB9O1xuXG4gICAgaWYgKHN0eWxlc0luRG9tW21vZHVsZUlkXVtpXSkge1xuICAgICAgc3R5bGVzSW5Eb21bbW9kdWxlSWRdW2ldKHBhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0ucHVzaChhZGRTdHlsZShwYXJ0LCBvcHRpb25zKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbW9kdWxlSWQgPSBvcHRpb25zLmJhc2UgPyBtb2R1bGVJZCArIG9wdGlvbnMuYmFzZSA6IG1vZHVsZUlkO1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcblxuICBpZiAoIXN0eWxlc0luRG9tW21vZHVsZUlkXSkge1xuICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXSA9IFtdO1xuICB9XG5cbiAgbW9kdWxlc1RvRG9tKG1vZHVsZUlkLCBsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFzdHlsZXNJbkRvbVttb2R1bGVJZF0pIHtcbiAgICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXSA9IFtdO1xuICAgIH1cblxuICAgIG1vZHVsZXNUb0RvbShtb2R1bGVJZCwgbmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBqID0gbmV3TGlzdC5sZW5ndGg7IGogPCBzdHlsZXNJbkRvbVttb2R1bGVJZF0ubGVuZ3RoOyBqKyspIHtcbiAgICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXVtqXSgpO1xuICAgIH1cblxuICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXS5sZW5ndGggPSBuZXdMaXN0Lmxlbmd0aDtcblxuICAgIGlmIChzdHlsZXNJbkRvbVttb2R1bGVJZF0ubGVuZ3RoID09PSAwKSB7XG4gICAgICBkZWxldGUgc3R5bGVzSW5Eb21bbW9kdWxlSWRdO1xuICAgIH1cbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZU1lc3NhZ2Uge1xuICBjb25zdHJ1Y3RvciAoeyB0aXRsZSwgdGV4dCwgY2FsbGJhY2ssIGNhbGxiYWNrVGV4dCwgZXJyb3IgfSkge1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLnRleHQgPSB0ZXh0IHx8ICdTb21ldGhpbmcgd2VudCB3cm9uZyc7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuY2FsbGJhY2tUZXh0ID0gY2FsbGJhY2tUZXh0O1xuICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcblxuICAgIGlmICghdGhpcy50aXRsZSAmJiB0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLnRpdGxlID0gJ0Vycm9yJztcbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZUVsZW1lbnQoKTtcbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnQgKCkge1xuICAgIHRoaXMuZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKCdwYWdlLW1lc3NhZ2UnKTtcblxuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZCgncGFnZS1tZXNzYWdlLS1lcnJvcicpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGVudCA9IGA8aDM+JHt0aGlzLnRpdGxlfTwvaDM+PHA+JHt0aGlzLnRleHR9PC9wPmA7XG5cbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5jb250ZW50ICs9IGA8ZGl2IGNsYXNzPVwicGFnZS1tZXNzYWdlX19lcnJvclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZS1tZXNzYWdlX19lcnJvci10ZXh0XCI+XG4gICAgICAgICAgPHN0cm9uZz4ke3RoaXMuZXJyb3IubmFtZX08L3N0cm9uZz46ICR7dGhpcy5lcnJvci5tZXNzYWdlfTwvZGl2PlxuICAgICAgPC9kaXY+YDtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlckJlZ2luJywgdGhpcy5jb250ZW50KTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcHRpb25zID0ge307XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgdXJsID0gdXJsICYmIHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjY4MmRlZGFhZmIwNDRlN2I5ZWEzNTJhNzBiYWFmNTY5LnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYjExMmI1NTAyNzZkNzUyZDBiM2UxMDdhZGU4ZDYxNy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiODNjNzU0MjBkMDM2MGVkMjI1MTFjMDkyZTU3ZDFkNTQuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjkyNjc5MTU0YWZkZTA4MTVjNjIyMmM3YzA0MDFmNDQyLnN2Z1wiOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkobW9kdWxlLmlkLCBjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm5vdGlmaWNhdGlvbnN7cG9zaXRpb246Zml4ZWQ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmQ7cmlnaHQ6MXJlbTtib3R0b206MXJlbTt3aWR0aDoyMDBweDttYXgtaGVpZ2h0OjUwdmh9Lm5vdGlmaWNhdGlvbnttYXJnaW4tdG9wOi41cmVtO3BhZGRpbmc6Ljc1cmVtIDFyZW07YmFja2dyb3VuZDp2YXIoLS1ibHVlKTtib3JkZXItcmFkaXVzOnZhcigtLXJhZGl1cyk7Ym94LXNoYWRvdzowIDAgMC41ZW0gcmdiYSgwLDAsMCwwLjI1KTtjb2xvcjp2YXIoLS13aGl0ZSk7b3BhY2l0eTowO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xcmVtKTthbmltYXRpb246ZmFkZUluIC41cyBmb3J3YXJkc30ubm90aWZpY2F0aW9uLS13YXJuaW5ne2JhY2tncm91bmQ6dmFyKC0teWVsbG93KX0ubm90aWZpY2F0aW9uLS1lcnJvcntiYWNrZ3JvdW5kOnZhcigtLXJlZCl9Lm5vdGlmaWNhdGlvbltkYXRhLXN0YXRlPVxcXCJoaWRkZW5cXFwiXXthbmltYXRpb246ZmFkZU91dCAuNXN9QGtleWZyYW1lcyBmYWRlSW57dG97b3BhY2l0eToxO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIGZhZGVPdXR7ZnJvbXtvcGFjaXR5OjE7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7bWFyZ2luLWJvdHRvbTowfXRve29wYWNpdHk6MDttYXJnaW4tYm90dG9tOi0xcmVtfX1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucGFnZXt3aWR0aDoxMDAlfS5wYWdlLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTttaW4taGVpZ2h0OjEwMHZofS5wYWdlLW1haW4sLnBhZ2UtYXNpZGUsLnBhZ2UtZm9vdGVye3BhZGRpbmc6MXJlbTtib3gtc2l6aW5nOmJvcmRlci1ib3h9LnBhZ2UtbWFpbntmbGV4LWdyb3c6MX0ucGFnZS1hc2lkZXttaW4td2lkdGg6MjUwcHg7YmFja2dyb3VuZDojRUVFfS5wYWdlLWZvb3RlcntmbGV4LWJhc2lzOjEwMCU7ZGlzcGxheTpmbGV4fS5wYWdlLWZvb3RlciBBK0F7bWFyZ2luLWxlZnQ6MXJlbX0ucGFnZS1jb250ZW50X19oZWFkZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS5wYWdlLXNlY3Rpb257ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwfS5wYWdlLXNlY3Rpb24rLnBhZ2Utc2VjdGlvbnttYXJnaW4tdG9wOjJyZW19LnBhZ2Utc2VjdGlvbl9fdGl0bGV7ZmxleC1iYXNpczoxMDAlfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi50b29sdGlwcy1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmV9LnRvb2x0aXB7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDozO2xlZnQ6MDt0b3A6MDttYXJnaW46MXJlbSAwIDAgMXJlbTtwYWRkaW5nOi41cmVtIC43NXJlbTtiYWNrZ3JvdW5kOiNFRUU7Ym9yZGVyLXJhZGl1czozcHg7Ym94LXNoYWRvdzowIDAgNXB4IHJnYmEoMCwwLDAsMC4yNSk7bGluZS1oZWlnaHQ6MTtjb2xvcjojNTU1O3RyYW5zZm9ybTp0cmFuc2xhdGUoMCwgMCk7b3BhY2l0eTowO3RyYW5zaXRpb246b3BhY2l0eSAuMnM7cG9pbnRlci1ldmVudHM6bm9uZX0udG9vbHRpcFtkYXRhLXZpc2libGU9XFxcIjFcXFwiXXtvcGFjaXR5OjF9W2RhdGEtdG9vbHRpcC1jb250ZW50XXtvcGFjaXR5OjE7dHJhbnNpdGlvbjpvcGFjaXR5IC4yc30udG9vbHRpcHMtY29udGFpbmVyLS1kaW1tZWQgW2RhdGEtdG9vbHRpcC1jb250ZW50XTpub3QoOmhvdmVyKXtvcGFjaXR5Oi40fVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jb2x1bW4tY2hhcnR7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO21pbi13aWR0aDoxODBweDtmbGV4LWJhc2lzOmNhbGMoKDEwMCUgLSAycmVtKSAvIDMpO21heC13aWR0aDozMDBweDttaW4taGVpZ2h0OjE1MHB4O21heC1oZWlnaHQ6MzAwcHg7bWFyZ2luOjAgMCAuNXJlbSAwO3BhZGRpbmc6MjBweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1ncmV5LWxpZ2h0KTtib3JkZXItbGVmdDo1cHggc29saWQgdmFyKC0tZ3JleS1saWdodCk7Ym9yZGVyLXJhZGl1czo1cHh9LmNvbHVtbi1jaGFydCsuY29sdW1uLWNoYXJ0e21hcmdpbi1sZWZ0OjFyZW19LmNvbHVtbi1jaGFydF9fY29udGVudHtwb3NpdGlvbjpyZWxhdGl2ZTtmbGV4LWdyb3c6MTtkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7bWF4LXdpZHRoOjEwMCV9LmNvbHVtbi1jaGFydF9fdGl0bGV7bWFyZ2luOjA7bGluZS1oZWlnaHQ6MTtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zaXplOjFlbTtjb2xvcjp2YXIoLS1ncmV5KX0uY29sdW1uLWNoYXJ0X190b3RhbHttYXJnaW4tdG9wOjFyZW07Zm9udC1zaXplOjEuNmVtO2xpbmUtaGVpZ2h0OjF9LmNvbHVtbi1jaGFydF9fbGlzdHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6ZmxleC1lbmQ7d2lkdGg6MTAwJTtoZWlnaHQ6NTBweDttYXJnaW46MDttYXJnaW4tdG9wOi41cmVtO3BhZGRpbmc6MDtsaXN0LXN0eWxlOm5vbmV9LmNvbHVtbi1jaGFydF9faXRlbXtmbGV4LWdyb3c6MTttYXJnaW4tbGVmdDoxcHg7YmFja2dyb3VuZDp2YXIoLS1ncmV5LWxpZ2h0KTtjdXJzb3I6cG9pbnRlcn0uY29sdW1uLWNoYXJ0X19pdGVtOmZpcnN0LWNoaWxke21hcmdpbi1sZWZ0OjB9LmNvbHVtbi1jaGFydF9fdG9vbHRpcC1kYXRle2ZvbnQtc2l6ZTouOWVtfS5jb2x1bW4tY2hhcnRfX3Rvb2x0aXAtcXVhbnRpdHl7bWFyZ2luLXRvcDouMjVlbTtmb250LXNpemU6MS4xZW19LmNvbHVtbi1jaGFydC0tY3VzdG9tZXJze2JvcmRlci1sZWZ0LWNvbG9yOmdvbGR9LmNvbHVtbi1jaGFydC0tY3VzdG9tZXJzIC5jb2x1bW4tY2hhcnRfX2l0ZW17YmFja2dyb3VuZDpnb2xkfS5jb2x1bW4tY2hhcnQtLW9yZGVyc3tib3JkZXItbGVmdC1jb2xvcjp0dXJxdW9pc2V9LmNvbHVtbi1jaGFydC0tb3JkZXJzIC5jb2x1bW4tY2hhcnRfX2l0ZW17YmFja2dyb3VuZDp0dXJxdW9pc2V9LmNvbHVtbi1jaGFydC0tc2FsZXN7Ym9yZGVyLWxlZnQtY29sb3I6eWVsbG93Z3JlZW59LmNvbHVtbi1jaGFydC0tc2FsZXMgLmNvbHVtbi1jaGFydF9faXRlbXtiYWNrZ3JvdW5kOnllbGxvd2dyZWVufS5jb2x1bW4tY2hhcnRfX2Vycm9ye21heC13aWR0aDoxMDAlO292ZXJmbG93OmF1dG99XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkobW9kdWxlLmlkLCBjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gcmVxdWlyZShcIi4vY2FsZW5kYXItaWNvbi5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSByZXF1aXJlKFwiLi9hcnJvdy1pY29uLnN2Z1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5yYW5nZXBpY2tlcntwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjExfS5yYW5nZXBpY2tlcl9faW5wdXR7ZGlzcGxheTppbmxpbmUtZmxleDtwYWRkaW5nOjEycHggMTZweCAxMnB4IDQwcHg7Y3Vyc29yOnBvaW50ZXI7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxNnB4O2xpbmUtaGVpZ2h0OjIwcHg7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1ncmV5LWxpZ2h0KTtib3JkZXItcmFkaXVzOjRweDtvdXRsaW5lOm5vbmU7YmFja2dyb3VuZDp2YXIoLS13aGl0ZSkgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSAxNnB4IGNlbnRlciBuby1yZXBlYXQ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS13aGl0ZSk7YmFja2dyb3VuZC1zaXplOjE4cHggMThweH0ucmFuZ2VwaWNrZXJfb3BlbiAucmFuZ2VwaWNrZXJfX2lucHV0LC5yYW5nZXBpY2tlcl9faW5wdXQ6Zm9jdXMsLnJhbmdlcGlja2VyX19pbnB1dDphY3RpdmV7Ym9yZGVyLWNvbG9yOnZhcigtLWJsdWUpfS5yYW5nZXBpY2tlcl9faW5wdXQ+U1BBTntkaXNwbGF5OmlubGluZS1mbGV4O21hcmdpbjowIDRweH0ucmFuZ2VwaWNrZXJfX2lucHV0PlNQQU46bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MH0ucmFuZ2VwaWNrZXJfX3NlbGVjdG9ye2Rpc3BsYXk6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXdoaXRlKTtwYWRkaW5nOjMycHggMjZweDtib3JkZXItcmFkaXVzOjZweDtib3gtc2hhZG93OjAgNHB4IDI5cHggcmdiYSgwLDAsMCwwLjA5KTtmbGV4LWRpcmVjdGlvbjpyb3c7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47ZmxleDoxIDAgYXV0bztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6Y2FsYygxMDAlICsgMTZweCk7cmlnaHQ6MDt6LWluZGV4OjF9LnJhbmdlcGlja2VyLS1vcGVuIC5yYW5nZXBpY2tlcl9fc2VsZWN0b3J7ZGlzcGxheTppbmxpbmUtZmxleH0ucmFuZ2VwaWNrZXJfX3NlbGVjdG9yLWFycm93e3dpZHRoOjMwcHg7aGVpZ2h0OjE1cHg7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjEwMCU7cmlnaHQ6NjBweDtvdmVyZmxvdzpoaWRkZW59LnJhbmdlcGlja2VyX19zZWxlY3Rvci1hcnJvdzo6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMnB4O2hlaWdodDoxMnB4O2JhY2tncm91bmQ6dmFyKC0td2hpdGUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSkgcm90YXRlKDQ1ZGVnKTt0b3A6MTAwJTtsZWZ0OjUwJTtib3gtc2hhZG93OjAgMXB4IDEwcHggcmdiYSgwLDAsMCwwLjA5KX0ucmFuZ2VwaWNrZXJfX2NhbGVuZGFyc3tkaXNwbGF5OmZsZXh9LnJhbmdlcGlja2VyX19jYWxlbmRhcnt3aWR0aDoyNTJweH0ucmFuZ2VwaWNrZXJfX2NhbGVuZGFyOmxhc3QtY2hpbGR7bWFyZ2luLWxlZnQ6MjZweH0ucmFuZ2VwaWNrZXJfX21vbnRoLWluZGljYXRvcnt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjIwcHg7bGluZS1oZWlnaHQ6MjRweDtwYWRkaW5nOjAgMTVweDtjb2xvcjp2YXIoLS1kYXJrLWJsdWUtdGV4dCl9LnJhbmdlcGlja2VyX19zZWxlY3Rvci1jb250cm9se3Bvc2l0aW9uOmFic29sdXRlO3RvcDozMnB4O3dpZHRoOjE1cHg7aGVpZ2h0OjI0cHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2N1cnNvcjpwb2ludGVyO3RyYW5zaXRpb246LjNzIGFsbDtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIikgbGVmdCBjZW50ZXIgbm8tcmVwZWF0O2JhY2tncm91bmQtc2l6ZTo5cHggMTNweDtib3JkZXI6MH0ucmFuZ2VwaWNrZXJfX3NlbGVjdG9yLWNvbnRyb2w6aG92ZXJ7b3BhY2l0eTouOH0ucmFuZ2VwaWNrZXJfX3NlbGVjdG9yLWNvbnRyb2wtLWxlZnR7bGVmdDoyNnB4fS5yYW5nZXBpY2tlcl9fc2VsZWN0b3ItY29udHJvbC0tcmlnaHR7cmlnaHQ6MjZweDt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LnJhbmdlcGlja2VyX19kYXktb2Ytd2VlaywucmFuZ2VwaWNrZXJfX2RhdGUtZ3JpZHtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCg3LCAxZnIpfS5yYW5nZXBpY2tlcl9fZGF5LW9mLXdlZWt7bWFyZ2luLXRvcDoyOHB4O2ZvbnQtd2VpZ2h0OjQwMDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyMHB4O2NvbG9yOnZhcigtLWdyZXkpO3RleHQtYWxpZ246Y2VudGVyfS5yYW5nZXBpY2tlcl9fZGF0ZS1ncmlke21hcmdpbi10b3A6MTZweH0ucmFuZ2VwaWNrZXJfX2NlbGx7cG9zaXRpb246cmVsYXRpdmU7Ym9yZGVyOjA7d2lkdGg6MzZweDtoZWlnaHQ6MzZweDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2NvbG9yOnZhcigtLWRhcmstYmx1ZS10ZXh0KTtib3JkZXItcmFkaXVzOjA7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc2l6ZToxNnB4O2xpbmUtaGVpZ2h0OjIwcHg7Y3Vyc29yOnBvaW50ZXJ9LnJhbmdlcGlja2VyX19jZWxsOmFjdGl2ZSwucmFuZ2VwaWNrZXJfX2NlbGwucmFuZ2VwaWNrZXJfX3NlbGVjdGVkLC5yYW5nZXBpY2tlcl9fY2VsbC5yYW5nZXBpY2tlcl9fc2VsZWN0ZWQtZnJvbSwucmFuZ2VwaWNrZXJfX2NlbGwucmFuZ2VwaWNrZXJfX3NlbGVjdGVkLXRve2JhY2tncm91bmQtY29sb3I6dmFyKC0tYmx1ZSk7Y29sb3I6dmFyKC0td2hpdGUpfS5yYW5nZXBpY2tlcl9fY2VsbDpob3ZlciwucmFuZ2VwaWNrZXJfX2NlbGw6Zm9jdXN7b3V0bGluZTpub25lO2JhY2tncm91bmQtY29sb3I6dmFyKC0tbGlnaHQtYmx1ZSk7Y29sb3I6dmFyKC0tZGFyay1ibHVlLXRleHQpO3RyYW5zaXRpb246LjJzIGFsbH0ucmFuZ2VwaWNrZXJfX2NlbGwucmFuZ2VwaWNrZXJfX3NlbGVjdGVkOmhvdmVyLC5yYW5nZXBpY2tlcl9fY2VsbC5yYW5nZXBpY2tlcl9fc2VsZWN0ZWQtZnJvbTpob3ZlciwucmFuZ2VwaWNrZXJfX2NlbGwucmFuZ2VwaWNrZXJfX3NlbGVjdGVkLXRvOmhvdmVyLC5yYW5nZXBpY2tlcl9fY2VsbC5yYW5nZXBpY2tlcl9fc2VsZWN0ZWQ6Zm9jdXMsLnJhbmdlcGlja2VyX19jZWxsLnJhbmdlcGlja2VyX19zZWxlY3RlZC1mcm9tOmZvY3VzLC5yYW5nZXBpY2tlcl9fY2VsbC5yYW5nZXBpY2tlcl9fc2VsZWN0ZWQtdG86Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1taWRkbGUtYmx1ZSk7Y29sb3I6dmFyKC0tZGFyay1ibHVlLXRleHQpfS5yYW5nZXBpY2tlcl9fY2VsbC5yYW5nZXBpY2tlcl9fc2VsZWN0ZWQtYmV0d2VlbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWxpZ2h0LWJsdWUpfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5wYWdlLW1lc3NhZ2V7bWF4LXdpZHRoOjgwMHB4O21hcmdpbjoycmVtIGF1dG87cGFkZGluZzoxcmVtO2JhY2tncm91bmQ6bGlnaHRnb2xkZW5yb2R5ZWxsb3c7Ym9yZGVyLXJhZGl1czp2YXIoLS1yYWRpdXMpfS5wYWdlLW1lc3NhZ2UtLWVycm9ye2JhY2tncm91bmQ6bWlzdHlyb3NlfS5wYWdlLW1lc3NhZ2VfX2Vycm9ye21hcmdpbi10b3A6MXJlbTtwYWRkaW5nOjFyZW07YmFja2dyb3VuZDojRkZGO2JvcmRlci1yYWRpdXM6dmFyKC0tcmFkaXVzKX0ucGFnZS1tZXNzYWdlX19lcnJvci10ZXh0e2ZvbnQtZmFtaWx5OkNvdXJpZXIgTmV3LCBDb3VyaWVyLCBtb25vc3BhY2V9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkobW9kdWxlLmlkLCBjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNvcnRhYmxlLXRhYmxle3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7bWF4LXdpZHRoOjEwMCU7bWluLWhlaWdodDoyMDBweDttYXJnaW4tYm90dG9tOjQwcHg7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS13aGl0ZSl9LnNvcnRhYmxlLXRhYmxlX190YWJsZXt3aWR0aDoxMDAlfS5zb3J0YWJsZS10YWJsZV9fcm93e3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6Z3JpZDtncmlkOmF1dG8tZmxvdyAvIDEyJSAzOCUgMjAlIDEwJSAxMCUgMTAlO3RleHQtZGVjb3JhdGlvbjpub25lfS5zb3J0YWJsZS10YWJsZV9fY2VsbHtwYWRkaW5nOjE2cHg7Zm9udC1zaXplOjE2cHg7bGluZS1oZWlnaHQ6MjBweDtjb2xvcjp2YXIoLS10YWJsZS1ibGFjayk7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtib3JkZXItYm90dG9tOjFweCBzb2xpZCB2YXIoLS1ncmV5LWxpZ2h0KX0uc29ydGFibGUtdGFibGVfX2NlbGw6Zmlyc3QtY2hpbGR7cGFkZGluZy1sZWZ0OjMycHh9LnNvcnRhYmxlLXRhYmxlX19jZWxsOmxhc3QtY2hpbGR7cGFkZGluZy1yaWdodDozMnB4fS5zb3J0YWJsZS10YWJsZV9fY2VsbC0tZXJyb3J7Z3JpZC1jb2x1bW4tc3RhcnQ6MTtncmlkLWNvbHVtbi1lbmQ6N30uc29ydGFibGUtdGFibGVfX3RoZWFke2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246c3RpY2t5O3otaW5kZXg6Mzt0b3A6MDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXdoaXRlKX0uc29ydGFibGUtdGFibGVfX2hlYWRlciAuc29ydGFibGUtdGFibGVfX2NlbGx7bWluLXdpZHRoOjEyMHB4O2NvbG9yOnZhcigtLWdyZXktbGlnaHQpfS5zb3J0YWJsZS10YWJsZV9faGVhZGVyIC5zb3J0YWJsZS10YWJsZV9fY2VsbFtkYXRhLXNvcnRhYmxlXXtjdXJzb3I6cG9pbnRlcn0uc29ydGFibGUtdGFibGVfX2NlbGwtLXF1YW50aXR5LC5zb3J0YWJsZS10YWJsZV9fY2VsbC0tcHJpY2V7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfS5zb3J0YWJsZS10YWJsZV9fY2VsbC0tZGlzYWJsZWR7b3BhY2l0eTouNX0uc29ydGFibGUtdGFibGVfX2NlbGxbZGF0YS1zb3J0LWRpcmVjdGlvbl06OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jazt3aWR0aDowO2hlaWdodDowO21hcmdpbi10b3A6LjI1ZW07bWFyZ2luLWxlZnQ6LjI1ZW07Ym9yZGVyOjVweCBzb2xpZDtib3JkZXItY29sb3I6Y3VycmVudENvbG9yIHRyYW5zcGFyZW50fS5zb3J0YWJsZS10YWJsZV9fY2VsbFtkYXRhLXNvcnQtZGlyZWN0aW9uPVxcXCJhc2NcXFwiXTo6YWZ0ZXJ7Ym9yZGVyLXRvcDpub25lfS5zb3J0YWJsZS10YWJsZV9fY2VsbFtkYXRhLXNvcnQtZGlyZWN0aW9uPVxcXCJkZXNjXFxcIl06OmFmdGVye2JvcmRlci1ib3R0b206bm9uZX0uc29ydGFibGUtdGFibGVfX2NlbGwtLXNvcnRlcjpob3ZlcntjdXJzb3I6cG9pbnRlcjtjb2xvcjp2YXIoLS1ncmV5KX0uc29ydGFibGUtdGFibGVfX2ltYWdlLXdyYXBwZXJ7cG9zaXRpb246cmVsYXRpdmV9LnNvcnRhYmxlLXRhYmxlX19pbWFnZXtkaXNwbGF5OmJsb2NrO2hlaWdodDo0MHB4O3dpZHRoOjEwMCU7bWF4LXdpZHRoOjEwMCU7bWluLXdpZHRoOjQwcHg7b2JqZWN0LWZpdDpjb250YWluO3BhZGRpbmc6NHB4O2JvcmRlcjoxcHggc29saWQgdmFyKC0tZ3JleS1saWdodCk7Ym9yZGVyLXJhZGl1czoycHh9LnNvcnRhYmxlLXRhYmxlX19wcmV2aWV3e3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6Mjt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtvcGFjaXR5OjA7cGFkZGluZzouMjVlbTtiYWNrZ3JvdW5kLW9yaWdpbjpjb250ZW50LWJveDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXdoaXRlKTtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjo1MCUgNTAlO2JvcmRlcjoxcHggc29saWQgdmFyKC0tZ3JleS1saWdodCk7dHJhbnNpdGlvbjphbGwgLjI1c30uc29ydGFibGUtdGFibGVfX3ByZXZpZXc6aG92ZXJ7d2lkdGg6MzAwJTtoZWlnaHQ6MzAwJTtvcGFjaXR5OjF9LnNvcnRhYmxlLXRhYmxlX19saW5re3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowfS5zb3J0YWJsZS10YWJsZV9fY2F0ZWdvcnl7cG9zaXRpb246cmVsYXRpdmU7Y3Vyc29yOnBvaW50ZXJ9LnNvcnRhYmxlLXRhYmxlX190b29sdGlwLWNhdGVnb3J5e2NvbG9yOnZhcigtLWdyZXkpfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCIuL2dyYWItaWNvbi5zdmdcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5kcmFnZ2FibGUtbGlzdHtwb3NpdGlvbjpyZWxhdGl2ZX0uZHJhZ2dhYmxlLWxpc3RfX2l0ZW17ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtjdXJzb3I6Z3JhYn0uZHJhZ2dhYmxlLWxpc3RfX2l0ZW06OmJlZm9yZXtjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjE4cHg7d2lkdGg6MTFweDttYXJnaW4tcmlnaHQ6MXJlbTtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgNTAlIDUwJSBuby1yZXBlYXQ7b3BhY2l0eTouNX0uZHJhZ2dhYmxlLWxpc3QgLmRyYWdnYWJsZS1saXN0X19pdGVtLS1wbGFjZWhvbGRlcntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWdyZXktbGlnaHQpfS5kcmFnZ2FibGUtbGlzdCAuZHJhZ2dhYmxlLWxpc3RfX2l0ZW0tLXBsYWNlaG9sZGVyOjpiZWZvcmV7YmFja2dyb3VuZDpub25lfS5kcmFnZ2FibGUtbGlzdF9faXRlbS0tZHJhZ2dlZHtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7cmlnaHQ6MDtiYWNrZ3JvdW5kOnZhcigtLXdoaXRlKTtib3gtc2hhZG93OjAgMCAxcmVtIHJnYmEoMCwwLDAsMC4zNSk7Y3Vyc29yOmdyYWJiaW5nfS5kcmFnZ2FibGUtbGlzdF9faXRlbS0tZHJhZ2dlZDo6YmVmb3Jle29wYWNpdHk6MX1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL2NhdGVnb3JpZXMvaW5kZXguanNcIjogMjYsXG5cdFwiLi9kYXNoYm9hcmQvaW5kZXguanNcIjogMjksXG5cdFwiLi9lcnJvcjQwNC9pbmRleC5qc1wiOiAzMCxcblx0XCIuL3Byb2R1Y3RzL2VkaXQvaW5kZXguanNcIjogMzcsXG5cdFwiLi9wcm9kdWN0cy9pbmRleC5qc1wiOiAzM1xufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQXN5bmNDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gd2VicGFja0FzeW5jQ29udGV4dFJlc29sdmUocmVxKS50aGVuKF9fd2VicGFja19yZXF1aXJlX18pO1xufVxuZnVuY3Rpb24gd2VicGFja0FzeW5jQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdC8vIEhlcmUgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigpIGlzIHVzZWQgaW5zdGVhZCBvZiBuZXcgUHJvbWlzZSgpIHRvIHByZXZlbnRcblx0Ly8gdW5jYXVnaHQgZXhjZXB0aW9uIHBvcHBpbmcgdXAgaW4gZGV2dG9vbHNcblx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHRcdHRocm93IGU7XG5cdFx0fVxuXHRcdHJldHVybiBtYXBbcmVxXTtcblx0fSk7XG59XG53ZWJwYWNrQXN5bmNDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQXN5bmNDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0FzeW5jQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0FzeW5jQ29udGV4dFJlc29sdmU7XG53ZWJwYWNrQXN5bmNDb250ZXh0LmlkID0gMjU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tBc3luY0NvbnRleHQ7IiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZmV0Y2hKc29uIH0gZnJvbSAnLi4vLi4vaGVscGVycy9pbmRleC5qcyc7XG5pbXBvcnQgUGFnZU1lc3NhZ2UgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9QYWdlTWVzc2FnZS9pbmRleC5qcyc7XG5cbmltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5cbmNvbnN0IGNscyA9IHtcbiAgZWxlbTogJ2NhdGVnb3JpZXMnLFxuICBsaXN0OiAnY2F0ZWdvcmllc19fbGlzdCcsXG4gIGxpc3RUb3A6ICdjYXRlZ29yaWVzX19saXN0LS10b3BjYXRlZ29yaWVzJyxcbiAgbGlzdFN1YmNhdHM6ICdjYXRlZ29yaWVzX19saXN0LS1zdWJjYXRlZ29yaWVzJyxcbiAgaXRlbTogJ2NhdGVnb3JpZXNfX2l0ZW0nLFxuICBpdGVtVG9wOiAnY2F0ZWdvcmllc19faXRlbS0tdG9wY2F0ZWdvcnknLFxuICBpdGVtU3ViOiAnY2F0ZWdvcmllc19faXRlbS0tc3ViY2F0ZWdvcnknLFxuICBpdGVtT3BlbjogJ2NhdGVnb3JpZXNfX2l0ZW0tLW9wZW4nLFxuICB0b2dnbGVyOiAnY2F0ZWdvcmllc19fdG9nZ2xlcicsXG4gIGNvdW50ZXI6ICdjYXRlZ29yaWVzX19jb3VudGVyJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5hcGlVcmwgPSBwcm9jZXNzLmVudi5BUElfVVJMIHx8ICdodHRwczovL2NvdXJzZS1qcy5qYXZhc2NyaXB0LnJ1JztcbiAgICB0aGlzLmZldGNoVXJsID0gYCR7dGhpcy5hcGlVcmx9L2FwaS9yZXN0L2NhdGVnb3JpZXM/X3NvcnQ9d2VpZ2h0Jl9yZWZzPXN1YmNhdGVnb3J5YDtcblxuICAgIHRoaXMubGlzdENsaWNrID0gdGhpcy5saXN0Q2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFzeW5jIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBjYXRlZ29yaWVzLCBtZXNzYWdlIH0gPSBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG4gICAgY29uc3QgaGVhZGVyID0gYDxoZWFkZXIgY2xhc3M9XCJwYWdlLWNvbnRlbnRfX2hlYWRlclwiPlxuICAgICAgICA8aDEgY2xhc3M9XCJwYWdlLWNvbnRlbnRfX3RpdGxlXCI+RGFzaGJvYXJkL0NhdGVnb3JpZXM8L2gxPlxuICAgICAgPC9oZWFkZXI+YDtcblxuICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChgPGRpdiBjbGFzcz1cInBhZ2UtY29udGVudFwiPlxuICAgICAgICAke2hlYWRlcn1cblxuICAgICAgICAke21lc3NhZ2UuZWxlbS5vdXRlckhUTUx9XG4gICAgICA8L2Rpdj5cbiAgICAgIGApO1xuICAgIH1cblxuICAgIGNvbnN0IGxpc3QgPSB0aGlzLmNyZWF0ZUxpc3QoY2F0ZWdvcmllcyk7XG4gICAgdGhpcy5lbGVtID0gY3JlYXRlRWxlbWVudChgPGRpdiBjbGFzcz1cInBhZ2UtY29udGVudFwiPlxuICAgICAgJHtoZWFkZXJ9XG5cbiAgICAgIDxzZWN0aW9uIGNsYXNzPVwicGFnZS1zZWN0aW9uIGNhdGVnb3JpZXNcIj5cbiAgICAgICAgPGgyIGNsYXNzPVwicGFnZS1zZWN0aW9uX190aXRsZVwiPkNhdGVnb3JpZXM8L2gyPlxuXG4gICAgICAgICR7bGlzdH1cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8L2Rpdj5gKTtcblxuICAgIHRoaXMuYWRkRXZlbnRzKCk7XG5cbiAgICByZXR1cm4gdGhpcy5lbGVtO1xuICB9XG5cbiAgYXN5bmMgbG9hZERhdGEgKCkge1xuICAgIC8vIFRPRE86INC40L3QtNC40LrQsNGC0L7RgCDQt9Cw0LPRgNGD0LfQutC4XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSBhd2FpdCBmZXRjaEpzb24odGhpcy5mZXRjaFVybCk7XG5cbiAgICAgIHJldHVybiB7IGNhdGVnb3JpZXMgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gU2hvdyBlcnJvciBtZXNzYWdlIHRvIHVzZXJcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgUGFnZU1lc3NhZ2UoeyBlcnJvciB9KTtcblxuICAgICAgcmV0dXJuIHsgbWVzc2FnZSB9O1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUxpc3QgKGl0ZW1zLCBpc1N1YmNhdCA9IGZhbHNlKSB7XG4gICAgbGV0IGl0ZW1zU3RyID0gJyc7XG4gICAgbGV0IGxpc3RDbGFzcyA9IGNscy5saXN0VG9wO1xuICAgIGxldCBpdGVtQ2xhc3MgPSBjbHMuaXRlbTtcbiAgICBsZXQgaXNEcmFnZ2FibGVBdHRyID0gJyc7XG5cbiAgICBpZiAoaXNTdWJjYXQpIHtcbiAgICAgIGxpc3RDbGFzcyA9IGNscy5saXN0U3ViY2F0cztcbiAgICAgIGl0ZW1DbGFzcyArPSBgICR7Y2xzLml0ZW1TdWJ9YDtcbiAgICAgIGlzRHJhZ2dhYmxlQXR0ciA9ICdpcz1cImRyYWdnYWJsZS1saXN0XCInO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtQ2xhc3MgKz0gYCAke2Nscy5pdGVtVG9wfWA7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgbGV0IHN1YkNhdHNMaXN0ID0gJyc7XG4gICAgICBsZXQgdGl0bGUgPSBpdGVtLnRpdGxlO1xuICAgICAgY29uc3Qgc3ViQ2F0cyA9IGl0ZW0uc3ViY2F0ZWdvcmllcztcbiAgICAgIGxldCBjb3VudGVyID0gJyc7XG5cbiAgICAgIGlmIChpc1N1YmNhdCkge1xuICAgICAgICBjb25zdCBjb3VudGVyVGV4dCA9IHRoaXMuZ2V0UGx1cmFsKGl0ZW0uY291bnQsIFsncHJvZHVjdCcsICdwcm9kdWN0cyddKTtcbiAgICAgICAgY291bnRlciA9IGA8c3BhbiBjbGFzcz1cIiR7Y2xzLmNvdW50ZXJ9XCI+JHtjb3VudGVyVGV4dH08L3NwYW4+YDtcbiAgICAgIH1cblxuICAgICAgLy8gY29uc29sZS5sb2coaXRlbSlcblxuICAgICAgaWYgKHN1YkNhdHMpIHtcbiAgICAgICAgdGl0bGUgPSBgIDxidXR0b24gY2xhc3M9XCIke2Nscy50b2dnbGVyfVwiPiR7aXRlbS50aXRsZX08L2J1dHRvbj5gO1xuICAgICAgICBzdWJDYXRzTGlzdCA9IHRoaXMuY3JlYXRlTGlzdChzdWJDYXRzLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaXRlbXNTdHIgKz0gYDxsaSBjbGFzcz1cIiR7aXRlbUNsYXNzfVwiPlxuICAgICAgICAke3RpdGxlfVxuICAgICAgICAke2NvdW50ZXJ9XG4gICAgICAgICR7c3ViQ2F0c0xpc3R9XG4gICAgICA8L2xpPmA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGA8dWxcbiAgICAgIGNsYXNzPVwiJHtjbHMubGlzdH0gJHtsaXN0Q2xhc3N9XCIgJHtpc0RyYWdnYWJsZUF0dHJ9XG4gICAgICA+XG4gICAgICAke2l0ZW1zU3RyfVxuICAgIDwvdWw+YDtcbiAgfVxuXG4gIGFkZEV2ZW50cyAoKSB7XG4gICAgY29uc3QgbGlzdCA9IHRoaXMuZWxlbS5xdWVyeVNlbGVjdG9yKGAuJHtjbHMubGlzdFRvcH1gKTtcbiAgICBsaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5saXN0Q2xpY2spO1xuICB9XG5cbiAgbGlzdENsaWNrICgpIHtcbiAgICBjb25zdCBjb250cm9sID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoYC4ke2Nscy50b2dnbGVyfWApO1xuICAgIGlmICghY29udHJvbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGl0ZW1Ub3AgPSBldmVudC50YXJnZXQuY2xvc2VzdChgLiR7Y2xzLml0ZW1Ub3B9YCk7XG4gICAgaXRlbVRvcC5jbGFzc0xpc3QudG9nZ2xlKGNscy5pdGVtT3Blbik7XG4gIH1cblxuICBnZXRQbHVyYWwgKG51bSwgdmFyaWFudHMpIHtcbiAgICBsZXQgdmFyaWFudCA9IHZhcmlhbnRzWzBdO1xuICAgIGlmIChudW0gIT09IDEpIHtcbiAgICAgIHZhcmlhbnQgPSB2YXJpYW50c1sxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYCR7bnVtfSAke3ZhcmlhbnR9YDtcbiAgfVxufVxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY2F0ZWdvcmllc19fbGlzdHt3aWR0aDoxMDAlO2xpc3Qtc3R5bGUtdHlwZTpub25lO21hcmdpbjowO3BhZGRpbmc6MH0uY2F0ZWdvcmllc19fbGlzdC0tc3ViY2F0ZWdvcmllc3tkaXNwbGF5Om5vbmU7bWFyZ2luLXRvcDouNXJlbTttYXJnaW4tYm90dG9tOjFyZW19LmNhdGVnb3JpZXNfX2l0ZW17Ym9yZGVyLXJhZGl1czp2YXIoLS1yYWRpdXMpO2JhY2tncm91bmQ6dmFyKC0td2hpdGUpO2JvcmRlcjoxcHggc29saWQgdmFyKC0tZ3JleS1saWdodCl9LmNhdGVnb3JpZXNfX2l0ZW0tLXRvcGNhdGVnb3J5e21hcmdpbjoxcmVtfS5jYXRlZ29yaWVzX19pdGVtLS10b3BjYXRlZ29yeSsuY2F0ZWdvcmllc19faXRlbS0tdG9wY2F0ZWdvcnl7bWFyZ2luLXRvcDoxcmVtfS5jYXRlZ29yaWVzX19pdGVtLS1zdWJjYXRlZ29yeXtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO21hcmdpbjowIDFyZW0gMCAycmVtO3BhZGRpbmc6MXJlbX0uY2F0ZWdvcmllc19faXRlbS0tc3ViY2F0ZWdvcnkrLmNhdGVnb3JpZXNfX2l0ZW0tLXN1YmNhdGVnb3J5e21hcmdpbi10b3A6LjVyZW19LmNhdGVnb3JpZXNfX2l0ZW0tLW9wZW57YmFja2dyb3VuZDp2YXIoLS1ncmV5LWV4dHJhLWxpZ2h0KTtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWdyZXktbGlnaHQpfS5jYXRlZ29yaWVzX19pdGVtLS1vcGVuIC5jYXRlZ29yaWVzX19saXN0LS1zdWJjYXRlZ29yaWVze2Rpc3BsYXk6YmxvY2t9LmNhdGVnb3JpZXNfX2NvdW50ZXJ7bWFyZ2luLWxlZnQ6YXV0bztjb2xvcjp2YXIoLS1ncmV5KX0uY2F0ZWdvcmllc19fdG9nZ2xlcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMCU7Ym9yZGVyOm5vbmU7cGFkZGluZzoxcmVtO3RleHQtYWxpZ246bGVmdDtjdXJzb3I6cG9pbnRlcn0uY2F0ZWdvcmllc19fdG9nZ2xlcjo6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jazt3aWR0aDowO2hlaWdodDowO21hcmdpbi1yaWdodDouNXJlbTtib3JkZXI6LjVyZW0gc29saWQ7Ym9yZGVyLWJvdHRvbTowO2JvcmRlci1jb2xvcjp2YXIoLS1ncmV5LWxpZ2h0KSB0cmFuc3BhcmVudDt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1c30uY2F0ZWdvcmllc19faXRlbS0tb3BlbiAuY2F0ZWdvcmllc19fdG9nZ2xlcjo6YmVmb3Jle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcblxuY29uc3QgZnJvbSA9IG5ldyBEYXRlKCk7XG5mcm9tLnNldE1vbnRoKGZyb20uZ2V0TW9udGgoKSAtIDEpO1xuY29uc3QgdG8gPSBuZXcgRGF0ZSgpO1xuXG5jb25zdCBkYXRlcyA9IHtcbiAgZnJvbTogZnJvbS50b0lTT1N0cmluZygpLFxuICB0bzogdG8udG9JU09TdHJpbmcoKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICBhc3luYyByZW5kZXIgKCkge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KGA8ZGl2IGNsYXNzPVwicGFnZS1jb250ZW50XCI+XG4gICAgICA8aGVhZGVyIGNsYXNzPVwicGFnZS1jb250ZW50X19oZWFkZXJcIj5cbiAgICAgICAgPGgxIGNsYXNzPVwicGFnZS1jb250ZW50X190aXRsZVwiPkRhc2hib2FyZDwvaDE+XG5cbiAgICAgICAgPHJhbmdlLXBpY2tlclxuICAgICAgICAgIGRhdGEtZnJvbT1cIiR7ZGF0ZXMuZnJvbX1cIlxuICAgICAgICAgIGRhdGEtdG89XCIke2RhdGVzLnRvfVwiXG4gICAgICAgID48L3JhbmdlLXBpY2tlcj5cbiAgICAgIDwvaGVhZGVyPlxuXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVwicGFnZS1zZWN0aW9uIHBhZ2Utc2VjdGlvbi0tY29sdW1uLWNoYXJ0c1wiPlxuICAgICAgICAgIDxjb2x1bW4tY2hhcnRcbiAgICAgICAgICAgIGRhdGEtdHlwZT1cIm9yZGVyc1wiXG4gICAgICAgICAgICBkYXRhLWZyb209XCIke2RhdGVzLmZyb219XCJcbiAgICAgICAgICAgIGRhdGEtdG89XCIke2RhdGVzLnRvfVwiXG4gICAgICAgICAgPjwvY29sdW1uLWNoYXJ0PlxuXG4gICAgICAgICAgPGNvbHVtbi1jaGFydFxuICAgICAgICAgICAgZGF0YS10eXBlPVwic2FsZXNcIlxuICAgICAgICAgICAgZGF0YS1pcy1tb25leT1cInRydWVcIlxuICAgICAgICAgICAgZGF0YS1mcm9tPVwiJHtkYXRlcy5mcm9tfVwiXG4gICAgICAgICAgICBkYXRhLXRvPVwiJHtkYXRlcy50b31cIlxuICAgICAgICAgID48L2NvbHVtbi1jaGFydD5cblxuICAgICAgICAgIDxjb2x1bW4tY2hhcnRcbiAgICAgICAgICAgIGRhdGEtdHlwZT1cImN1c3RvbWVyc1wiXG4gICAgICAgICAgICBkYXRhLWZyb209XCIke2RhdGVzLmZyb219XCJcbiAgICAgICAgICAgIGRhdGEtdG89XCIke2RhdGVzLnRvfVwiXG4gICAgICAgICAgPjwvY29sdW1uLWNoYXJ0PlxuICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJwYWdlLXNlY3Rpb25cIj5cbiAgICAgICAgICA8aDIgY2xhc3M9XCJwYWdlLXNlY3Rpb25fX3RpdGxlXCI+QmVzdHNlbGxlcnM8L2gyPlxuXG4gICAgICAgIDxzb3J0YWJsZS10YWJsZVxuICAgICAgICAgIGRhdGEtdXJsPVwiL2FwaS9kYXNoYm9hcmQvYmVzdHNlbGxlcnM/X2VtYmVkPXN1YmNhdGVnb3J5LmNhdGVnb3J5XCIsXG4gICAgICAgICAgZGF0YS1pcy1keW5hbWljPVwiMFwiXG4gICAgICAgICAgZGF0YS1maWVsZHMtbGlzdD1cIlsnaW1hZ2VzJywgJ3RpdGxlJywgJ3N1YmNhdGVnb3J5JywgJ3F1YW50aXR5JywgJ3ByaWNlJywgJ3N0YXR1cyddXCJcbiAgICAgICAgICBkYXRhLW9yZGVyLWZpZWxkPSd0aXRsZScsXG4gICAgICAgICAgZGF0YS1vcmRlci1kaXJlY3Rpb249XCIxXCJcbiAgICAgICAgICBkYXRhLWZyb209XCIke2RhdGVzLmZyb219XCJcbiAgICAgICAgICBkYXRhLXRvPVwiJHtkYXRlcy50b31cIlxuICAgICAgICAgID48L3NvcnRhYmxlLXRhYmxlPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L2Rpdj5gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gIGFzeW5jIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoYDxkaXYgY2xhc3M9XCI0MDRcIj5cbiAgICAgICAgPGgxPlBhZ2Ugbm90IGZvdW5kPC9oMT5cbiAgICAgICAgPHA+Tm8gc3VjaCBwYWdlPC9wPlxuICAgICAgPC9kaXY+YCk7XG4gIH1cbn1cbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLi9pY29uLXRyYXNoLnN2Z1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnByb2R1Y3QtZm9ybXttYXJnaW4tYm90dG9tOjJyZW19LnByb2R1Y3QtZm9ybV9fbGlzdCwucHJvZHVjdC1mb3JtX19mb290ZXJ7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoMywgMWZyKTtncmlkLWdhcDoxcmVtfS5wcm9kdWN0LWZvcm1fX2xpc3R7bWFyZ2luOjA7cGFkZGluZzowO2xpc3Qtc3R5bGUtdHlwZTpub25lfS5wcm9kdWN0LWZvcm1fX2l0ZW17Z3JpZC1jb2x1bW46MSAvIHNwYW4gMn0ucHJvZHVjdC1mb3JtX19pdGVtLS1mdWxse2dyaWQtY29sdW1uOjEgLyBzcGFuIDN9LnByb2R1Y3QtZm9ybV9faXRlbS0tdGlueXtncmlkLWNvbHVtbjoxIC8gc3BhbiAxfS5wcm9kdWN0LWZvcm1fX2l0ZW0tLWZvbGxvd3tncmlkLWNvbHVtbi1zdGFydDphdXRvfS5wcm9kdWN0LWZvcm1fX2l0ZW0rLnByb2R1Y3QtZm9ybV9faXRlbXttYXJnaW4tdG9wOjFyZW19LnByb2R1Y3QtZm9ybV9fbGlua3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MH0ucHJvZHVjdC1mb3JtX19pbnB1dC0tdGV4dGFyZWF7bWluLWhlaWdodDoyMDBweH0ucHJvZHVjdC1mb3JtX19pbWFnZXMtbGlzdHttYXJnaW46MDtwYWRkaW5nOjA7bGlzdC1zdHlsZS10eXBlOm5vbmV9LnByb2R1Y3QtZm9ybV9faW1hZ2VzLWl0ZW17ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOi41cmVtO2JhY2tncm91bmQ6dmFyKC0tZ3JleS1leHRyYS1saWdodCk7Ym9yZGVyLXJhZGl1czp2YXIoLS1yYWRpdXMpfS5wcm9kdWN0LWZvcm1fX2ltYWdlcy1pdGVtKy5wcm9kdWN0LWZvcm1fX2ltYWdlcy1pdGVte21hcmdpbi10b3A6LjVyZW19LnByb2R1Y3QtZm9ybV9faW1hZ2Utd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZX0ucHJvZHVjdC1mb3JtX19pbWFnZXtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7bWF4LXdpZHRoOjgwcHg7bWluLXdpZHRoOjQwcHg7aGVpZ2h0OjQwcHg7b2JqZWN0LWZpdDpjb250YWluO3BhZGRpbmc6NHB4O2JvcmRlcjoxcHggc29saWQgdmFyKC0tZ3JleS1saWdodCk7YmFja2dyb3VuZDp2YXIoLS13aGl0ZSk7Ym9yZGVyLXJhZGl1czp2YXIoLS1yYWRpdXMpfS5wcm9kdWN0LWZvcm1fX3ByZXZpZXd7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoyO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO29wYWNpdHk6MDtwYWRkaW5nOi4yNWVtO2JhY2tncm91bmQtb3JpZ2luOmNvbnRlbnQtYm94O2JhY2tncm91bmQtY29sb3I6dmFyKC0td2hpdGUpO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJSA1MCU7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1ncmV5LWxpZ2h0KTt0cmFuc2l0aW9uOmFsbCAuMjVzfS5wcm9kdWN0LWZvcm1fX3ByZXZpZXc6aG92ZXJ7d2lkdGg6MzAwJTtoZWlnaHQ6MzAwJTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMzUlKSB0cmFuc2xhdGVZKC0zNSUpO29wYWNpdHk6MX0ucHJvZHVjdC1mb3JtX19pbWFnZS1zb3VyY2V7bWFyZ2luLWxlZnQ6MXJlbX0ucHJvZHVjdC1mb3JtX19pbWFnZS1yZW1vdmV7d2lkdGg6M3JlbTthbGlnbi1zZWxmOnN0cmV0Y2g7bWFyZ2luLWxlZnQ6YXV0bztiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgNTAlIDUwJSBuby1yZXBlYXQ7Zm9udC1zaXplOjA7Ym9yZGVyOm5vbmV9LnByb2R1Y3QtZm9ybV9fZm9vdGVye21hcmdpbi10b3A6MnJlbX1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gIGFzeW5jIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoYDxkaXYgY2xhc3M9XCJwYWdlLWNvbnRlbnRcIj5cbiAgICAgIDxoZWFkZXIgY2xhc3M9XCJwYWdlLWNvbnRlbnRfX2hlYWRlclwiPlxuICAgICAgICA8aDEgY2xhc3M9XCJwYWdlLWNvbnRlbnRfX3RpdGxlXCI+RGFzaGJvYXJkL1Byb2R1Y3RzPC9oMT5cbiAgICAgIDwvaGVhZGVyPlxuXG4gICAgICA8c2VjdGlvbiBjbGFzcz1cInBhZ2Utc2VjdGlvblwiPlxuICAgICAgICA8aDIgY2xhc3M9XCJwYWdlLXNlY3Rpb25fX3RpdGxlXCI+UHJvZHVjdHM8L2gyPlxuXG4gICAgICAgIDxzb3J0YWJsZS10YWJsZVxuICAgICAgICAgIGRhdGEtdXJsPVwiL2FwaS9yZXN0L3Byb2R1Y3RzP19lbWJlZD1zdWJjYXRlZ29yeS5jYXRlZ29yeVwiLFxuICAgICAgICAgIGRhdGEtaXMtZHluYW1pYz1cIjFcIlxuICAgICAgICAgIGRhdGEtZmllbGRzLWxpc3Q9XCJbJ2ltYWdlcycsICd0aXRsZScsICdzdWJjYXRlZ29yeScsICdxdWFudGl0eScsICdwcmljZScsICdzdGF0dXMnXVwiXG4gICAgICAgICAgZGF0YS1vcmRlci1maWVsZD0ndGl0bGUnLFxuICAgICAgICAgIGRhdGEtb3JkZXItZGlyZWN0aW9uPVwiMVwiXG4gICAgICAgICAgPjwvc29ydGFibGUtdGFibGU+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9kaXY+YCk7XG4gIH1cbn1cbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkobW9kdWxlLmlkLCBjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiOnJvb3R7LS1ibHVlOiAjMTA5Q0YxOy0tZGFyay1ibHVlOiAjMzM0RDZFOy0tbGlnaHQtYmx1ZTogI0NGRUJGQzstLW1pZGRsZS1ibHVlOiAjOUZEN0Y5Oy0teWVsbG93OiAjRkZCOTQ2Oy0tcmVkOiAjRjc2ODVCOy0tZ3JlZW46ICMyRUQ0N0E7LS1wdXJwbGU6ICM4ODVBRjg7LS1ibGFjazogIzE5MkEzRTstLXRhYmxlLWJsYWNrOiAjMzIzQzQ3Oy0tdGFibGUtZ3JleTogIzcwNzY4MzstLWdyZXk6ICM5MEEwQjc7LS1ncmV5LWxpZ2h0OiAjQzJDRkUwOy0tZ3JleS1leHRyYS1saWdodDogI0VGRjFGNDstLWdyZXktc2tlbGV0b246ICNGNUY2Rjg7LS13aGl0ZTogI0ZGRjstLXJhZGl1czogNHB4fSp7Ym94LXNpemluZzpib3JkZXItYm94fUhUTUx7Zm9udC1zaXplOjE2cHh9Qk9EWXtkaXNwbGF5OmZsZXg7bWluLWhlaWdodDoxMDB2aDttYXJnaW46MDtiYWNrZ3JvdW5kOiNGRkY7Zm9udDoxcmVtLzEuNCBUcmVidWNoZXQgTVMsIFZlcmRhbmEsIHNhbnMtc2VyaWY7Y29sb3I6IzAwMH1IMSxIMixIMyxINHttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTouNWVtO2ZvbnQtd2VpZ2h0Om5vcm1hbH1IMXtmb250LXNpemU6Mi43NXJlbX1BLEE6dmlzaXRlZCxBOmhvdmVye2NvbG9yOmluaGVyaXR9QTpob3Zlcnt0ZXh0LWRlY29yYXRpb246bm9uZX1CVVRUT04sSU5QVVQsVEVYVEFSRUEsU0VMRUNUe2Rpc3BsYXk6YmxvY2s7cGFkZGluZzouNXJlbTtiYWNrZ3JvdW5kOm5vbmU7Ym9yZGVyLXJhZGl1czp2YXIoLS1yYWRpdXMpO2ZvbnQ6aW5oZXJpdH1JTlBVVCxURVhUQVJFQSxTRUxFQ1R7d2lkdGg6MTAwJTtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWdyZXktbGlnaHQpfS5wYWdlLWxheW91dHtkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJX0uc3Bpbm5lcntkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjJyZW07bGVmdDowO3JpZ2h0OjA7d2lkdGg6NHJlbTtoZWlnaHQ6NHJlbTttYXJnaW46YXV0bztiYWNrZ3JvdW5kOnZhcigtLXdoaXRlKTtib3gtc2hhZG93OjAgMCAuNXJlbSBjdXJyZW50Q29sb3I7Ym9yZGVyLXJhZGl1czo1MCU7Y29sb3I6dmFyKC0tZ3JleS1saWdodCl9W2RhdGEtbG9hZGluZz1cXFwiMVxcXCJdIC5zcGlubmVye2Rpc3BsYXk6YmxvY2t9LnNwaW5uZXI6OmJlZm9yZSwuc3Bpbm5lcjo6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDttYXJnaW46YXV0bztib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjNweCBzb2xpZDtib3JkZXItY29sb3I6Y3VycmVudENvbG9yIHRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6NTAlO2FuaW1hdGlvbjpyb3RhdGUgMi4xcyBsaW5lYXIgaW5maW5pdGV9LnNwaW5uZXI6OmJlZm9yZXt3aWR0aDoyLjI1cmVtO2hlaWdodDoyLjI1cmVtfS5zcGlubmVyOjphZnRlcnt3aWR0aDoxLjI1cmVtO2hlaWdodDoxLjI1cmVtO2FuaW1hdGlvbi1kdXJhdGlvbjoxLjNzO2FuaW1hdGlvbi1kaXJlY3Rpb246cmV2ZXJzZX1Aa2V5ZnJhbWVzIHJvdGF0ZXtmcm9te3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9dG97dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvaW5kZXguanMnO1xuaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGF5b3V0IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25uZWN0ZWRDYWxsYmFjayAoKSB7XG4gICAgdGhpcy5hcHBlbmQodGhpcy5yZW5kZXIoKSk7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdwYWdlJyk7XG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KGA8ZGl2IGNsYXNzPVwicGFnZS1jb250YWluZXJcIj5cbiAgICAgIDxhc2lkZSBjbGFzcz1cInBhZ2UtYXNpZGVcIj5cbiAgICAgICAgPG5hdj5cbiAgICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIDxhIGhyZWY9XCIuL1wiPkRhc2hib2FyZDwvYT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIDxhIGhyZWY9XCIuL3Byb2R1Y3RzXCI+UHJvZHVjdHM8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YSBocmVmPVwiLi9jYXRlZ29yaWVzXCI+Q2F0ZWdvcmllczwvYT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9uYXY+XG4gICAgICA8L2FzaWRlPlxuXG4gICAgICA8bWFpbiBjbGFzcz1cInBhZ2UtbWFpblwiIGlkPVwiY29udGVudFwiPlxuICAgICAgICA8IS0tIG1haW4gY29udGVudCB3aWxsIGJlIGhlcmUgLS0+XG4gICAgICA8L21haW4+XG4gICAgPC9kaXY+YCk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZWxlbTogJ3Rvb2x0aXBzLWNvbnRhaW5lcicsXG4gIGRpbW1lZDogJ3Rvb2x0aXBzLWNvbnRhaW5lci0tZGltbWVkJyxcbiAgdG9vbHRpcDogJ3Rvb2x0aXAnXG59O1xuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvaW5kZXguanMnO1xuaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbHRpcHMge1xuICBjb25zdHJ1Y3RvciAoeyBlbGVtLCBkaW1TaWJsaW5ncyB9KSB7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZChjbHMuZWxlbSk7XG4gICAgdGhpcy5kaW1TaWJsaW5ncyA9IGRpbVNpYmxpbmdzO1xuXG4gICAgdGhpcy50b29sdGlwID0gY3JlYXRlRWxlbWVudChgPGRpdiBjbGFzcz1cIiR7Y2xzLnRvb2x0aXB9XCI+PC9kaXY+YCk7XG4gICAgdGhpcy5lbGVtLmFwcGVuZCh0aGlzLnRvb2x0aXApO1xuXG4gICAgdGhpcy5saXN0TW91c2VNb3ZlID0gdGhpcy5saXN0TW91c2VNb3ZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5saXN0TW91c2VPdXQgPSB0aGlzLmxpc3RNb3VzZU91dC5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5lbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubGlzdE1vdXNlTW92ZSk7XG4gICAgdGhpcy5lbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLmxpc3RNb3VzZU91dCk7XG4gIH1cblxuICBsaXN0TW91c2VNb3ZlICgpIHtcbiAgICBpZiAoIWV2ZW50LnRhcmdldC5kYXRhc2V0LnRvb2x0aXBDb250ZW50KSB7XG4gICAgICB0aGlzLmhpZGVUb29sdGlwKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyB0b29sdGlwQ29udGVudCB9ID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQ7XG4gICAgdGhpcy50b29sdGlwLmlubmVySFRNTCA9IHRvb2x0aXBDb250ZW50O1xuICAgIHRoaXMudG9vbHRpcC5kYXRhc2V0LnZpc2libGUgPSAxO1xuXG4gICAgLy8gUGFyZW50IGNvbnRhaW5lciBjb29yZHNcbiAgICB0aGlzLmVsZW1Db29yZHMgPSB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgY29vcmRzID0ge1xuICAgICAgeDogZXZlbnQuY2xpZW50WCAtIHRoaXMuZWxlbUNvb3Jkcy54LFxuICAgICAgeTogZXZlbnQuY2xpZW50WSAtIHRoaXMuZWxlbUNvb3Jkcy55XG4gICAgfTtcblxuICAgIHRoaXMudG9vbHRpcC5zdHlsZSA9IGB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgke2Nvb3Jkcy54fXB4LCAke2Nvb3Jkcy55fXB4KWA7XG5cbiAgICAvLyBGaXggY3V0dGluZyBieSB3aW5kb3dcbiAgICB0aGlzLnRvb2x0aXBDb29yZHMgPSB0aGlzLnRvb2x0aXAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgaGlkZGVuQnlXaW5kb3cgPSB0aGlzLnRvb2x0aXBDb29yZHMucmlnaHQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG5cbiAgICBpZiAoaGlkZGVuQnlXaW5kb3cgPiAwKSB7XG4gICAgICBjb29yZHMueCAtPSBoaWRkZW5CeVdpbmRvdztcbiAgICAgIHRoaXMudG9vbHRpcC5zdHlsZSA9IGB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgke2Nvb3Jkcy54fXB4LCAke2Nvb3Jkcy55fXB4KWA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGltU2libGluZ3MpIHtcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKGNscy5kaW1tZWQpO1xuICAgIH1cbiAgfVxuXG4gIGxpc3RNb3VzZU91dCAoKSB7XG4gICAgaWYgKCFldmVudC50YXJnZXQuZGF0YXNldC50b29sdGlwQ29udGVudCkge1xuICAgICAgdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgIH1cbiAgfVxuXG4gIGhpZGVUb29sdGlwICgpIHtcbiAgICB0aGlzLnRvb2x0aXAuZGF0YXNldC52aXNpYmxlID0gMDtcbiAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbHMuZGltbWVkKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBlbGVtOiAnY29sdW1uLWNoYXJ0JyxcbiAgY29udGVudDogJ2NvbHVtbi1jaGFydF9fY29udGVudCcsXG4gIGhlYWRlcjogJ2NvbHVtbi1jaGFydF9faGVhZGVyJyxcbiAgdGl0bGU6ICdjb2x1bW4tY2hhcnRfX3RpdGxlJyxcbiAgdG90YWw6ICdjb2x1bW4tY2hhcnRfX3RvdGFsJyxcbiAgbGlzdDogJ2NvbHVtbi1jaGFydF9fbGlzdCcsXG4gIGl0ZW06ICdjb2x1bW4tY2hhcnRfX2l0ZW0nLFxuICB0b29sdGlwOiAnY29sdW1uLWNoYXJ0X190b29sdGlwJyxcbiAgdG9vbHRpcERhdGU6ICdjb2x1bW4tY2hhcnRfX3Rvb2x0aXAtZGF0ZScsXG4gIHRvb2x0aXBRdWFudGl0eTogJ2NvbHVtbi1jaGFydF9fdG9vbHRpcC1xdWFudGl0eScsXG4gIGVycm9yOiAnY29sdW1uLWNoYXJ0X19lcnJvcidcbn07XG4iLCJpbXBvcnQgY2xzIGZyb20gJy4vY2xhc3Nlcy5qcyc7XG5cbmV4cG9ydCBjb25zdCBoZWFkZXIgPSBgPGhlYWRlciBjbGFzcz1cIiR7Y2xzLmhlYWRlcn1cIj5cbiAgPGgzIGNsYXNzPVwiJHtjbHMudGl0bGV9XCI+e3RpdGxlfTwvaDM+XG4gIDxkaXYgY2xhc3M9XCIke2Nscy50b3RhbH1cIj57dG90YWx9PC9kaXY+XG48L2hlYWRlcj5gO1xuXG5leHBvcnQgY29uc3QgY2hhcnRJdGVtID0gYDxsaVxuICBjbGFzcz1cIiR7Y2xzLml0ZW19XCJcbiAgZGF0YS10b29sdGlwLWNvbnRlbnQ9XCJ7dG9vdGlwQ29udGVudH1cIlxuICBzdHlsZT1cImhlaWdodDoge2hlaWdodH1cIj48L2xpPmA7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaGVhZGVyLFxuICBjaGFydEl0ZW1cbn07XG4iLCJpbXBvcnQgVG9vbHRpcHMgZnJvbSAnLi4vVG9vbHRpcHMvaW5kZXguanMnO1xuaW1wb3J0IHtcbiAgZmlsbFRlbXBsYXRlLFxuICBmb3JtYXREYXRlLFxuICBlc2NhcGVIVE1MLFxuICBmb3JtYXRUb3RhbCxcbiAgZmV0Y2hKc29uXG59IGZyb20gJy4uLy4uL2hlbHBlcnMvaW5kZXguanMnO1xuaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuaW1wb3J0IHRlbXBsYXRlcyBmcm9tICcuL3RlbXBsYXRlcy5qcyc7XG5cbmltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbHVtbkNoYXJ0IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuYXBpVXJsID0gcHJvY2Vzcy5lbnYuQVBJX1VSTCB8fCAnaHR0cHM6Ly9jb3Vyc2UtanMuamF2YXNjcmlwdC5ydSc7XG5cbiAgICB0aGlzLmNoYW5nZURhdGUgPSB0aGlzLmNoYW5nZURhdGUuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFzeW5jIGNvbm5lY3RlZENhbGxiYWNrICgpIHtcbiAgICBjb25zdCB7IHR5cGUsIGlzTW9uZXksIGZyb20sIHRvIH0gPSB0aGlzLmRhdGFzZXQ7XG5cbiAgICB0aGlzLmRhdGVzID0ge1xuICAgICAgZnJvbTogbmV3IERhdGUoZnJvbSksXG4gICAgICB0bzogbmV3IERhdGUodG8pXG4gICAgfTtcblxuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5mb3JtYXRUb3RhbCA9IGlzTW9uZXkgPyBmb3JtYXRUb3RhbCA6IG51bGw7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKGNscy5lbGVtLCBgJHtjbHMuZWxlbX0tLSR7dHlwZX1gKTtcbiAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZChjbHMuY29udGVudCk7XG4gICAgdGhpcy50aXRsZSA9IGBUb3RhbCAke3R5cGV9YDtcbiAgICB0aGlzLnVybCA9IHRoaXMuZ2V0VXJsKCk7XG5cbiAgICBhd2FpdCB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMuYXBwZW5kKHRoaXMuZWxlbSk7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2VEYXRlJywgdGhpcy5jaGFuZ2VEYXRlKTtcbiAgfVxuXG4gIGdldFVybCAoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuYXBpVXJsfS9hcGkvZGFzaGJvYXJkLyR7dGhpcy50eXBlfT9mcm9tPSR7dGhpcy5kYXRlcy5mcm9tfSZ0bz0ke3RoaXMuZGF0ZXMudG99YDtcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2hKc29uKHRoaXMudXJsKTtcbiAgICAgIHJldHVybiB7IGRhdGEgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgICB9XG4gIH1cblxuICBhc3luYyByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuZ2V0RGF0YSgpO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRoaXMuZWxlbS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZUVuZCcsIGA8ZGl2IGNsYXNzPVwiJHtjbHMuZXJyb3J9XCI+JHtlcnJvcn08L2Rpdj5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcy5kYXRhKTtcblxuICAgIGlmICh0aGlzLnZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMudmFsdWVzLnB1c2goJ05vIGRhdGEnKTtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJTdHIgPSB0aGlzLmdldEhlYWRlclN0cigpO1xuXG4gICAgY29uc3QgbGlzdFN0ciA9IHRoaXMuZ2V0TGlzdFN0cigpO1xuICAgIHRoaXMuZWxlbS5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAnYmVmb3JlRW5kJyxcbiAgICAgIGhlYWRlclN0ciArIGxpc3RTdHJcbiAgICApO1xuXG4gICAgdGhpcy5hZGRBY3Rpb25zKCk7XG4gIH1cblxuICBnZXRIZWFkZXJTdHIgKCkge1xuICAgIHRoaXMudG90YWwgPSB0aGlzLnZhbHVlcy5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+IHByZXYgKyBjdXJyZW50LCAwKTtcblxuICAgIGlmICh0aGlzLmZvcm1hdFRvdGFsKSB7XG4gICAgICB0aGlzLnRvdGFsID0gdGhpcy5mb3JtYXRUb3RhbCh0aGlzLnRvdGFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsbFRlbXBsYXRlKHtcbiAgICAgIHRtcGw6IHRlbXBsYXRlcy5oZWFkZXIsXG4gICAgICBkYXRhOiB0aGlzXG4gICAgfSk7XG4gIH1cblxuICBnZXRMaXN0U3RyICgpIHtcbiAgICBjb25zdCBtYXggPSBNYXRoLm1heCguLi50aGlzLnZhbHVlcyk7XG4gICAgbGV0IGNoYXJ0U3RyID0gJyc7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgIGNvbnN0IGRhdGUgPSBmb3JtYXREYXRlKGtleSk7XG4gICAgICBsZXQgdmFsdWUgPSB0aGlzLmRhdGFba2V5XTtcbiAgICAgIGNvbnN0IGhlaWdodFZhbHVlID0gKCh2YWx1ZSAvIG1heCkgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgICBjb25zdCBoZWlnaHQgPSBgJHtoZWlnaHRWYWx1ZX0lYDtcblxuICAgICAgaWYgKHRoaXMuZm9ybWF0VG90YWwpIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLmZvcm1hdFRvdGFsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdG9vdGlwQ29udGVudCA9IGA8c21hbGwgY2xhc3M9XCIke2Nscy50b29sdGlwRGF0ZX1cIj4ke2RhdGV9PC9zbWFsbD48ZGl2IGNsYXNzPVwiJHtjbHMudG9vbHRpcFF1YW50aXR5fVwiPiR7dmFsdWV9PC9kaXY+YDtcblxuICAgICAgY2hhcnRTdHIgKz0gZmlsbFRlbXBsYXRlKHtcbiAgICAgICAgdG1wbDogdGVtcGxhdGVzLmNoYXJ0SXRlbSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIC4uLnRoaXMsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIHRvb3RpcENvbnRlbnQ6IGVzY2FwZUhUTUwodG9vdGlwQ29udGVudClcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGA8dWwgY2xhc3M9XCIke2Nscy5saXN0fVwiPiR7Y2hhcnRTdHJ9PC91bD5gO1xuICB9XG5cbiAgYWRkQWN0aW9ucyAoKSB7XG4gICAgdGhpcy50b29sdGlwcyA9IG5ldyBUb29sdGlwcyh7XG4gICAgICBlbGVtOiB0aGlzLmVsZW0sXG4gICAgICBkaW1TaWJsaW5nczogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgY2hhbmdlRGF0ZSAoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50LmRldGFpbCB8fCAhZXZlbnQuZGV0YWlsLmRhdGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBmcm9tLCB0byB9ID0gZXZlbnQuZGV0YWlsLmRhdGVzO1xuICAgIHRoaXMuZGF0ZXMgPSB7XG4gICAgICBmcm9tOiBmcm9tLFxuICAgICAgdG86IHRvXG4gICAgfTtcblxuICAgIHRoaXMudXJsID0gdGhpcy5nZXRVcmwoKTtcbiAgICB0aGlzLmVsZW0uaW5uZXJIVE1MID0gJyc7XG4gICAgYXdhaXQgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLmFwcGVuZCh0aGlzLmVsZW0pO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGVsZW06ICdyYW5nZXBpY2tlcicsXG4gIGVsZW1PcGVuOiAncmFuZ2VwaWNrZXItLW9wZW4nLFxuICBpbnB1dDogJ3JhbmdlcGlja2VyX19pbnB1dCcsXG4gIGZyb206ICdyYW5nZXBpY2tlcl9fZnJvbScsXG4gIHRvOiAncmFuZ2VwaWNrZXJfX3RvJyxcbiAgc2VsZWN0b3I6ICdyYW5nZXBpY2tlcl9fc2VsZWN0b3InLFxuICBzZWxlY3RvckFycm93OiAncmFuZ2VwaWNrZXJfX3NlbGVjdG9yLWFycm93JyxcbiAgc2VsZWN0b3JDb250cm9sOiAncmFuZ2VwaWNrZXJfX3NlbGVjdG9yLWNvbnRyb2wnLFxuICBjYWxlbmRhcnM6ICdyYW5nZXBpY2tlcl9fY2FsZW5kYXJzJyxcbiAgY2FsZW5kYXI6ICdyYW5nZXBpY2tlcl9fY2FsZW5kYXInLFxuICBjZWxsOiAncmFuZ2VwaWNrZXJfX2NlbGwnLFxuICBzZWxlY3RlZEZyb206ICdyYW5nZXBpY2tlcl9fc2VsZWN0ZWQtZnJvbScsXG4gIHNlbGVjdGVkQmV0d2VlbjogJ3JhbmdlcGlja2VyX19zZWxlY3RlZC1iZXR3ZWVuJyxcbiAgc2VsZWN0ZWRUbzogJ3JhbmdlcGlja2VyX19zZWxlY3RlZC10bycsXG4gIG1vbnRoSW5kaWNhdG9yOiAncmFuZ2VwaWNrZXJfX21vbnRoLWluZGljYXRvcicsXG4gIGRheU9mV2VlazogJ3JhbmdlcGlja2VyX19kYXktb2Ytd2VlaycsXG4gIGRhdGVHcmlkOiAncmFuZ2VwaWNrZXJfX2RhdGUtZ3JpZCdcbn07XG4iLCJpbXBvcnQgY2xzIGZyb20gJy4vY2xhc3Nlcy5qcyc7XG5cbmV4cG9ydCBjb25zdCBpbnB1dCA9IGA8YnV0dG9uIGNsYXNzPVwiJHtjbHMuaW5wdXR9XCIgZGF0YS1lbGVtPVwiaW5wdXRcIiB0eXBlPVwiYnV0dG9uXCI+XG4gIDxzcGFuXG4gICAgY2xhc3M9XCIke2Nscy5mcm9tfVwiXG4gICAgZGF0YS1lbGVtPVwiZnJvbVwiPntmcm9tfTwvc3Bhbj4gLVxuICA8c3BhblxuICAgIGNsYXNzPVwiJHtjbHMudG99XCJcbiAgICBkYXRhLWVsZW09XCJ0b1wiXG4gICAgPnt0b308L3NwYW4+XG48L2J1dHRvbj5gO1xuXG5leHBvcnQgY29uc3Qgc2VsZWN0b3IgPSBgXG48ZGl2IGNsYXNzPVwiJHtjbHMuc2VsZWN0b3J9XCIgZGF0YS1lbGVtPVwic2VsZWN0b3JcIj5cbiAgPGRpdiBjbGFzcz1cIiR7Y2xzLnNlbGVjdG9yQXJyb3d9XCI+PC9kaXY+XG4gIDxidXR0b25cbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICBjbGFzcz1cIiR7Y2xzLnNlbGVjdG9yQ29udHJvbH0gJHtjbHMuc2VsZWN0b3JDb250cm9sfS0tbGVmdFwiXG4gICAgZGF0YS1kaXJlY3Rpb249XCJwcmV2XCJcbiAgPjwvYnV0dG9uPlxuICA8YnV0dG9uXG4gICAgdHlwZT1cImJ1dHRvblwiXG4gICAgY2xhc3M9XCIke2Nscy5zZWxlY3RvckNvbnRyb2x9ICR7Y2xzLnNlbGVjdG9yQ29udHJvbH0tLXJpZ2h0XCJcbiAgICBkYXRhLWRpcmVjdGlvbj1cIm5leHRcIlxuICA+PC9idXR0b24+XG4gIDxkaXYgY2xhc3M9XCIke2Nscy5jYWxlbmRhcnN9XCI+PC9kaXY+XG48L2Rpdj5cbmA7XG5cbmV4cG9ydCBjb25zdCBjYWxlbmRhciA9IGBcbjxkaXYgY2xhc3M9XCIke2Nscy5jYWxlbmRhcn1cIj5cbiAgPGRpdiBjbGFzcz1cIiR7Y2xzLm1vbnRoSW5kaWNhdG9yfVwiPlxuICAgIDx0aW1lIGRhdGV0aW1lPVwie21vbnRofVwiPnttb250aH08L3RpbWU+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiJHtjbHMuZGF5T2ZXZWVrfVwiPlxuICAgIHt3ZWVrZGF5c31cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCIke2Nscy5kYXRlR3JpZH1cIj5cbiAgICB7ZGF5c31cbiAgPC9kaXY+XG48L2Rpdj5cbmA7XG5cbmV4cG9ydCBjb25zdCBkYXkgPSBgXG48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIiR7Y2xzLmNlbGx9IHttb2R9XCIgZGF0YS12YWx1ZT1cIntkYXRlVGltZX1cIiBzdHlsZT1cIntzdHlsZX1cIj57ZGF0ZU51bX08L2J1dHRvbj5cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5wdXQsXG4gIHNlbGVjdG9yLFxuICBjYWxlbmRhcixcbiAgZGF5XG59O1xuIiwiaW1wb3J0IHtcbiAgZmlsbFRlbXBsYXRlLFxuICBnZXRXZWVrRGF5c1xufSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCB0ZW1wbGF0ZXMgZnJvbSAnLi90ZW1wbGF0ZXMuanMnO1xuaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuXG5pbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0ICcuL2Fycm93LWljb24uc3ZnJztcbmltcG9ydCAnLi9jYWxlbmRhci1pY29uLnN2Zyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmdlUGlja2VyIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnRvZ2dsZVBpY2tlciA9IHRoaXMudG9nZ2xlUGlja2VyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZWxlY3Rvck9uQ2xpY2sgPSB0aGlzLnNlbGVjdG9yT25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYm9keU9uQ2xpY2sgPSB0aGlzLmJvZHlPbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVSYW5nZSA9IHRoaXMudXBkYXRlUmFuZ2UuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuaXNPcGVuZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVsZW0gPSB0aGlzO1xuICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKCdyYW5nZXBpY2tlcicpO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgIGNvbnN0IHsgZnJvbSwgdG8gfSA9IHRoaXMuZGF0YXNldDtcblxuICAgIHRoaXMuZGF0ZXMgPSB7XG4gICAgICBmcm9tOiBuZXcgRGF0ZShmcm9tKSxcbiAgICAgIHRvOiBuZXcgRGF0ZSh0bylcbiAgICB9O1xuXG4gICAgdGhpcy5tb250aGVzID0gdGhpcy5nZXREaXNwbGF5ZWRNb250aGVzKCk7XG4gICAgdGhpcy5uZXdEYXRlcyA9IFtdO1xuXG4gICAgdGhpcy5hZGRJbnB1dCgpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZURhdGUnLCB0aGlzLnVwZGF0ZVJhbmdlKTtcbiAgfVxuXG4gIGdldERpc3BsYXllZE1vbnRoZXMgKCkge1xuICAgIGNvbnN0IGN1cnJlbnRNb250aCA9IG5ldyBEYXRlKHRoaXMuZGF0ZXMuZnJvbSk7XG4gICAgbGV0IG1vbnRoID0gY3VycmVudE1vbnRoLmdldE1vbnRoKCk7XG4gICAgY29uc3QgY3VycmVudERheSA9IDE7XG4gICAgY3VycmVudE1vbnRoLnNldERhdGUoY3VycmVudERheSk7XG5cbiAgICBjb25zdCBuZXh0TW9udGggPSBuZXcgRGF0ZShjdXJyZW50TW9udGgpO1xuICAgIG5leHRNb250aC5zZXRNb250aCgrK21vbnRoKTtcblxuICAgIHJldHVybiBbY3VycmVudE1vbnRoLCBuZXh0TW9udGhdO1xuICB9XG5cbiAgYWRkSW5wdXQgKCkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBmcm9tOiB0aGlzLmRhdGVzLmZyb20udG9Mb2NhbGVEYXRlU3RyaW5nKCksXG4gICAgICB0bzogdGhpcy5kYXRlcy50by50b0xvY2FsZURhdGVTdHJpbmcoKVxuICAgIH07XG4gICAgY29uc3QgdG1wbCA9IHRlbXBsYXRlcy5pbnB1dDtcbiAgICBjb25zdCBpbnB1dFN0ciA9IGZpbGxUZW1wbGF0ZSh7XG4gICAgICB0bXBsLFxuICAgICAgZGF0YVxuICAgIH0pO1xuXG4gICAgdGhpcy5lbGVtLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJCZWdpbicsIGlucHV0U3RyKTtcbiAgICB0aGlzLmlucHV0ID0gdGhpcy5lbGVtLnF1ZXJ5U2VsZWN0b3IoYC4ke2Nscy5pbnB1dH1gKTtcbiAgICB0aGlzLmlucHV0RnJvbSA9IHRoaXMuaW5wdXQucXVlcnlTZWxlY3RvcihgLiR7Y2xzLmZyb219YCk7XG4gICAgdGhpcy5pbnB1dFRvID0gdGhpcy5pbnB1dC5xdWVyeVNlbGVjdG9yKGAuJHtjbHMudG99YCk7XG5cbiAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy50b2dnbGVQaWNrZXIpO1xuICAgIC8vIGNhcHR1cmU6IHRydWUgcmV2ZXJzZXMgb3JkZXIgb2YgZXZlbnRzXG4gICAgLy8gY2xpY2sgb24gYm9keSBmaXJlcyBmaXJzdFxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmJvZHlPbkNsaWNrLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBib2R5T25DbGljayAoKSB7XG4gICAgY29uc3QgcGFyZW50UmFuZ2VQaWNrZXIgPSBldmVudC50YXJnZXQuY2xvc2VzdChgLiR7Y2xzLmVsZW19YCk7XG5cbiAgICBpZiAoIXBhcmVudFJhbmdlUGlja2VyICYmIHRoaXMuaXNPcGVuZWQpIHtcbiAgICAgIHRoaXMuaGlkZVBpY2tlcigpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUlucHV0ICgpIHtcbiAgICB0aGlzLmlucHV0RnJvbS5pbm5lckhUTUwgPSB0aGlzLmRhdGVzLmZyb20udG9Mb2NhbGVEYXRlU3RyaW5nKCk7XG4gICAgdGhpcy5pbnB1dFRvLmlubmVySFRNTCA9IHRoaXMuZGF0ZXMudG8udG9Mb2NhbGVEYXRlU3RyaW5nKCk7XG4gIH1cblxuICB1cGRhdGVSYW5nZSAoKSB7XG4gICAgdGhpcy5tb250aGVzID0gdGhpcy5nZXREaXNwbGF5ZWRNb250aGVzKCk7XG4gICAgdGhpcy5uZXdEYXRlcyA9IFtdO1xuICAgIHRoaXMudXBkYXRlSW5wdXQoKTtcbiAgICB0aGlzLmhpZGVQaWNrZXIoKTtcbiAgfVxuXG4gIHRvZ2dsZVBpY2tlciAoKSB7XG4gICAgaWYgKHRoaXMuaXNPcGVuZWQpIHtcbiAgICAgIHRoaXMuaGlkZVBpY2tlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2hvd1BpY2tlcigpO1xuICAgIHRoaXMuaXNPcGVuZWQgPSB0cnVlO1xuICB9XG5cbiAgc2hvd1BpY2tlciAoKSB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdG9yKSB7XG4gICAgICB0aGlzLmFkZFNlbGVjdG9yKCk7XG5cbiAgICAgIHRoaXMuc2VsZWN0b3IgPSB0aGlzLmVsZW0ucXVlcnlTZWxlY3RvcihgLiR7Y2xzLnNlbGVjdG9yfWApO1xuICAgICAgdGhpcy5jYWxlbmRhcnMgPSB0aGlzLmVsZW0ucXVlcnlTZWxlY3RvcihgLiR7Y2xzLmNhbGVuZGFyc31gKTtcblxuICAgICAgdGhpcy5zZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc2VsZWN0b3JPbkNsaWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYWxlbmRhcnMuaW5uZXJIVE1MID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRDYWxlbmRhcnMoKTtcbiAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZChjbHMuZWxlbU9wZW4pO1xuICB9XG5cbiAgaGlkZVBpY2tlciAoKSB7XG4gICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xzLmVsZW1PcGVuKTtcbiAgICB0aGlzLmlzT3BlbmVkID0gZmFsc2U7XG4gICAgdGhpcy5uZXdEYXRlcyA9IFtdO1xuICB9XG5cbiAgYWRkU2VsZWN0b3IgKCkge1xuICAgIGNvbnN0IHNlbGVjdG9yU3RyID0gdGVtcGxhdGVzLnNlbGVjdG9yO1xuICAgIHRoaXMuZWxlbS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZUVuZCcsIHNlbGVjdG9yU3RyKTtcbiAgfVxuXG4gIHNlbGVjdG9yT25DbGljayAoKSB7XG4gICAgY29uc3QgeyBkYXRhc2V0IH0gPSBldmVudC50YXJnZXQ7XG4gICAgaWYgKGRhdGFzZXQudmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0RGF5KGV2ZW50LnRhcmdldCk7XG4gICAgfSBlbHNlIGlmIChkYXRhc2V0LmRpcmVjdGlvbikge1xuICAgICAgdGhpcy5tb3ZlTW9udGgoZGF0YXNldC5kaXJlY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIHNldERheSAoZWxlbSkge1xuICAgIGNvbnN0IGRhdGUgPSBlbGVtLmRhdGFzZXQudmFsdWU7XG5cbiAgICBpZiAodGhpcy5uZXdEYXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMubmV3RGF0ZXMucHVzaChuZXcgRGF0ZShkYXRlKSk7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkKGVsZW0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubmV3RGF0ZXMucHVzaChuZXcgRGF0ZShkYXRlKSk7XG5cbiAgICB0aGlzLm5ld0RhdGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBhIC0gYjtcbiAgICB9KTtcbiAgICB0aGlzLmRhdGVzID0ge1xuICAgICAgZnJvbTogdGhpcy5uZXdEYXRlc1swXSxcbiAgICAgIHRvOiB0aGlzLm5ld0RhdGVzWzFdXG4gICAgfTtcblxuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoJ2NoYW5nZURhdGUnLCB7XG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIGRhdGVzOiB7XG4gICAgICAgICAgICBmcm9tOiB0aGlzLmRhdGVzLmZyb20udG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHRvOiB0aGlzLmRhdGVzLnRvLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG1vdmVNb250aCAoZGlyZWN0aW9uKSB7XG4gICAgbGV0IHN0ZXAgPSAxO1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgc3RlcCA9IC0xO1xuICAgIH1cblxuICAgIHRoaXMubW9udGhlcy5mb3JFYWNoKGRhdGUgPT4ge1xuICAgICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbiAgICB9KTtcblxuICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJzKCk7XG4gIH1cblxuICBhZGRDYWxlbmRhcnMgKCkge1xuICAgIHRoaXMubW9udGhlcy5mb3JFYWNoKGRhdGUgPT4ge1xuICAgICAgdGhpcy5jYWxlbmRhcnMuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVFbmQnLCB0aGlzLmdldENhbGVuZGFyKGRhdGUpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUNhbGVuZGFycyAoKSB7XG4gICAgdGhpcy5jYWxlbmRhcnMuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5hZGRDYWxlbmRhcnMoKTtcbiAgfVxuXG4gIHVwZGF0ZVNlbGVjdGVkIChlbGVtKSB7XG4gICAgY29uc3QgY2VsbHMgPSB0aGlzLmVsZW0ucXVlcnlTZWxlY3RvckFsbChgLiR7Y2xzLmNlbGx9YCk7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtjbHMuc2VsZWN0ZWRCZXR3ZWVuLCBjbHMuc2VsZWN0ZWRGcm9tLCBjbHMuc2VsZWN0ZWRUb107XG5cbiAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xuICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXMpO1xuICAgIH0pO1xuXG4gICAgZWxlbS5jbGFzc0xpc3QuYWRkKGNscy5zZWxlY3RlZEZyb20pO1xuICB9XG5cbiAgZ2V0Q2FsZW5kYXIgKGRhdGUpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbW9udGg6IGRhdGUudG9Mb2NhbGVTdHJpbmcoJ2RlZmF1bHQnLCB7IG1vbnRoOiAnbG9uZycgfSksXG4gICAgICB3ZWVrZGF5czogZ2V0V2Vla0RheXMoJ2RpdicpLFxuICAgICAgZGF5czogdGhpcy5nZXRDZWxscyhkYXRlKVxuICAgIH07XG5cbiAgICBjb25zdCB0bXBsID0gdGVtcGxhdGVzLmNhbGVuZGFyO1xuICAgIGNvbnN0IGNhbGVuZGFyU3RyID0gZmlsbFRlbXBsYXRlKHtcbiAgICAgIHRtcGwsXG4gICAgICBkYXRhXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2FsZW5kYXJTdHI7XG4gIH1cblxuICBnZXRDZWxscyAoZGF0ZSkge1xuICAgIGNvbnN0IHRtcGwgPSB0ZW1wbGF0ZXMuZGF5O1xuICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgY29uc3QgbW9udGggPSBjdXJyZW50RGF0ZS5nZXRNb250aCgpO1xuICAgIGxldCBjdXJyZW50RGF5ID0gMTtcbiAgICBsZXQgZGF5c1N0ciA9ICcnO1xuXG4gICAgd2hpbGUgKGN1cnJlbnREYXRlLmdldE1vbnRoKCkgPT09IG1vbnRoKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IHRoaXMuZ2V0Q2VsbFN0YXJ0U3R5bGUoY3VycmVudERhdGUpO1xuICAgICAgY29uc3QgbW9kID0gdGhpcy5nZXRDZWxsTW9kKGN1cnJlbnREYXRlKTtcblxuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgZGF0ZVRpbWU6IGN1cnJlbnREYXRlLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGRhdGVOdW06IGN1cnJlbnREYXRlLmdldERhdGUoKSxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIG1vZFxuICAgICAgfTtcbiAgICAgIGRheXNTdHIgKz0gZmlsbFRlbXBsYXRlKHtcbiAgICAgICAgdG1wbCxcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG5cbiAgICAgIGN1cnJlbnREYXRlLnNldERhdGUoKytjdXJyZW50RGF5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF5c1N0cjtcbiAgfVxuXG4gIGdldENlbGxTdGFydFN0eWxlIChkYXRlKSB7XG4gICAgbGV0IHN0eWxlID0gJyc7XG4gICAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cbiAgICBpZiAoZGF5ID4gMSkge1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIGxldCB3ZWVrZGF5TnVtID0gZGF0ZS5nZXREYXkoKTtcbiAgICBpZiAod2Vla2RheU51bSA9PT0gMCkge1xuICAgICAgd2Vla2RheU51bSA9IDc7XG4gICAgfVxuXG4gICAgc3R5bGUgPSBgZ3JpZC1jb2x1bW4tc3RhcnQ6ICR7d2Vla2RheU51bX1gO1xuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZ2V0Q2VsbE1vZCAoZGF0ZSkge1xuICAgIGxldCBtb2QgPSAnJztcblxuICAgIGlmICh0aGlzLm5ld0RhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBtb2Q7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0ZU1zID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgY29uc3QgZGF0ZUZyb21NcyA9IHRoaXMuZGF0ZXMuZnJvbS52YWx1ZU9mKCk7XG4gICAgY29uc3QgZGF0ZVRvTXMgPSB0aGlzLmRhdGVzLnRvLnZhbHVlT2YoKTtcblxuICAgIGlmIChkYXRlTXMgPiBkYXRlRnJvbU1zICYmIGRhdGVNcyA8IGRhdGVUb01zKSB7XG4gICAgICBtb2QgPSBjbHMuc2VsZWN0ZWRCZXR3ZWVuO1xuICAgIH0gZWxzZSBpZiAoZGF0ZU1zID09PSBkYXRlRnJvbU1zKSB7XG4gICAgICBtb2QgPSBjbHMuc2VsZWN0ZWRGcm9tO1xuICAgIH0gZWxzZSBpZiAoZGF0ZU1zID09PSBkYXRlVG9Ncykge1xuICAgICAgbW9kID0gY2xzLnNlbGVjdGVkVG87XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBlbGVtOiAnc29ydGFibGUtdGFibGUnLFxuICB0YWJsZTogJ3NvcnRhYmxlLXRhYmxlX190YWJsZScsXG4gIHRoZWFkOiAnc29ydGFibGUtdGFibGVfX3RoZWFkJyxcbiAgaGVhZGVyOiAnc29ydGFibGUtdGFibGVfX2hlYWRlcicsXG4gIHJvdzogJ3NvcnRhYmxlLXRhYmxlX19yb3cnLFxuICBjZWxsOiAnc29ydGFibGUtdGFibGVfX2NlbGwnLFxuICBjZWxsRXJyb3I6ICdzb3J0YWJsZS10YWJsZV9fY2VsbC0tZXJyb3InLFxuICBjZWxsU29ydGVyOiAnc29ydGFibGUtdGFibGVfX2NlbGwtLXNvcnRlcicsXG4gIGltZzogJ3NvcnRhYmxlLXRhYmxlX19pbWFnZScsXG4gIGltZ1dyYXBwZXI6ICdzb3J0YWJsZS10YWJsZV9faW1hZ2Utd3JhcHBlcicsXG4gIHByZXZpZXc6ICdzb3J0YWJsZS10YWJsZV9fcHJldmlldycsXG4gIGxpbms6ICdzb3J0YWJsZS10YWJsZV9fbGluaycsXG4gIGNhdGVnb3J5OiAnc29ydGFibGUtdGFibGVfX2NhdGVnb3J5JyxcbiAgdG9vbHRpcENhdGVnb3J5OiAnc29ydGFibGUtdGFibGVfX3Rvb2x0aXAtY2F0ZWdvcnknLFxuICB0b29sdGlwU3ViY2F0ZWdvcnk6ICdzb3J0YWJsZS10YWJsZV9fdG9vbHRpcC1zdWJjYXRlZ29yeSdcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIDA6ICdEaXNhYmxlZCcsXG4gIDE6ICdFbmFibGVkJ1xufTtcbiIsImltcG9ydCB7IGZvcm1hdFRvdGFsLCBlc2NhcGVIVE1MIH0gZnJvbSAnLi4vLi4vaGVscGVycy9pbmRleC5qcyc7XG5pbXBvcnQgc3RhdHVzVGV4dCBmcm9tICcuL3N0YXR1c1RleHQuanMnO1xuaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuXG4vLyBJbmZvICYgc29ydGluZyBtZXRob2RzIGZvciB0YWJsZSBjb2x1bW5zXG5leHBvcnQgZGVmYXVsdCB7XG4gIGltYWdlczoge1xuICAgIHRpdGxlOiAnSW1hZ2UnLFxuICAgIHJlbmRlciAoeyBpbWFnZXMgfSkge1xuICAgICAgaWYgKCFpbWFnZXMgfHwgIWltYWdlc1swXS51cmwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3JjID0gaW1hZ2VzWzBdLnVybDtcbiAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cIiR7Y2xzLmltZ1dyYXBwZXJ9XCI+XG4gICAgICA8aW1nIHNyYz1cIiR7c3JjfVwiIGNsYXNzPVwiJHtjbHMuaW1nfVwiPlxuICAgICAgPHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtzcmN9KVwiIGNsYXNzPVwiJHtjbHMucHJldmlld31cIj48c3Bhbj5cbiAgICAgIDxkaXY+YDtcbiAgICB9LFxuICAgIGNvbXBhcmU6IG51bGxcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICB0aXRsZTogJ05hbWUnLFxuICAgIHJlbmRlciAoeyB0aXRsZSwgaWQgfSkge1xuICAgICAgcmV0dXJuIGBcbiAgICAgICR7dGl0bGV9XG4gICAgICA8YSBjbGFzcz1cIiR7Y2xzLmxpbmt9XCIgaHJlZj1cIi9wcm9kdWN0cy8ke2lkfVwiPjwvYT5cbiAgICAgIGA7XG4gICAgfSxcbiAgICBjb21wYXJlIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS50aXRsZS5sb2NhbGVDb21wYXJlKGIudGl0bGUpO1xuICAgIH1cbiAgfSxcbiAgc3ViY2F0ZWdvcnk6IHtcbiAgICB0aXRsZTogJ0NhdGVnb3J5JyxcbiAgICByZW5kZXIgKHsgc3ViY2F0ZWdvcnkgfSkge1xuICAgICAgY29uc3QgY2F0ZWdvcnkgPSBzdWJjYXRlZ29yeS5jYXRlZ29yeTtcbiAgICAgIGNvbnN0IHRvb3RpcENvbnRlbnQgPSBgPHNwYW4gY2xhc3M9XCIke2Nscy50b29sdGlwQ2F0ZWdvcnl9XCI+JHtjYXRlZ29yeS50aXRsZX08L3NwYW4+LzxzcGFuIGNsYXNzPVwiJHtjbHMudG9vbHRpcFN1YmNhdGVnb3J5fVwiPiR7c3ViY2F0ZWdvcnkudGl0bGV9PC9zcGFuPmA7XG4gICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiJHtjbHMuY2F0ZWdvcnl9XCIgZGF0YS10b29sdGlwLWNvbnRlbnQ9XCIke2VzY2FwZUhUTUwodG9vdGlwQ29udGVudCl9XCI+JHtzdWJjYXRlZ29yeS50aXRsZX08L3NwYW4+YDtcbiAgICB9LFxuICAgIGNvbXBhcmUgKGEsIGIpIHtcbiAgICAgIC8vIFNvcnRpbmcgYnkgcnVzc2lhbiB0aXRsZXNcbiAgICAgIGNvbnN0IGFDYXROYW1lID0gYS5zdWJjYXRlZ29yeS50aXRsZTtcbiAgICAgIGNvbnN0IGJDYXROYW1lID0gYi5zdWJjYXRlZ29yeS50aXRsZTtcbiAgICAgIHJldHVybiBhQ2F0TmFtZS5sb2NhbGVDb21wYXJlKGJDYXROYW1lKTtcbiAgICB9XG4gIH0sXG4gIHF1YW50aXR5OiB7XG4gICAgdGl0bGU6ICdRdWFudGl0eScsXG4gICAgcmVuZGVyICh7IHF1YW50aXR5IH0pIHtcbiAgICAgIHJldHVybiBxdWFudGl0eTtcbiAgICB9LFxuICAgIGNvbXBhcmUgKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLnF1YW50aXR5IC0gYi5xdWFudGl0eTtcbiAgICB9XG4gIH0sXG4gIHByaWNlOiB7XG4gICAgdGl0bGU6ICdQcmljZScsXG4gICAgcmVuZGVyICh7IHByaWNlIH0pIHtcbiAgICAgIHJldHVybiBmb3JtYXRUb3RhbChwcmljZSk7XG4gICAgfSxcbiAgICBjb21wYXJlIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5wcmljZSAtIGIucHJpY2U7XG4gICAgfVxuICB9LFxuICBzdGF0dXM6IHtcbiAgICB0aXRsZTogJ1N0YXR1cycsXG4gICAgcmVuZGVyICh7IHN0YXR1cyB9KSB7XG4gICAgICByZXR1cm4gc3RhdHVzVGV4dFtzdGF0dXNdO1xuICAgIH0sXG4gICAgY29tcGFyZSAoYSwgYikge1xuICAgICAgcmV0dXJuIGEuc3RhdHVzIC0gYi5zdGF0dXM7XG4gICAgfVxuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAwOiAnZGVzYycsXG4gIDE6ICdhc2MnXG59O1xuIiwiaW1wb3J0IGRpcmVjdGlvbnMgZnJvbSAnLi9kaXJlY3Rpb25zLmpzJztcblxuZXhwb3J0IGNvbnN0IGdldERpcmVjdGlvblRleHQgPSBpc0FzYyA9PiB7XG4gIHJldHVybiBkaXJlY3Rpb25zWytpc0FzY107XG59O1xuIiwiaW1wb3J0IFRvb2x0aXBzIGZyb20gJy4uL1Rvb2x0aXBzL2luZGV4LmpzJztcbmltcG9ydCBjbHMgZnJvbSAnLi9jbGFzc2VzLmpzJztcbmltcG9ydCBzdGF0dXNUZXh0IGZyb20gJy4vc3RhdHVzVGV4dC5qcyc7XG5pbXBvcnQgZmllbGRzIGZyb20gJy4vZmllbGRzLmpzJztcbmltcG9ydCB7IGZldGNoSnNvbiwgdGhyb3R0bGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCB7IGdldERpcmVjdGlvblRleHQgfSBmcm9tICcuL2hlbHBlcnMuanMnO1xuaW1wb3J0IFBhZ2VNZXNzYWdlIGZyb20gJy4uL1BhZ2VNZXNzYWdlL2luZGV4LmpzJztcblxuaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ydGFibGVUYWJsZSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zb3J0aW5nID0ge1xuICAgICAgY3VycmVudDogbnVsbCxcbiAgICAgIGlzQXNjOiB0cnVlXG4gICAgfTtcblxuICAgIHRoaXMucGFnZSA9IHtcbiAgICAgIGl0ZW1zOiAyMCxcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICBpc0RhdGFFbmRlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgdGhpcy5hcGlVcmwgPSBwcm9jZXNzLmVudi5BUElfVVJMIHx8ICdodHRwczovL2NvdXJzZS1qcy5qYXZhc2NyaXB0LnJ1JztcblxuICAgIHRoaXMuY2hhbmdlRGF0ZSA9IHRoaXMuY2hhbmdlRGF0ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHVybCxcbiAgICAgIGZpZWxkc0xpc3QsXG4gICAgICBvcmRlckZpZWxkLFxuICAgICAgb3JkZXJEaXJlY3Rpb24sXG4gICAgICBpc0R5bmFtaWMsXG4gICAgICBmcm9tLFxuICAgICAgdG9cbiAgICB9ID0gdGhpcy5kYXRhc2V0O1xuXG4gICAgdGhpcy5kYXRlcyA9IHtcbiAgICAgIGZyb20sXG4gICAgICB0b1xuICAgIH07XG5cbiAgICB0aGlzLnVybCA9IHRoaXMuYXBpVXJsICsgdXJsO1xuICAgIHRoaXMuZmllbGRzTGlzdCA9IEpTT04ucGFyc2UoZmllbGRzTGlzdC5yZXBsYWNlKC8nL2csICdcIicpKTtcbiAgICB0aGlzLmlzRHluYW1pYyA9ICtpc0R5bmFtaWM7XG4gICAgdGhpcy5vcmRlciA9IHtcbiAgICAgIGZpZWxkOiBvcmRlckZpZWxkLFxuICAgICAgZGlyZWN0aW9uOiBvcmRlckRpcmVjdGlvblxuICAgIH07XG4gICAgdGhpcy5pbml0VGFibGUgPSB0aGlzLmluaXRUYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5vcmRlciAmJiB0aGlzLm9yZGVyLmRpcmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnNvcnRpbmcuaXNBc2MgPSB0aGlzLm9yZGVyLmRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICB0aGlzLmZldGNoVXJsID0gdGhpcy5nZXRGZXRjaFVybCgpO1xuICAgIC8vIFRyeSB0byB0aHJvdHRsZSBsb2FkaW5nIG9uIHNjcm9sbFxuICAgIHRoaXMub25Cb2R5U2Nyb2xsVGhyb3R0bGUgPSB0aHJvdHRsZSh0aGlzLm9uQm9keVNjcm9sbCwgdGhpcywgNTAwKTtcblxuICAgIHRoaXMuaW5pdFRhYmxlKCk7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2VEYXRlJywgdGhpcy5jaGFuZ2VEYXRlKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWREYXRhICgpIHtcbiAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgdGhpcy50YWJsZS5kYXRhc2V0LmxvYWRpbmcgPSAxO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRhYmxlRGF0YSA9IGF3YWl0IGZldGNoSnNvbih0aGlzLmZldGNoVXJsKTtcblxuICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMudGFibGUuZGF0YXNldC5sb2FkaW5nID0gMDtcblxuICAgICAgcmV0dXJuIHRhYmxlRGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gU2hvdyBlcnJvciBtZXNzYWdlIHRvIHVzZXJcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgUGFnZU1lc3NhZ2UoeyBlcnJvciB9KTtcbiAgICAgIHRoaXMudGFibGUuZGF0YXNldC5sb2FkaW5nID0gMDtcblxuICAgICAgdGhpcy50Qm9keS5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAgICdiZWZvcmVFbmQnLFxuICAgICAgICBgPHRyIGNsYXNzPVwiJHtjbHMucm93fVwiPjx0ZCBjbGFzcz1cIiR7Y2xzLmNlbGxFcnJvcn1cIj4ke21lc3NhZ2UuZWxlbS5vdXRlckhUTUx9PC90cj5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGluaXRUYWJsZSAoKSB7XG4gICAgdGhpcy5jcmVhdGVMYXlvdXQoKTtcbiAgICB0aGlzLmFkZEVsZW1IZWFkZXIoKTtcbiAgICB0aGlzLmFkZFRhYmxlRXZlbnRzKCk7XG5cbiAgICB0aGlzLmZpbGxUQm9keSgpO1xuICB9XG5cbiAgYXN5bmMgZmlsbFRCb2R5ICgpIHtcbiAgICBpZiAodGhpcy5wYWdlLmlzRGF0YUVuZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50YWJsZVJvd3MgPSBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG5cbiAgICAvLyBMYXN0IHBhZ2VcbiAgICBpZiAodGhpcy50YWJsZVJvd3MubGVuZ3RoIDwgdGhpcy5wYWdlLml0ZW1zKSB7XG4gICAgICB0aGlzLnBhZ2UuaXNEYXRhRW5kZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy50YWJsZVJvd3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNEeW5hbWljICYmIHRoaXMub3JkZXIgJiYgdGhpcy5vcmRlci5maWVsZCkge1xuICAgICAgdGhpcy5zb3J0Um93cyh0aGlzLm9yZGVyLmZpZWxkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlclRCb2R5KCk7XG4gIH1cblxuICBnZXRGZXRjaFVybCAoKSB7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgc3RhcnQ6IHRoaXMucGFnZS5jdXJyZW50ICogdGhpcy5wYWdlLml0ZW1zLFxuICAgICAgZW5kOiAodGhpcy5wYWdlLmN1cnJlbnQgKyAxKSAqIHRoaXMucGFnZS5pdGVtcyxcbiAgICAgIHNvcnQ6IHRoaXMub3JkZXIuZmllbGQsXG4gICAgICBvcmRlcjogZ2V0RGlyZWN0aW9uVGV4dCh0aGlzLnNvcnRpbmcuaXNBc2MpXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmRhdGVzICYmIHRoaXMuZGF0ZXMuZnJvbSkge1xuICAgICAgcGFyYW1zLmZyb20gPSB0aGlzLmRhdGVzLmZyb207XG4gICAgICBwYXJhbXMudG8gPSB0aGlzLmRhdGVzLnRvO1xuICAgIH1cblxuICAgIGxldCBwYXJhbXNTdHIgPSAnJztcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgIGxldCBwcmVmaXggPSAnXyc7XG4gICAgICBpZiAoa2V5ID09PSAnZnJvbScgfHwga2V5ID09PSAndG8nKSB7XG4gICAgICAgIHByZWZpeCA9ICcnO1xuICAgICAgfVxuXG4gICAgICBwYXJhbXNTdHIgKz0gYCYke3ByZWZpeH0ke2tleX09JHtwYXJhbXNba2V5XX1gO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy51cmwgKyBwYXJhbXNTdHI7XG4gIH1cblxuICBjcmVhdGVMYXlvdXQgKCkge1xuICAgIHRoaXMuY2xhc3NMaXN0LmFkZChjbHMuZWxlbSk7XG4gICAgdGhpcy50YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gICAgdGhpcy50YWJsZS5jbGFzc0xpc3QuYWRkKGNscy50YWJsZSk7XG4gICAgdGhpcy50Qm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG4gICAgdGhpcy50YWJsZS5hcHBlbmQodGhpcy50Qm9keSk7XG4gICAgdGhpcy50YWJsZS5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAnYmVmb3JlRW5kJyxcbiAgICAgIGA8dGZvb3Q+PHRyPjx0ZCBjb2xzcGFuPVwiJHt0aGlzLmZpZWxkc0xpc3QubGVuZ3RofVwiPjxkaXYgY2xhc3M9XCJzcGlubmVyXCI+PC9kaXY+PC90ZD48L3RyPjwvdGZvb3Q+YFxuICAgICk7XG5cbiAgICB0aGlzLmFwcGVuZCh0aGlzLnRhYmxlKTtcbiAgfVxuXG4gIC8vIEZpbGwgdGFibGUgaGVhZGVyIHdpdGggY29udGVudFxuICBhZGRFbGVtSGVhZGVyICgpIHtcbiAgICBsZXQgaGVhZGVyQ29udGVudCA9ICcnO1xuXG4gICAgdGhpcy5maWVsZHNMaXN0LmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgbGV0IHRoQ2xhc3MgPSBjbHMuY2VsbDtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIHNvcnRlcjogJycsXG4gICAgICAgIHNvcnREaXJlY3Rpb246ICcnXG4gICAgICB9O1xuICAgICAgaWYgKGZpZWxkc1tmaWVsZF0uY29tcGFyZSkge1xuICAgICAgICB0aENsYXNzICs9IGAgJHtjbHMuY2VsbFNvcnRlcn1gO1xuICAgICAgICBkYXRhLnNvcnRlciA9ICdkYXRhLXNvcnRlcj1cIjFcIic7XG4gICAgICB9XG4gICAgICBpZiAoZmllbGQgPT09IHRoaXMub3JkZXIuZmllbGQpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uVGV4dCh0aGlzLnNvcnRpbmcuaXNBc2MpO1xuICAgICAgICBkYXRhLnNvcnREaXJlY3Rpb24gPSBgZGF0YS1zb3J0LWRpcmVjdGlvbj1cIiR7ZGlyZWN0aW9ufVwiYDtcbiAgICAgIH1cbiAgICAgIGhlYWRlckNvbnRlbnQgKz0gYDx0aCBjbGFzcz1cIiR7dGhDbGFzc31cIlxuICAgICAgICBkYXRhLW5hbWU9XCIke2ZpZWxkfVwiXG4gICAgICAgICR7ZGF0YS5zb3J0ZXJ9XG4gICAgICAgICR7ZGF0YS5zb3J0RGlyZWN0aW9ufVxuICAgICAgICA+JHtmaWVsZHNbZmllbGRdLnRpdGxlfTwvdGg+YDtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRoZWFkU3RyID0gYDx0aGVhZCBjbGFzcz1cIiR7Y2xzLnRoZWFkfVwiPjx0ciBjbGFzcz1cIiR7Y2xzLmhlYWRlcn0gJHtjbHMucm93fVwiPlxuICAgICAgJHtoZWFkZXJDb250ZW50fVxuICAgIDwvdHI+PC90aGVhZD5gO1xuXG4gICAgdGhpcy50YWJsZS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyQmVnaW4nLCB0aGVhZFN0cik7XG5cbiAgICB0aGlzLnNvcnRpbmcuY3VycmVudCA9IHRoaXMudGFibGUucXVlcnlTZWxlY3RvcignW2RhdGEtc29ydC1kaXJlY3Rpb25dJyk7XG4gIH1cblxuICAvLyBTb3J0ZXJcbiAgc29ydGVyT25DbGljayAodGgpIHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IHRoLmRhdGFzZXQ7XG5cbiAgICBpZiAodGguZGF0YXNldC5zb3J0RGlyZWN0aW9uKSB7XG4gICAgICB0aGlzLnNvcnRpbmcuaXNBc2MgPSAhdGhpcy5zb3J0aW5nLmlzQXNjO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5zb3J0aW5nLmN1cnJlbnQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuc29ydGluZy5jdXJyZW50LmRhdGFzZXQuc29ydERpcmVjdGlvbjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc29ydGluZy5pc0FzYyA9IHRydWU7XG4gICAgICB0aGlzLnNvcnRpbmcuY3VycmVudCA9IHRoO1xuICAgIH1cblxuICAgIHRoLmRhdGFzZXQuc29ydERpcmVjdGlvbiA9IGdldERpcmVjdGlvblRleHQodGhpcy5zb3J0aW5nLmlzQXNjKTtcblxuICAgIGlmICh0aGlzLmlzRHluYW1pYykge1xuICAgICAgdGhpcy5zb3J0Um93c0R5bmFtaWMobmFtZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zb3J0Um93cyhuYW1lKTtcbiAgfVxuXG4gIC8vIFNvcnRpbmdcbiAgc29ydFJvd3MgKGZpZWxkKSB7XG4gICAgdGhpcy50YWJsZVJvd3Muc29ydChmaWVsZHNbZmllbGRdLmNvbXBhcmUpO1xuXG4gICAgaWYgKCF0aGlzLnNvcnRpbmcuaXNBc2MpIHtcbiAgICAgIHRoaXMudGFibGVSb3dzLnJldmVyc2UoKTtcbiAgICB9XG5cbiAgICB0aGlzLnRCb2R5LmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMucmVuZGVyVEJvZHkoKTtcbiAgfVxuXG4gIC8vIFNvcnRpbmdcbiAgc29ydFJvd3NEeW5hbWljIChmaWVsZCkge1xuICAgIHRoaXMub3JkZXIuZmllbGQgPSBmaWVsZDtcbiAgICB0aGlzLnBhZ2UuY3VycmVudCA9IDA7XG4gICAgdGhpcy5wYWdlLmlzRGF0YUVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5mZXRjaFVybCA9IHRoaXMuZ2V0RmV0Y2hVcmwoKTtcbiAgICB0aGlzLnRCb2R5LmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuZmlsbFRCb2R5KCk7XG4gIH1cblxuICAvLyBBZGRpbmcgZGVsZWdhdGVkIGV2ZW50cyB0byB0YWJsZVxuICBhZGRUYWJsZUV2ZW50cyAoKSB7XG4gICAgdGhpcy50YWJsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uQm9keVNjcm9sbFRocm90dGxlKTtcbiAgICB0aGlzLnRvb2x0aXBzID0gbmV3IFRvb2x0aXBzKHsgZWxlbTogdGhpcyB9KTtcbiAgfVxuXG4gIC8vIEhhbmRsZXMgYWxsIGV2ZW50cyBmb3IgdGFibGVcbiAgaGFuZGxlRXZlbnQgKCkge1xuICAgIC8vIFNvcnRpbmcgZXZlbnRzXG4gICAgaWYgKGV2ZW50LnRhcmdldC5kYXRhc2V0LnNvcnRlcikge1xuICAgICAgdGhpcy5zb3J0ZXJPbkNsaWNrKGV2ZW50LnRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgb25Cb2R5U2Nyb2xsICgpIHtcbiAgICBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBodG1sQ29vcmRzID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHNjcm9sbERlbHRhID0gaHRtbENvb3Jkcy5ib3R0b20gLSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICBpZiAoc2Nyb2xsRGVsdGEgPCAxMDApIHtcbiAgICAgIHRoaXMucGFnZS5jdXJyZW50Kys7XG4gICAgICB0aGlzLmZldGNoVXJsID0gdGhpcy5nZXRGZXRjaFVybCgpO1xuICAgICAgdGhpcy5maWxsVEJvZHkoKTtcbiAgICB9XG4gIH1cblxuICAvLyBGaWxsIHRhYmxlIGJvZHkgY2VsbHMgd2l0aCBjb250ZW50XG4gIHJlbmRlclRCb2R5ICgpIHtcbiAgICB0aGlzLnBhZ2VZT2Zmc2V0ID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXG4gICAgdGhpcy50YWJsZVJvd3MuZm9yRWFjaChyb3cgPT4ge1xuICAgICAgbGV0IHJvd0NvbnRlbnQgPSAnJztcbiAgICAgIGNvbnN0IHsgc3RhdHVzIH0gPSByb3c7XG5cbiAgICAgIHRoaXMuZmllbGRzTGlzdC5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgY29uc3QgdGRDbGFzc2VzID0gW1xuICAgICAgICAgIGNscy5jZWxsLFxuICAgICAgICAgIGAke2Nscy5jZWxsfS0tJHtmaWVsZH1gLFxuICAgICAgICAgIGAke2Nscy5jZWxsfS0tJHtzdGF0dXNUZXh0W3N0YXR1c10udG9Mb3dlckNhc2UoKX1gXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IHJlbmRlckZpZWxkID0gZmllbGRzW2ZpZWxkXS5yZW5kZXI7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVkQ29udGVudCA9IHJlbmRlckZpZWxkKHJvdyk7XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkQ29udGVudCkge1xuICAgICAgICAgIHJvd0NvbnRlbnQgKz0gYDx0ZCBjbGFzcz1cIiR7dGRDbGFzc2VzLmpvaW4oXG4gICAgICAgICAgICAnICdcbiAgICAgICAgICApfVwiPiR7cmVuZGVyZWRDb250ZW50fTwvdGQ+YDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMudEJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKFxuICAgICAgICAnYmVmb3JlRW5kJyxcbiAgICAgICAgYDx0ciBjbGFzcz1cIiR7Y2xzLnJvd31cIj4ke3Jvd0NvbnRlbnR9PC90cj5gXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMucGFnZVlPZmZzZXQpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCB0aGlzLnBhZ2VZT2Zmc2V0KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBjaGFuZ2VEYXRlIChldmVudCkge1xuICAgIGlmICghZXZlbnQuZGV0YWlsIHx8ICFldmVudC5kZXRhaWwuZGF0ZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGVzID0gZXZlbnQuZGV0YWlsLmRhdGVzO1xuICAgIHRoaXMuZmV0Y2hVcmwgPSB0aGlzLmdldEZldGNoVXJsKCk7XG4gICAgdGhpcy50Qm9keS5pbm5lckhUTUwgPSAnJztcbiAgICB0aGlzLmZpbGxUQm9keSgpO1xuICB9XG59XG4iLCJpbXBvcnQgJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0ICcuL2dyYWItaWNvbi5zdmcnO1xuXG5jb25zdCBjbHMgPSB7XG4gIGVsZW06ICdkcmFnZ2FibGUtbGlzdCcsXG4gIGl0ZW1zOiAnZHJhZ2dhYmxlLWxpc3RfX2l0ZW1zJyxcbiAgaXRlbTogJ2RyYWdnYWJsZS1saXN0X19pdGVtJyxcbiAgZHJhZ2dlZDogJ2RyYWdnYWJsZS1saXN0X19pdGVtLS1kcmFnZ2VkJyxcbiAgcGxhY2Vob2xkZXI6ICdkcmFnZ2FibGUtbGlzdF9faXRlbS0tcGxhY2Vob2xkZXInXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcmFnZ2FibGVMaXN0IGV4dGVuZHMgSFRNTFVMaXN0RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5zdGFydERyYWcgPSB0aGlzLnN0YXJ0RHJhZy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RvcERyYWcgPSB0aGlzLnN0b3BEcmFnLmJpbmQodGhpcyk7XG4gICAgdGhpcy5tb3ZlID0gdGhpcy5tb3ZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRQbGFjZWhvbGRlckhlaWdodCA9IHRoaXMuc2V0UGxhY2Vob2xkZXJIZWlnaHQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFzeW5jIGNvbm5lY3RlZENhbGxiYWNrICgpIHtcbiAgICB0aGlzLmNsYXNzTGlzdC5hZGQoY2xzLmVsZW0pO1xuICAgIHRoaXMuaXRlbXMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuY3JlYXRlUGxhY2Vob2xkZXIoKTtcblxuICAgIHRoaXMuYWRkQ2xhc3NUb0l0ZW1zKCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuc3RhcnREcmFnKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5zZXRQbGFjZWhvbGRlckhlaWdodCwgeyBvbmNlOiB0cnVlIH0pO1xuICB9XG5cbiAgc3RhcnREcmFnIChldmVudCkge1xuICAgIHRoaXMuY3VycmVudEVsZW0gPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLmRyYWdnYWJsZS1saXN0X19pdGVtJyk7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRFbGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50RWxlbS5yZXBsYWNlV2l0aCh0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICB0aGlzLmN1cnJlbnRFbGVtLmNsYXNzTGlzdC5hZGQoY2xzLmRyYWdnZWQpO1xuICAgIHRoaXMuYXBwZW5kKHRoaXMuY3VycmVudEVsZW0pO1xuXG4gICAgY29uc3QgeyB0b3AgfSA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdGhpcy50b3AgPSB0b3A7XG4gICAgdGhpcy5lbGVtSGFsZiA9IHRoaXMuY3VycmVudEVsZW0ub2Zmc2V0SGVpZ2h0IC8gMjtcblxuICAgIGNvbnN0IGVsZW1Ub3AgPSBldmVudC5jbGllbnRZIC0gdGhpcy50b3AgLSB0aGlzLmVsZW1IYWxmO1xuICAgIHRoaXMuY3VycmVudEVsZW0uc3R5bGUudG9wID0gYCR7ZWxlbVRvcH1weGA7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5tb3ZlKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHRoaXMuc3RvcERyYWcpO1xuICB9XG5cbiAgbW92ZSAoZXZlbnQpIHtcbiAgICBjb25zdCBlbGVtVG9wID0gZXZlbnQuY2xpZW50WSAtIHRoaXMudG9wIC0gdGhpcy5lbGVtSGFsZjtcbiAgICB0aGlzLmN1cnJlbnRFbGVtLnN0eWxlLnRvcCA9IGAke2VsZW1Ub3B9cHhgO1xuXG4gICAgLy8gQ2hlY2sgaW50ZXJzZWN0aW9uXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGlmIChpdGVtLmNsYXNzTGlzdC5jb250YWlucyhjbHMuZHJhZ2dlZCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRvcCA9IGl0ZW0ub2Zmc2V0VG9wO1xuICAgICAgY29uc3QgYm90dG9tID0gdG9wICsgaXRlbS5vZmZzZXRIZWlnaHQ7XG4gICAgICBjb25zdCBtaWRkbGUgPSB0b3AgKyBpdGVtLm9mZnNldEhlaWdodCAvIDI7XG4gICAgICBjb25zdCBjaGVja0xpbmUgPSBlbGVtVG9wICsgdGhpcy5lbGVtSGFsZjtcblxuICAgICAgaWYgKGNoZWNrTGluZSA+IHRvcCAmJiBjaGVja0xpbmUgPCBib3R0b20pIHtcbiAgICAgICAgaWYgKGNoZWNrTGluZSA8PSBtaWRkbGUpIHtcbiAgICAgICAgICBpdGVtLmFmdGVyKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0uYmVmb3JlKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0b3BEcmFnICgpIHtcbiAgICB0aGlzLnBsYWNlaG9sZGVyLnJlcGxhY2VXaXRoKHRoaXMuY3VycmVudEVsZW0pO1xuICAgIHRoaXMuY3VycmVudEVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbHMuZHJhZ2dlZCk7XG4gICAgdGhpcy5jdXJyZW50RWxlbS5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5tb3ZlKTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHRoaXMuc3RvcERyYWcpO1xuICB9XG5cbiAgY3JlYXRlUGxhY2Vob2xkZXIgKCkge1xuICAgIGNvbnN0IGZpcnN0SXRlbSA9IHRoaXMuaXRlbXNbMF07XG4gICAgY29uc3QgcGxhY2Vob2xkZXIgPSBmaXJzdEl0ZW0uY2xvbmVOb2RlKHRydWUpO1xuICAgIHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQoY2xzLnBsYWNlaG9sZGVyLCBjbHMuaXRlbSk7XG4gICAgcGxhY2Vob2xkZXIuaW5uZXJIVE1MID0gJyc7XG5cbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gIH1cblxuICBzZXRQbGFjZWhvbGRlckhlaWdodCAoKSB7XG4gICAgY29uc3QgZmlyc3RJdGVtID0gdGhpcy5pdGVtc1swXTtcbiAgICB0aGlzLnBsYWNlaG9sZGVyLnN0eWxlLm1pbkhlaWdodCA9IGAke2ZpcnN0SXRlbS5vZmZzZXRIZWlnaHR9cHhgO1xuICB9XG5cbiAgYWRkQ2xhc3NUb0l0ZW1zICgpIHtcbiAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiBpdGVtLmNsYXNzTGlzdC5hZGQoY2xzLml0ZW0pKTtcbiAgfVxufVxuIiwiaW1wb3J0IHJlbmRlclBhZ2UgZnJvbSAnLi9yZW5kZXJQYWdlLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMucm91dGVzID0gW107XG5cbiAgICB0aGlzLmRvY3VtZW50Q2xpY2sgPSB0aGlzLmRvY3VtZW50Q2xpY2suYmluZCh0aGlzKTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5kb2N1bWVudENsaWNrKTtcbiAgfVxuXG4gIHN0YXRpYyBpbnN0YW5jZSAoKSB7XG4gICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgUm91dGVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgfVxuXG4gIGFkZFJvdXRlIChwYXR0ZXJuLCBwYXRoKSB7XG4gICAgdGhpcy5yb3V0ZXMucHVzaCh7IHBhdHRlcm4sIHBhdGggfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXROb3RGb3VuZFBhZ2UgKHBhdGgpIHtcbiAgICB0aGlzLm5vdEZvdW5kUGFnZVBhdGggPSBwYXRoO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbmF2aWdhdGUgKGhyZWYpIHtcbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBocmVmKTtcbiAgICB0aGlzLnJvdXRlKCk7XG4gIH1cblxuICBhc3luYyByb3V0ZSAoKSB7XG4gICAgY29uc3Qgc3RyaXBwZWRQYXRoID0gY2xlYW5QYXRoKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgY29uc29sZS5sb2coJ3N0cmlwcGVkUGF0aCcsIHN0cmlwcGVkUGF0aCk7XG4gICAgbGV0IG1hdGNoO1xuXG4gICAgZm9yIChjb25zdCByb3V0ZSBvZiB0aGlzLnJvdXRlcykge1xuICAgICAgbWF0Y2ggPSBzdHJpcHBlZFBhdGgubWF0Y2gocm91dGUucGF0dGVybik7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdGhpcy5wYWdlID0gYXdhaXQgdGhpcy5jaGFuZ2VQYWdlKHJvdXRlLnBhdGgsIG1hdGNoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgdGhpcy5wYWdlID0gYXdhaXQgdGhpcy5jaGFuZ2VQYWdlKHRoaXMubm90Rm91bmRQYWdlUGF0aCk7XG4gICAgfVxuXG4gICAgLy8gY3VzdG9tIGV2ZW50IGhlcmVcbiAgfVxuXG4gIGFzeW5jIGNoYW5nZVBhZ2UgKHBhdGgsIG1hdGNoKSB7XG4gICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2UuZGVzdHJveSkge1xuICAgICAgdGhpcy5wYWdlLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICB0aGlzLnBhZ2UgPSBhd2FpdCByZW5kZXJQYWdlKHBhdGgsIG1hdGNoKTtcbiAgfVxuXG4gIGFkZExpc3RlbmVyICgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoKSA9PiB0aGlzLnJvdXRlKCkpO1xuICAgIHRoaXMucm91dGUoKTtcbiAgfVxuXG4gIGRvY3VtZW50Q2xpY2sgKGV2ZW50KSB7XG4gICAgY29uc3QgbGluayA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCdhJyk7XG5cbiAgICBpZiAoIWxpbmspIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBocmVmID0gbGluay5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblxuICAgIGNvbnNvbGUubG9nKCdocmVmJywgaHJlZik7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChocmVmICYmIChocmVmLnN0YXJ0c1dpdGgoJy8nKSB8fCBocmVmLnN0YXJ0c1dpdGgoJy4vJykpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5uYXZpZ2F0ZShocmVmKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5QYXRoIChwYXRoKSB7XG4gIGNvbnNvbGUubG9nKCdwYXRoJywgcGF0aCk7XG4gIHJldHVybiBkZWNvZGVVUkkocGF0aClcbiAgICAucmVwbGFjZSgvXlxcL3Nob3AtYWRtaW4tcGFnZS8sICcnKVxuICAgIC5yZXBsYWNlKC9eXFwvfFxcLyQvLCAnJylcbiAgICAucmVwbGFjZSgvXFw/LiokLywgJycpXG4gICAgLnJlcGxhY2UoLyMuKiQvLCAnJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiByZW5kZXJQYWdlIChwYXRoLCBtYXRjaCkge1xuICBjb25zdCB7IGRlZmF1bHQ6IFBhZ2UgfSA9IGF3YWl0IGltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIGAuLi9wYWdlcy8ke3BhdGh9L2luZGV4LmpzYCk7XG4gIGNvbnN0IHBhZ2UgPSBuZXcgUGFnZShtYXRjaCk7XG4gIGNvbnN0IHJlbmRlcmVkUGFnZSA9IGF3YWl0IHBhZ2UucmVuZGVyKCk7XG5cbiAgY29uc3QgY29udGVudEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpO1xuICBjb250ZW50RWxlbS5pbm5lckhUTUwgPSAnJztcbiAgY29udGVudEVsZW0uYXBwZW5kKHJlbmRlcmVkUGFnZSk7XG59XG4iLCJpbXBvcnQgTGF5b3V0IGZyb20gJy4vY29tcG9uZW50cy9MYXlvdXQvaW5kZXguanMnO1xuaW1wb3J0IENvbHVtbkNoYXJ0IGZyb20gJy4vY29tcG9uZW50cy9Db2x1bW5DaGFydC9pbmRleC5qcyc7XG5pbXBvcnQgUmFuZ2VQaWNrZXIgZnJvbSAnLi9jb21wb25lbnRzL1JhbmdlUGlja2VyL2luZGV4LmpzJztcbmltcG9ydCBTb3J0YWJsZVRhYmxlIGZyb20gJy4vY29tcG9uZW50cy9Tb3J0YWJsZVRhYmxlL2luZGV4LmpzJztcbmltcG9ydCBEcmFnZ2FibGVMaXN0IGZyb20gJy4vY29tcG9uZW50cy9EcmFnZ2FibGVMaXN0L2luZGV4LmpzJztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9saWIvUm91dGVyLmpzJztcblxuaW1wb3J0ICcuL2Fzc2V0cy9zY3NzL3N0eWxlcy5zY3NzJztcblxuLy8gUm91dGluZ1xuY29uc3Qgcm91dGVyID0gUm91dGVyLmluc3RhbmNlKCk7XG5cbnJvdXRlclxuICAuYWRkUm91dGUoL14kLywgJ2Rhc2hib2FyZCcpXG4gIC5hZGRSb3V0ZSgvXmNhdGVnb3JpZXMkLywgJ2NhdGVnb3JpZXMnKVxuICAuYWRkUm91dGUoL15wcm9kdWN0c1xcLyhbXFxTKCktXSspL2csICdwcm9kdWN0cy9lZGl0JylcbiAgLmFkZFJvdXRlKC9ecHJvZHVjdHNcXC9hZGQkLywgJ3Byb2R1Y3RzL2VkaXQnKVxuICAuYWRkUm91dGUoL15wcm9kdWN0cyQvLCAncHJvZHVjdHMnKVxuICAuc2V0Tm90Rm91bmRQYWdlKCdlcnJvcjQwNCcpXG4gIC5hZGRMaXN0ZW5lcigpO1xuXG4vLyBJbml0IGN1c3RvbSBlbGVtZW50c1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgncGFnZS1sYXlvdXQnLCBMYXlvdXQpO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnY29sdW1uLWNoYXJ0JywgQ29sdW1uQ2hhcnQpO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgncmFuZ2UtcGlja2VyJywgUmFuZ2VQaWNrZXIpO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc29ydGFibGUtdGFibGUnLCBTb3J0YWJsZVRhYmxlKTtcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2RyYWdnYWJsZS1saXN0JywgRHJhZ2dhYmxlTGlzdCwgeyBleHRlbmRzOiAndWwnIH0pO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBmb3JtOiAncHJvZHVjdC1mb3JtJyxcbiAgbGlzdDogJ3Byb2R1Y3QtZm9ybV9fbGlzdCcsXG4gIGl0ZW06ICdwcm9kdWN0LWZvcm1fX2l0ZW0nLFxuICBpdGVtVGlueTogJ3Byb2R1Y3QtZm9ybV9faXRlbS0tdGlueScsXG4gIGl0ZW1Gb2xsb3c6ICdwcm9kdWN0LWZvcm1fX2l0ZW0tLWZvbGxvdycsXG4gIGl0ZW1GdWxsOiAncHJvZHVjdC1mb3JtX19pdGVtLS1mdWxsJyxcbiAgbGFiZWw6ICdwcm9kdWN0LWZvcm1fX2xhYmVsJyxcbiAgaW5wdXQ6ICdwcm9kdWN0LWZvcm1fX2lucHV0JyxcbiAgaW5wdXRUZXh0OiAncHJvZHVjdC1mb3JtX19pbnB1dC0tdGV4dCcsXG4gIGlucHV0TnVtYmVyOiAncHJvZHVjdC1mb3JtX19pbnB1dC0tbnVtYmVyJyxcbiAgaW5wdXRTZWxlY3Q6ICdwcm9kdWN0LWZvcm1fX2lucHV0LS1zZWxlY3QnLFxuICBpbnB1dFRleHRhcmVhOiAncHJvZHVjdC1mb3JtX19pbnB1dC0tdGV4dGFyZWEnLFxuICBpbWdzTGlzdDogJ3Byb2R1Y3QtZm9ybV9faW1hZ2VzLWxpc3QnLFxuICBpbWdzSXRlbTogJ3Byb2R1Y3QtZm9ybV9faW1hZ2VzLWl0ZW0nLFxuICBpbWc6ICdwcm9kdWN0LWZvcm1fX2ltYWdlJyxcbiAgaW1nV3JhcHBlcjogJ3Byb2R1Y3QtZm9ybV9faW1hZ2Utd3JhcHBlcicsXG4gIGltZ1NvdXJjZTogJ3Byb2R1Y3QtZm9ybV9faW1hZ2Utc291cmNlJyxcbiAgaW1nUmVtb3ZlOiAncHJvZHVjdC1mb3JtX19pbWFnZS1yZW1vdmUnLFxuICBwcmV2aWV3OiAncHJvZHVjdC1mb3JtX19wcmV2aWV3JyxcbiAgZm9vdGVyOiAncHJvZHVjdC1mb3JtX19mb290ZXInLFxuICBzdWJtaXQ6ICdwcm9kdWN0LWZvcm1fX3N1Ym1pdCdcbn07XG4iLCJpbXBvcnQgY2xzIGZyb20gJy4vY2xhc3Nlcy5qcyc7XG5cbmV4cG9ydCBjb25zdCBoZWFkZXIgPSBgPGhlYWRlciBjbGFzcz1cInBhZ2UtY29udGVudF9faGVhZGVyXCI+XG4gIDxoMSBjbGFzcz1cInBhZ2UtY29udGVudF9fdGl0bGVcIj5cbiAgPGEgaHJlZj1cIi9wcm9kdWN0c1wiPlByb2R1Y3RzPC9hPlxuICAvRWRpdCBQcm9kdWN0PC9oMT5cbjwvaGVhZGVyPmA7XG5cbmV4cG9ydCBjb25zdCBpbnB1dFRleHQgPSBgPGxhYmVsIGNsYXNzPVwiJHtjbHMubGFiZWx9XCI+XG4gIHtmaWVsZE5hbWV9XG5cbiAgPGlucHV0XG4gICAgY2xhc3M9XCIke2Nscy5pbnB1dH0gJHtjbHMuaW5wdXRUZXh0fVwiXG4gICAgdHlwZT1cInRleHRcIlxuICAgIG5hbWU9XCJ7aWR9XCJcbiAgICB2YWx1ZT1cInt2YWx1ZX1cIi8+XG48L2xhYmVsPmA7XG5cbmV4cG9ydCBjb25zdCBpbnB1dE51bWJlciA9IGA8bGFiZWwgY2xhc3M9XCIke2Nscy5sYWJlbH1cIj5cbiAge2ZpZWxkTmFtZX1cblxuICA8aW5wdXRcbiAgICBjbGFzcz1cIiR7Y2xzLmlucHV0fSAke2Nscy5pbnB1dE51bWJlcn1cIlxuICAgIHR5cGU9XCJudW1iZXJcIlxuICAgIG5hbWU9XCJ7aWR9XCJcbiAgICB2YWx1ZT1cInt2YWx1ZX1cIi8+XG48L2xhYmVsPmA7XG5cbmV4cG9ydCBjb25zdCBpbnB1dFRleHRhcmVhID0gYDxsYWJlbCBjbGFzcz1cIiR7Y2xzLmxhYmVsfVwiPlxuICB7ZmllbGROYW1lfVxuXG4gIDx0ZXh0YXJlYVxuICAgIGNsYXNzPVwiJHtjbHMuaW5wdXR9ICR7Y2xzLmlucHV0VGV4dGFyZWF9XCJcbiAgICBuYW1lPVwie2lkfVwiPnt2YWx1ZX08L3RleHRhcmVhPlxuPC9sYWJlbD5gO1xuXG5leHBvcnQgY29uc3QgaW5wdXRTZWxlY3QgPSBgPGxhYmVsIGNsYXNzPVwiJHtjbHMubGFiZWx9XCI+XG4gIHtmaWVsZE5hbWV9XG5cbiAgPHNlbGVjdFxuICAgIGNsYXNzPVwiJHtjbHMuaW5wdXR9ICR7Y2xzLmlucHV0U2VsZWN0fVwiXG4gICAgbmFtZT1cIntpZH1cIj5cbiAgICB7b3B0aW9uc31cbiAgPC9zZWxlY3Q+XG48L2xhYmVsPmA7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIDA6ICdEaXNhYmxlZCcsXG4gIDE6ICdFbmFibGVkJ1xufTtcbiIsImltcG9ydCBjbHMgZnJvbSAnLi9jbGFzc2VzLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNhdGVnb3JpZXNUb0ZsYXRMaXN0IChjYXRlZ29yaWVzKSB7XG4gIGNvbnN0IGZsYXRMaXN0ID0gW107XG5cbiAgZm9yIChjb25zdCBjYXRlZ29yeSBvZiBjYXRlZ29yaWVzKSB7XG4gICAgZm9yIChjb25zdCBzdWJjYXRlZ29yeSBvZiBjYXRlZ29yeS5zdWJjYXRlZ29yaWVzKSB7XG4gICAgICBmbGF0TGlzdC5wdXNoKHtcbiAgICAgICAgdmFsdWU6IHN1YmNhdGVnb3J5LmlkLFxuICAgICAgICB0ZXh0OiBgJHtjYXRlZ29yeS50aXRsZX0gPiAke3N1YmNhdGVnb3J5LnRpdGxlfWBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmbGF0TGlzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wdGlvbnMgKGxpc3QsIHNlbGVjdGVkKSB7XG4gIHJldHVybiBsaXN0XG4gICAgLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaXRlbS52YWx1ZSB8fCBpbmRleDtcbiAgICAgIGNvbnN0IHRleHQgPSBpdGVtLnRleHQgfHwgaXRlbTtcbiAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSB2YWx1ZSA9PT0gc2VsZWN0ZWQgPyAnc2VsZWN0ZWQnIDogJyc7XG5cbiAgICAgIHJldHVybiBgPG9wdGlvbiB2YWx1ZT1cIiR7dmFsdWV9XCIgJHtpc1NlbGVjdGVkfT4ke3RleHR9PC9vcHRpb24+YDtcbiAgICB9KVxuICAgIC5qb2luKCcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEltZ3NMaXN0TWFya3VwIChpbWFnZXMpIHtcbiAgY29uc3QgaW1hZ2VzSXRlbXMgPSBpbWFnZXNcbiAgICAubWFwKGl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIGA8bGkgY2xhc3M9XCIke2Nscy5pbWdzSXRlbX1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIiR7Y2xzLmltZ1dyYXBwZXJ9XCI+XG4gICAgICAgICAgPGltZyBzcmM9XCIke2l0ZW0udXJsfVwiIGNsYXNzPVwiJHtjbHMuaW1nfVwiPlxuICAgICAgICAgIDxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7aXRlbS51cmx9KVwiIGNsYXNzPVwiJHtjbHMucHJldmlld31cIj48c3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiJHtjbHMuaW1nU291cmNlfVwiPiR7aXRlbS5zb3VyY2V9PC9zcGFuPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIiR7Y2xzLmltZ1JlbW92ZX1cIj5SZW1vdmU8L2J1dHRvbj5cbiAgICAgIDwvbGk+YDtcbiAgICB9KTtcblxuICByZXR1cm4gYCArIHVwbG9hZFxuICAgIDx1bCBjbGFzcz1cIiR7Y2xzLmltZ3NMaXN0fVwiIGlzPVwiZHJhZ2dhYmxlLWxpc3RcIj4ke2ltYWdlc0l0ZW1zLmpvaW4oJyAnKX08L3VsPmA7XG59XG4iLCJpbXBvcnQgeyBpbnB1dFRleHQsIGlucHV0TnVtYmVyLCBpbnB1dFRleHRhcmVhLCBpbnB1dFNlbGVjdCB9IGZyb20gJy4vdGVtcGxhdGVzLmpzJztcbmltcG9ydCBzdGF0dXNUZXh0IGZyb20gJy4vc3RhdHVzVGV4dC5qcyc7XG5pbXBvcnQgeyBmaWxsVGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCB7IGNhdGVnb3JpZXNUb0ZsYXRMaXN0LCBnZXRPcHRpb25zLCBnZXRJbWdzTGlzdE1hcmt1cCB9IGZyb20gJy4vaGVscGVycyc7XG5cbi8vIFJlbmRlcmluZyBtZXRob2RzIGZvciBwcm9kdWN0IGlucHV0c1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbWFnZXM6IHtcbiAgICByZW5kZXIgKHsgaW1hZ2VzIH0pIHtcbiAgICAgIGlmICghaW1hZ2VzKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldEltZ3NMaXN0TWFya3VwKGltYWdlcyk7XG4gICAgfSxcbiAgICBjb21wYXJlOiBudWxsXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgcmVuZGVyICh7IHRpdGxlIH0pIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGlkOiAndGl0bGUnLFxuICAgICAgICBmaWVsZE5hbWU6ICdOYW1lJyxcbiAgICAgICAgdmFsdWU6IHRpdGxlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZpbGxUZW1wbGF0ZSh7XG4gICAgICAgIHRtcGw6IGlucHV0VGV4dCxcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBkZXNjcmlwdGlvbjoge1xuICAgIHJlbmRlciAoeyBkZXNjcmlwdGlvbiB9KSB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBpZDogJ2Rlc2NyaXB0aW9uJyxcbiAgICAgICAgZmllbGROYW1lOiAnRGVzY3JpcHRpb24nLFxuICAgICAgICB2YWx1ZTogZGVzY3JpcHRpb25cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBmaWxsVGVtcGxhdGUoe1xuICAgICAgICB0bXBsOiBpbnB1dFRleHRhcmVhLFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHN1YmNhdGVnb3J5OiB7XG4gICAgcmVuZGVyICh7IGNhdGVnb3JpZXMsIHN1YmNhdGVnb3J5IH0pIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGlkOiAnc3ViY2F0ZWdvcnknLFxuICAgICAgICBmaWVsZE5hbWU6ICdDYXRlZ29yeScsXG4gICAgICAgIG9wdGlvbnM6IGdldE9wdGlvbnMoY2F0ZWdvcmllc1RvRmxhdExpc3QoY2F0ZWdvcmllcyksIHN1YmNhdGVnb3J5KVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGZpbGxUZW1wbGF0ZSh7XG4gICAgICAgIHRtcGw6IGlucHV0U2VsZWN0LFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHF1YW50aXR5OiB7XG4gICAgcmVuZGVyICh7IHF1YW50aXR5IH0pIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGlkOiAncXVhbnRpdHknLFxuICAgICAgICBmaWVsZE5hbWU6ICdRdWFudGl0eScsXG4gICAgICAgIHZhbHVlOiBxdWFudGl0eVxuICAgICAgfTtcbiAgICAgIHJldHVybiBmaWxsVGVtcGxhdGUoe1xuICAgICAgICB0bXBsOiBpbnB1dE51bWJlcixcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBwcmljZToge1xuICAgIHJlbmRlciAoeyBwcmljZSB9KSB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBpZDogJ3ByaWNlJyxcbiAgICAgICAgZmllbGROYW1lOiAnUHJpY2UnLFxuICAgICAgICB2YWx1ZTogcHJpY2VcbiAgICAgIH07XG4gICAgICByZXR1cm4gZmlsbFRlbXBsYXRlKHtcbiAgICAgICAgdG1wbDogaW5wdXROdW1iZXIsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgZGlzY291bnQ6IHtcbiAgICByZW5kZXIgKHsgZGlzY291bnQgfSkge1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgaWQ6ICdkaXNjb3VudCcsXG4gICAgICAgIGZpZWxkTmFtZTogJ0Rpc2NvdW50JyxcbiAgICAgICAgdmFsdWU6IGRpc2NvdW50XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZpbGxUZW1wbGF0ZSh7XG4gICAgICAgIHRtcGw6IGlucHV0TnVtYmVyLFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHN0YXR1czoge1xuICAgIHJlbmRlciAoeyBzdGF0dXMgfSkge1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgaWQ6ICdzdGF0dXMnLFxuICAgICAgICBmaWVsZE5hbWU6ICdTdGF0dXMnLFxuICAgICAgICB2YWx1ZTogc3RhdHVzLFxuICAgICAgICBvcHRpb25zOiBnZXRPcHRpb25zKE9iamVjdC52YWx1ZXMoc3RhdHVzVGV4dCksIHN0YXR1cylcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBmaWxsVGVtcGxhdGUoe1xuICAgICAgICB0bXBsOiBpbnB1dFNlbGVjdCxcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xuIiwiaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBbXG4gIHtcbiAgICBuYW1lOiAndGl0bGUnXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnZGVzY3JpcHRpb24nLFxuICAgIG1vZHM6IFtjbHMuaXRlbUZ1bGxdXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnaW1hZ2VzJyxcbiAgICBtb2RzOiBbY2xzLml0ZW1GdWxsXVxuICB9LFxuICB7XG4gICAgbmFtZTogJ3N1YmNhdGVnb3J5J1xuICB9LFxuICB7XG4gICAgbmFtZTogJ3ByaWNlJyxcbiAgICBtb2RzOiBbY2xzLml0ZW1UaW55XVxuICB9LFxuICB7XG4gICAgbmFtZTogJ2Rpc2NvdW50JyxcbiAgICBtb2RzOiBbY2xzLml0ZW1UaW55LCBjbHMuaXRlbUZvbGxvd11cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdxdWFudGl0eScsXG4gICAgbW9kczogW2Nscy5pdGVtVGlueV1cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdzdGF0dXMnLFxuICAgIG1vZHM6IFtjbHMuaXRlbVRpbnldXG4gIH1cbl07XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBmZXRjaEpzb24gfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2luZGV4LmpzJztcbmltcG9ydCBQYWdlTWVzc2FnZSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL1BhZ2VNZXNzYWdlL2luZGV4LmpzJztcbmltcG9ydCBmaWVsZHMgZnJvbSAnLi9maWVsZHMuanMnO1xuaW1wb3J0IGZpZWxkc09yZGVyIGZyb20gJy4vZmllbGRzT3JkZXIuanMnO1xuaW1wb3J0IGNscyBmcm9tICcuL2NsYXNzZXMuanMnO1xuaW1wb3J0IHsgaGVhZGVyIH0gZnJvbSAnLi90ZW1wbGF0ZXMnO1xuXG5pbXBvcnQgJy4vaWNvbi10cmFzaC5zdmcnO1xuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yIChtYXRjaCkge1xuICAgIHRoaXMuaWQgPSBtYXRjaFswXS5yZXBsYWNlKCdwcm9kdWN0cy8nLCAnJyk7XG5cbiAgICBpZiAoIW1hdGNoWzBdKSB7XG4gICAgICB0aGlzLmlkID0gJzNkLW9jaGtpLW9wdG9tYS16ZDMwMic7XG4gICAgfVxuXG4gICAgdGhpcy5hcGlVcmwgPSBwcm9jZXNzLmVudi5BUElfVVJMIHx8ICdodHRwczovL2NvdXJzZS1qcy5qYXZhc2NyaXB0LnJ1JztcbiAgICB0aGlzLmZldGNoUHJvZHVjdFVybCA9IHRoaXMuYXBpVXJsICsgYC9hcGkvcmVzdC9wcm9kdWN0cz9pZD0ke3RoaXMuaWR9YDtcbiAgICB0aGlzLmZldGNoQ2F0ZWdvcmllc1VybCA9IHRoaXMuYXBpVXJsICsgJy9hcGkvcmVzdC9jYXRlZ29yaWVzP19zb3J0PXdlaWdodCZfcmVmcz1zdWJjYXRlZ29yeSc7XG4gIH1cblxuICBhc3luYyByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgcHJvZHVjdERhdGEsIGNhdGVnb3JpZXMsIGVycm9yTWVzc2FnZSB9ID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xuXG4gICAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoYDxkaXYgY2xhc3M9XCJwYWdlLWNvbnRlbnRcIj5cbiAgICAgICAgJHtoZWFkZXJ9XG5cbiAgICAgICAgJHtlcnJvck1lc3NhZ2Uub3V0ZXJIVE1MfVxuICAgICAgPC9kaXY+XG4gICAgICBgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9kdWN0ID0gcHJvZHVjdERhdGFbMF07XG4gICAgY29uc3QgaW5wdXRzID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHsgbmFtZSwgbW9kcyB9IG9mIGZpZWxkc09yZGVyKSB7XG4gICAgICBpZiAoZmllbGRzW25hbWVdKSB7XG4gICAgICAgIGxldCBwYXJhbXMgPSBwcm9kdWN0O1xuXG4gICAgICAgIGlmIChuYW1lID09PSAnc3ViY2F0ZWdvcnknKSB7XG4gICAgICAgICAgcGFyYW1zID0ge1xuICAgICAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICAgICAgY2F0ZWdvcmllc1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbnB1dCA9IGZpZWxkc1tuYW1lXS5yZW5kZXIocGFyYW1zKTtcbiAgICAgICAgbGV0IGNsYXNzZXMgPSBbY2xzLml0ZW1dO1xuXG4gICAgICAgIGlmIChtb2RzKSB7XG4gICAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMuY29uY2F0KG1vZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXRzLnB1c2goYDxsaSBjbGFzcz1cIiR7Y2xhc3Nlcy5qb2luKCcgJyl9XCI+JHtpbnB1dH08L2xpPmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KGA8ZGl2IGNsYXNzPVwicGFnZS1jb250ZW50XCI+XG4gICAgICAke2hlYWRlcn1cblxuICAgICAgPGZvcm0gYWN0aW9uPVwiXCIgY2xhc3M9XCIke2Nscy5mb3JtfX1cIj5cbiAgICAgICAgPHVsIGNsYXNzPVwiJHtjbHMubGlzdH1cIj5cbiAgICAgICAgICAke2lucHV0cy5qb2luKCdcXG4nKX1cbiAgICAgICAgPC91bD5cblxuICAgICAgICA8Zm9vdGVyIGNsYXNzPVwiJHtjbHMuZm9vdGVyfVwiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCIke2Nscy5zdWJtaXR9XCI+U2F2ZTwvYnV0dG9uPlxuICAgICAgICA8L2Zvb3Rlcj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5gKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWREYXRhICgpIHtcbiAgICAvLyBUT0RPOiBhZGQgbG9hZGluZyBpbmRpY2F0b3JcbiAgICB0cnkge1xuICAgICAgY29uc3QgcHJvZHVjdERhdGEgPSBhd2FpdCBmZXRjaEpzb24odGhpcy5mZXRjaFByb2R1Y3RVcmwpO1xuICAgICAgY29uc3QgY2F0ZWdvcmllcyA9IGF3YWl0IGZldGNoSnNvbih0aGlzLmZldGNoQ2F0ZWdvcmllc1VybCk7XG5cbiAgICAgIHJldHVybiB7IHByb2R1Y3REYXRhLCBjYXRlZ29yaWVzIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgUGFnZU1lc3NhZ2UoeyBlcnJvciB9KTtcbiAgICAgIHJldHVybiB7IGVycm9yTWVzc2FnZTogbWVzc2FnZS5lbGVtIH07XG4gICAgfVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9