!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="/shop-admin-page/",s(s.s=35)}([function(t,e,s){"use strict";var i="content"in document.createElement("template")?function(t){const e=document.createElement("template");return e.innerHTML=t,e.content.firstElementChild}:function(t){const e=document.createElement("div");return e.innerHTML=t,e.firstElementChild};function n(t){return t.replace(/&/g,"&").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"<").replace(/>/g,">")}function a({tmpl:t,data:e}){if(t&&e)return t.replace(/{([^"]{1,})}/g,(t,s)=>void 0!==e[s]?e[s]:"")}function r(t){const e=new Date(t).toDateString().split(" ");return`${e[1]} ${e[2]}, ${e[3]}`}function o(t){let e=t;if(t>=1e3){const s=t%1e3;e=`${(t-s)/1e3},${s}`}return`$${e}`}function c(t){const e=new Date(1970,0,5);let s="",i=0;for(;i<7;){s+=`<${t}>${e.toLocaleString("default",{weekday:"narrow"})}</${t}>`,e.setDate(e.getDate()+1),i++}return s}function l(t,e,s){let i,n=!1,a=!0;return function(){i=arguments,a&&(t.apply(e,...i),a=!1),n||(n=!0,setTimeout((function(){t.apply(e,...i),n=!1}),s))}}s(17);const d={elem:"notification",warning:"notification--warning",error:"notification--error"};class h{constructor({message:t,container:e,type:s}){this.message=t,this.container=e,this.type=s,this.duration=this.getDuration(),this.classNames=this.getClasses(),this.addElem(),this.isFinished=!1}addElem(){this.elem=document.createElement("div"),this.elem.classList.add(...this.classNames),this.elem.dataset.state="shown",this.elem.innerHTML=this.message,this.container.prepend(this.elem),setTimeout(()=>{this.hideElem()},this.duration)}async hideElem(t={}){return this.isFinished=!0,this.elem.dataset.state="hidden",new Promise((t,e)=>{this.elem.addEventListener("animationend",()=>{this.elem.remove(),t()})})}getDuration(){return"error"===this.type?5e3:3e3}getClasses(){const t=[d.elem];return this.type&&d[this.type]&&t.push(d[this.type]),t}}const u=document.createElement("div");u.classList.add("notifications"),document.body.append(u);let p=[];async function m(t){let e;try{e=await fetch(t)}catch(s){throw new g(e,null,`Network error for url ${t}`)}if(!e.ok){let s;const i=e.statusText;try{s=await e.json()}catch(t){}let n=`Error ${e.status} for url ${t}`;throw i&&(n+=`: ${i}`),new g(e,s,n)}try{e=await e.json()}catch(t){throw new g(e,null,t.message)}return e}class g extends Error{constructor(t,e,s){super(s),this.name="FetchError",this.response=t,this.body=e}}window.addEventListener("unhandledrejection",t=>{t.reason instanceof g&&async function(t,e){const s=new h({message:t,container:u,type:e});p.push(s),s.elem.offsetTop<0&&(p=p.filter(t=>!t.isFinished),p.shift().hideElem())}(t.reason.message,"error")}),s.d(e,"a",(function(){return i})),s.d(e,"b",(function(){return n})),s.d(e,"d",(function(){return a})),s.d(e,"e",(function(){return r})),s.d(e,"f",(function(){return o})),s.d(e,"g",(function(){return c})),s.d(e,"h",(function(){return l})),s.d(e,"c",(function(){return m}))},function(t,e,s){"use strict";e.a={form:"product-form",list:"product-form__list",item:"product-form__item",itemTiny:"product-form__item--tiny",itemFollow:"product-form__item--follow",itemFull:"product-form__item--full",label:"product-form__label",input:"product-form__input",inputText:"product-form__input--text",inputNumber:"product-form__input--number",inputSelect:"product-form__input--select",inputTextarea:"product-form__input--textarea",imgsList:"product-form__images-list",imgsItem:"product-form__images-item",img:"product-form__image",imgWrapper:"product-form__image-wrapper",imgSource:"product-form__image-source",imgRemove:"product-form__image-remove",preview:"product-form__preview",footer:"product-form__footer",submit:"product-form__submit"}},function(t,e,s){"use strict";e.a={elem:"sortable-table",table:"sortable-table__table",thead:"sortable-table__thead",header:"sortable-table__header",row:"sortable-table__row",cell:"sortable-table__cell",cellError:"sortable-table__cell--error",cellSorter:"sortable-table__cell--sorter",img:"sortable-table__image",imgWrapper:"sortable-table__image-wrapper",preview:"sortable-table__preview",link:"sortable-table__link",category:"sortable-table__category",tooltipCategory:"sortable-table__tooltip-category",tooltipSubcategory:"sortable-table__tooltip-subcategory"}},function(t,e,s){"use strict";e.a={elem:"column-chart",content:"column-chart__content",header:"column-chart__header",title:"column-chart__title",total:"column-chart__total",list:"column-chart__list",item:"column-chart__item",tooltip:"column-chart__tooltip",tooltipDate:"column-chart__tooltip-date",tooltipQuantity:"column-chart__tooltip-quantity",error:"column-chart__error"}},function(t,e,s){"use strict";e.a={elem:"categories",list:"categories__list",listTop:"categories__list--topcategories",listSubcats:"categories__list--subcategories",item:"categories__item",itemTop:"categories__item--topcategory",itemSub:"categories__item--subcategory",itemOpen:"categories__item--open",toggler:"categories__toggler",counter:"categories__counter"}},function(t,e,s){"use strict";s.d(e,"a",(function(){return n})),s.d(e,"d",(function(){return a})),s.d(e,"b",(function(){return r})),s.d(e,"e",(function(){return o})),s.d(e,"c",(function(){return c}));var i=s(1);const n='<header class="page-content__header">\n  <h2 class="page-content__title">\n  <a href="./products">Products</a>\n  /Edit Product</h2>\n</header>',a=`<label class="${i.a.label}">\n  {fieldName}\n\n  <input\n    class="${i.a.input} ${i.a.inputText}"\n    type="text"\n    name="{id}"\n    value="{value}"/>\n</label>`,r=`<label class="${i.a.label}">\n  {fieldName}\n\n  <input\n    class="${i.a.input} ${i.a.inputNumber}"\n    type="number"\n    name="{id}"\n    value="{value}"/>\n</label>`,o=`<label class="${i.a.label}">\n  {fieldName}\n\n  <textarea\n    class="${i.a.input} ${i.a.inputTextarea}"\n    name="{id}">{value}</textarea>\n</label>`,c=`<label class="${i.a.label}">\n  {fieldName}\n\n  <select\n    class="${i.a.input} ${i.a.inputSelect}"\n    name="{id}">\n    {options}\n  </select>\n</label>`},function(t,e,s){"use strict";s.d(e,"a",(function(){return i}));s(22);class i{constructor({title:t,text:e,callback:s,callbackText:i,error:n}){this.title=t,this.text=e||"Something went wrong",this.callback=s,this.callbackText=i,this.error=n,!this.title&&this.error&&(this.title="Error"),this.createElement()}createElement(){this.elem=document.createElement("div"),this.elem.classList.add("page-message"),this.error&&this.elem.classList.add("page-message--error"),this.content=`<h3>${this.title}</h3><p>${this.text}</p>`,this.error&&(this.content+=`<div class="page-message__error">\n        <div class="page-message__error-text">\n          <strong>${this.error.name}</strong>: ${this.error.message}</div>\n      </div>`),this.elem.insertAdjacentHTML("afterBegin",this.content)}}},function(t,e,s){"use strict";var i=s(0),n=s(9),a=s(2);e.a={images:{title:"Image",render({images:t}){if(!t||!t[0].url)return"";const e=t[0].url;return`<div class="${a.a.imgWrapper}">\n      <img src="${e}" class="${a.a.img}">\n      <span style="background-image: url(${e})" class="${a.a.preview}"><span>\n      <div>`},compare:null},title:{title:"Name",render:({title:t,id:e})=>`\n      ${t}\n      <a class="${a.a.link}" href="./products/${e}"></a>\n      `,compare:(t,e)=>t.title.localeCompare(e.title)},subcategory:{title:"Category",render({subcategory:t}){const e=t.category,s=`<span class="${a.a.tooltipCategory}">${e.title}</span>/<span class="${a.a.tooltipSubcategory}">${t.title}</span>`;return`<span class="${a.a.category}" data-tooltip-content="${Object(i.b)(s)}">${t.title}</span>`},compare(t,e){const s=t.subcategory.title,i=e.subcategory.title;return s.localeCompare(i)}},quantity:{title:"Quantity",render:({quantity:t})=>t,compare:(t,e)=>t.quantity-e.quantity},price:{title:"Price",render:({price:t})=>Object(i.f)(t),compare:(t,e)=>t.price-e.price},status:{title:"Status",render:({status:t})=>n.a[t],compare:(t,e)=>t.status-e.status}}},function(t,e){var s,i,n=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(t){if(s===setTimeout)return setTimeout(t,0);if((s===a||!s)&&setTimeout)return s=setTimeout,setTimeout(t,0);try{return s(t,0)}catch(e){try{return s.call(null,t,0)}catch(e){return s.call(this,t,0)}}}!function(){try{s="function"==typeof setTimeout?setTimeout:a}catch(t){s=a}try{i="function"==typeof clearTimeout?clearTimeout:r}catch(t){i=r}}();var c,l=[],d=!1,h=-1;function u(){d&&c&&(d=!1,c.length?l=c.concat(l):h=-1,l.length&&p())}function p(){if(!d){var t=o(u);d=!0;for(var e=l.length;e;){for(c=l,l=[];++h<e;)c&&c[h].run();h=-1,e=l.length}c=null,d=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===r||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function m(t,e){this.fun=t,this.array=e}function g(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)e[s-1]=arguments[s];l.push(new m(t,e)),1!==l.length||d||o(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=g,n.addListener=g,n.once=g,n.off=g,n.removeListener=g,n.removeAllListeners=g,n.emit=g,n.prependListener=g,n.prependOnceListener=g,n.listeners=function(t){return[]},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},function(t,e,s){"use strict";e.a={0:"Disabled",1:"Enabled"}},function(t,e,s){"use strict";var i=s(0),n="tooltips-container",a="tooltips-container--dimmed",r="tooltip";s(19);s.d(e,"a",(function(){return o}));class o{constructor({elem:t,dimSiblings:e}){this.elem=t,this.elem.classList.add(n),this.dimSiblings=e,this.tooltip=Object(i.a)(`<div class="${r}"></div>`),this.elem.append(this.tooltip),this.listMouseMove=this.listMouseMove.bind(this),this.listMouseOut=this.listMouseOut.bind(this),this.elem.addEventListener("mousemove",this.listMouseMove),this.elem.addEventListener("mouseleave",this.listMouseOut)}listMouseMove(){if(!event.target.dataset.tooltipContent)return void this.hideTooltip();const{tooltipContent:t}=event.target.dataset;this.tooltip.innerHTML=t,this.tooltip.dataset.visible=1,this.elemCoords=this.elem.getBoundingClientRect();const e={x:event.clientX-this.elemCoords.x,y:event.clientY-this.elemCoords.y};this.tooltip.style=`transform: translate(${e.x}px, ${e.y}px)`,this.tooltipCoords=this.tooltip.getBoundingClientRect();const s=this.tooltipCoords.right-document.documentElement.clientWidth;s>0&&(e.x-=s,this.tooltip.style=`transform: translate(${e.x}px, ${e.y}px)`),this.dimSiblings&&this.elem.classList.add(a)}listMouseOut(){event.target.dataset.tooltipContent||this.hideTooltip()}hideTooltip(){this.tooltip.dataset.visible=0,this.elem.classList.remove(a)}}},function(t,e,s){"use strict";var i={0:"desc",1:"asc"};s.d(e,"a",(function(){return n}));const n=t=>i[+t]},function(t,e,s){"use strict";var i=s(3);const n=`<header class="${i.a.header}">\n  <h3 class="${i.a.title}">{title}</h3>\n  <div class="${i.a.total}">{total}</div>\n</header>`,a=`<li\n  class="${i.a.item}"\n  data-tooltip-content="{tootipContent}"\n  style="height: {height}"></li>`;e.a={header:n,chartItem:a}},function(t,e,s){"use strict";var i=s(5),n={0:"Disabled",1:"Enabled"},a=s(0),r=s(1);function o(t){const e=[];for(const s of t)for(const t of s.subcategories)e.push({value:t.id,text:`${s.title} > ${t.title}`});return e}function c(t,e){return t.map((t,s)=>{const i=t.value||s,n=t.text||t;return`<option value="${i}" ${i===e?"selected":""}>${n}</option>`}).join("")}e.a={images:{render:({images:t})=>t?function(t){const e=t.map(t=>`<li class="${r.a.imgsItem}">\n        <div class="${r.a.imgWrapper}">\n          <img src="${t.url}" class="${r.a.img}">\n          <span style="background-image: url(${t.url})" class="${r.a.preview}"><span>\n        </div>\n        <span class="${r.a.imgSource}">${t.source}</span>\n        <button type="button" class="${r.a.imgRemove}">Remove</button>\n      </li>`);return` + upload\n    <ul class="${r.a.imgsList}" is="draggable-list">${e.join(" ")}</ul>`}(t):"",compare:null},title:{render({title:t}){const e={id:"title",fieldName:"Name",value:t};return Object(a.d)({tmpl:i.d,data:e})}},description:{render({description:t}){const e={id:"description",fieldName:"Description",value:t};return Object(a.d)({tmpl:i.e,data:e})}},subcategory:{render({categories:t,subcategory:e}){const s={id:"subcategory",fieldName:"Category",options:c(o(t),e)};return Object(a.d)({tmpl:i.c,data:s})}},quantity:{render({quantity:t}){const e={id:"quantity",fieldName:"Quantity",value:t};return Object(a.d)({tmpl:i.b,data:e})}},price:{render({price:t}){const e={id:"price",fieldName:"Price",value:t};return Object(a.d)({tmpl:i.b,data:e})}},discount:{render({discount:t}){const e={id:"discount",fieldName:"Discount",value:t};return Object(a.d)({tmpl:i.b,data:e})}},status:{render({status:t}){const e={id:"status",fieldName:"Status",value:t,options:c(Object.values(n),t)};return Object(a.d)({tmpl:i.c,data:e})}}}},function(t,e,s){"use strict";(function(t){s.d(e,"a",(function(){return o}));var i=s(10),n=s(0),a=s(3),r=s(12);s(20);class o extends HTMLElement{constructor(){super(),this.elem=document.createElement("div"),this.apiUrl=t.env.API_URL||"https://course-js.javascript.ru",this.changeDate=this.changeDate.bind(this)}async connectedCallback(){const{type:t,isMoney:e,from:s,to:i}=this.dataset;this.dates={from:new Date(s),to:new Date(i)},this.type=t,this.formatTotal=e?n.f:null,this.classList.add(a.a.elem,`${a.a.elem}--${t}`),this.elem.classList.add(a.a.content),this.title=`Total ${t}`,this.url=this.getUrl(),await this.render(),this.append(this.elem),document.addEventListener("changeDate",this.changeDate)}getUrl(){return`${this.apiUrl}/api/dashboard/${this.type}?from=${this.dates.from}&to=${this.dates.to}`}async getData(){try{return{data:await Object(n.c)(this.url)}}catch(t){return{error:t}}}async render(){const{data:t,error:e}=await this.getData();if(this.data=t,e)return void this.elem.insertAdjacentHTML("beforeEnd",`<div class="${a.a.error}">${e}</div>`);this.values=Object.values(this.data),0===this.values.length&&this.values.push("No data");const s=this.getHeaderStr(),i=this.getListStr();this.elem.insertAdjacentHTML("beforeEnd",s+i),this.addActions()}getHeaderStr(){return this.total=this.values.reduce((t,e)=>t+e,0),this.formatTotal&&(this.total=this.formatTotal(this.total)),Object(n.d)({tmpl:r.a.header,data:this})}getListStr(){const t=Math.max(...this.values);let e="";for(const s in this.data){const i=Object(n.e)(s);let o=this.data[s];const c=`${(o/t*100).toFixed(2)}%`;this.formatTotal&&(o=this.formatTotal(o));const l=`<small class="${a.a.tooltipDate}">${i}</small><div class="${a.a.tooltipQuantity}">${o}</div>`;e+=Object(n.d)({tmpl:r.a.chartItem,data:{...this,height:c,tootipContent:Object(n.b)(l)}})}return`<ul class="${a.a.list}">${e}</ul>`}addActions(){this.tooltips=new i.a({elem:this.elem,dimSiblings:!0})}async changeDate(t){if(!t.detail||!t.detail.dates)return;const{from:e,to:s}=t.detail.dates;this.dates={from:e,to:s},this.url=this.getUrl(),this.elem.innerHTML="",await this.render(),this.append(this.elem)}}}).call(this,s(8))},function(t,e,s){"use strict";(function(t){s.d(e,"a",(function(){return d}));var i=s(10),n=s(2),a=s(9),r=s(7),o=s(0),c=s(11),l=s(6);s(23);class d extends HTMLElement{constructor(){super(),this.sorting={current:null,isAsc:!0},this.page={items:20,current:0,isDataEnded:!1},this.apiUrl=t.env.API_URL||"https://course-js.javascript.ru",this.changeDate=this.changeDate.bind(this)}async connectedCallback(){const{url:t,fieldsList:e,orderField:s,orderDirection:i,isDynamic:n,from:a,to:r}=this.dataset;this.dates={from:a,to:r},this.url=this.apiUrl+t,this.fieldsList=JSON.parse(e.replace(/'/g,'"')),this.isDynamic=+n,this.order={field:s,direction:i},this.initTable=this.initTable.bind(this),this.isLoading=!1,this.order&&void 0!==this.order.direction&&(this.sorting.isAsc=this.order.direction),this.fetchUrl=this.getFetchUrl(),this.onBodyScrollThrottle=Object(o.h)(this.onBodyScroll,this,500),this.initTable(),document.addEventListener("changeDate",this.changeDate)}async loadData(){this.isLoading=!0,this.table.dataset.loading=1;try{const t=await Object(o.c)(this.fetchUrl);return this.isLoading=!1,this.table.dataset.loading=0,t}catch(t){const e=new l.a({error:t});this.table.dataset.loading=0,this.tBody.insertAdjacentHTML("beforeEnd",`<tr class="${n.a.row}"><td class="${n.a.cellError}">${e.elem.outerHTML}</tr>`)}}initTable(){this.createLayout(),this.addElemHeader(),this.addTableEvents(),this.fillTBody()}async fillTBody(){this.page.isDataEnded||(this.tableRows=await this.loadData(),this.tableRows.length<this.page.items&&(this.page.isDataEnded=!0,0===this.tableRows.length)||(!this.isDynamic&&this.order&&this.order.field?this.sortRows(this.order.field):this.renderTBody()))}getFetchUrl(){const t={start:this.page.current*this.page.items,end:(this.page.current+1)*this.page.items,sort:this.order.field,order:Object(c.a)(this.sorting.isAsc)};this.dates&&this.dates.from&&(t.from=this.dates.from,t.to=this.dates.to);let e="";for(const s in t){let i="_";"from"!==s&&"to"!==s||(i=""),e+=`&${i}${s}=${t[s]}`}return this.url+e}createLayout(){this.classList.add(n.a.elem),this.table=document.createElement("table"),this.table.classList.add(n.a.table),this.tBody=document.createElement("tbody"),this.table.append(this.tBody),this.table.insertAdjacentHTML("beforeEnd",`<tfoot><tr><td colspan="${this.fieldsList.length}"><div class="spinner"></div></td></tr></tfoot>`),this.append(this.table)}addElemHeader(){let t="";this.fieldsList.forEach(e=>{let s=n.a.cell;const i={sorter:"",sortDirection:""};if(r.a[e].compare&&(s+=` ${n.a.cellSorter}`,i.sorter='data-sorter="1"'),e===this.order.field){const t=Object(c.a)(this.sorting.isAsc);i.sortDirection=`data-sort-direction="${t}"`}t+=`<th class="${s}"\n        data-name="${e}"\n        ${i.sorter}\n        ${i.sortDirection}\n        >${r.a[e].title}</th>`});const e=`<thead class="${n.a.thead}"><tr class="${n.a.header} ${n.a.row}">\n      ${t}\n    </tr></thead>`;this.table.insertAdjacentHTML("afterBegin",e),this.sorting.current=this.table.querySelector("[data-sort-direction]")}sorterOnClick(t){const{name:e}=t.dataset;t.dataset.sortDirection?this.sorting.isAsc=!this.sorting.isAsc:(this.sorting.current&&delete this.sorting.current.dataset.sortDirection,this.sorting.isAsc=!0,this.sorting.current=t),t.dataset.sortDirection=Object(c.a)(this.sorting.isAsc),this.isDynamic?this.sortRowsDynamic(e):this.sortRows(e)}sortRows(t){this.tableRows.sort(r.a[t].compare),this.sorting.isAsc||this.tableRows.reverse(),this.tBody.innerHTML="",this.renderTBody()}sortRowsDynamic(t){this.order.field=t,this.page.current=0,this.page.isDataEnded=!1,this.fetchUrl=this.getFetchUrl(),this.tBody.innerHTML="",this.fillTBody()}addTableEvents(){this.table.addEventListener("click",this),window.addEventListener("scroll",this.onBodyScrollThrottle),this.tooltips=new i.a({elem:this})}handleEvent(){event.target.dataset.sorter&&this.sorterOnClick(event.target)}onBodyScroll(){if(this.isLoading)return;document.documentElement.getBoundingClientRect().bottom-window.innerHeight<100&&(this.page.current++,this.fetchUrl=this.getFetchUrl(),this.fillTBody())}renderTBody(){this.pageYOffset=window.pageYOffset,this.tableRows.forEach(t=>{let e="";const{status:s}=t;this.fieldsList.forEach(i=>{const o=[n.a.cell,`${n.a.cell}--${i}`,`${n.a.cell}--${a.a[s].toLowerCase()}`],c=(0,r.a[i].render)(t);c&&(e+=`<td class="${o.join(" ")}">${c}</td>`)}),this.tBody.insertAdjacentHTML("beforeEnd",`<tr class="${n.a.row}">${e}</tr>`)}),this.pageYOffset&&window.scrollTo(0,this.pageYOffset)}async changeDate(t){t.detail&&t.detail.dates&&(this.dates=t.detail.dates,this.fetchUrl=this.getFetchUrl(),this.tBody.innerHTML="",this.fillTBody())}}}).call(this,s(8))},function(t,e,s){"use strict";var i=s(1);e.a=[{name:"title"},{name:"description",mods:[i.a.itemFull]},{name:"images",mods:[i.a.itemFull]},{name:"subcategory"},{name:"price",mods:[i.a.itemTiny]},{name:"discount",mods:[i.a.itemTiny,i.a.itemFollow]},{name:"quantity",mods:[i.a.itemTiny]},{name:"status",mods:[i.a.itemTiny]}]},function(t,e,s){},function(t,e,s){},function(t,e,s){},function(t,e,s){},function(t,e,s){},function(t,e,s){},function(t,e,s){},function(t,e,s){},function(t,e,s){var i={"./categories/index.js":26,"./dashboard/index.js":28,"./error404/index.js":29,"./products/edit/index.js":30,"./products/index.js":33};function n(t){return a(t).then(s)}function a(t){return Promise.resolve().then((function(){if(!s.o(i,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return i[t]}))}n.keys=function(){return Object.keys(i)},n.resolve=a,n.id=25,t.exports=n},function(t,e,s){"use strict";s.r(e),function(t){var i=s(0),n=s(6),a=s(4);s(27);e.default=class{constructor(){this.apiUrl=t.env.API_URL||"https://course-js.javascript.ru",this.fetchUrl=`${this.apiUrl}/api/rest/categories?_sort=weight&_refs=subcategory`,this.listClick=this.listClick.bind(this)}async render(){const{categories:t,message:e}=await this.loadData();if(e)return Object(i.a)(`<div class="page-content">\n        <section class="page-section categories">\n          <h2 class="page-section__title">Categories</h2>\n\n          ${e.elem.outerHTML}\n        </section>\n      </div>\n      `);const s=this.createList(t);return this.elem=Object(i.a)(`<div class="page-content">\n      <section class="page-section categories">\n        <h2 class="page-section__title">Categories</h2>\n\n        ${s}\n      </section>\n    </div>`),this.addEvents(),this.elem}async loadData(){try{return{categories:await Object(i.c)(this.fetchUrl)}}catch(t){return{message:new n.a({error:t})}}}createList(t,e=!1){let s="",i=a.a.listTop,n=a.a.item,r="";if(e?(i=a.a.listSubcats,n+=` ${a.a.itemSub}`,r='is="draggable-list"'):n+=` ${a.a.itemTop}`,0===t.length)return"";for(const i of t){let t="",r=i.title;const o=i.subcategories;let c="";if(e){const t=this.getPlural(i.count,["product","products"]);c=`<span class="${a.a.counter}">${t}</span>`}o&&(r=` <button class="${a.a.toggler}">${i.title}</button>`,t=this.createList(o,!0)),s+=`<li class="${n}">\n        ${r}\n        ${c}\n        ${t}\n      </li>`}return`<ul\n      class="${a.a.list} ${i}" ${r}\n      >\n      ${s}\n      ${s}\n    </ul>`}addEvents(){this.elem.querySelector(`.${a.a.listTop}`).addEventListener("click",this.listClick)}listClick(){event.target.closest(`.${a.a.toggler}`)&&event.target.closest(`.${a.a.itemTop}`).classList.toggle(a.a.itemOpen)}getPlural(t,e){let s=e[0];return 1!==t&&(s=e[1]),`${t} ${s}`}}}.call(this,s(8))},function(t,e,s){},function(t,e,s){"use strict";s.r(e);var i=s(0);const n=new Date;n.setMonth(n.getMonth()-1);const a=new Date,r=n.toISOString(),o=a.toISOString();e.default=class{async render(){return Object(i.a)(`<div class="page-content">\n      <header class="page-content__header">\n        <h2 class="page-content__title">Dashboard</h2>\n\n        <range-picker\n          data-from="${r}"\n          data-to="${o}"\n          ></range-picker>\n        </header>\n\n        <section class="page-section page-section--column-charts">\n          <column-chart\n            data-type="orders"\n            data-from="${r}"\n            data-to="${o}"\n          ></column-chart>\n\n          <column-chart\n            data-type="sales"\n            data-is-money="true"\n            data-from="${r}"\n            data-to="${o}"\n          ></column-chart>\n\n          <column-chart\n            data-type="customers"\n            data-from="${r}"\n            data-to="${o}"\n          ></column-chart>\n        </section>\n\n        <section class="page-section">\n          <h3 class="page-section__title">Bestsellers</h3>\n\n        <sortable-table\n          data-url="/api/dashboard/bestsellers?_embed=subcategory.category",\n          data-is-dynamic="0"\n          data-fields-list="['images', 'title', 'subcategory', 'quantity', 'price', 'status']"\n          data-order-field='title',\n          data-order-direction="1"\n          data-from="${r}"\n          data-to="${o}"\n          ></sortable-table>\n        </section>\n      </div>`)}}},function(t,e,s){"use strict";s.r(e);var i=s(0);e.default=class{async render(){return Object(i.a)('<div class="page-content">\n        <section class="page-section page-section--404">\n          <h2 class="page-section__title">Page not found</h2>\n          <p>No such page</p>\n        </section>\n      </div>')}}},function(t,e,s){"use strict";s.r(e),function(t){var i=s(0),n=s(6),a=s(13),r=s(16),o=s(1),c=s(5);s(31),s(32);e.default=class{constructor(e){this.id=e[0].replace("products/",""),e[0]||(this.id="3d-ochki-optoma-zd302"),this.apiUrl=t.env.API_URL||"https://course-js.javascript.ru",this.fetchProductUrl=this.apiUrl+`/api/rest/products?id=${this.id}`,this.fetchCategoriesUrl=this.apiUrl+"/api/rest/categories?_sort=weight&_refs=subcategory"}async render(){const{productData:t,categories:e,errorMessage:s}=await this.loadData();if(s)return Object(i.a)(`<div class="page-content">\n        ${c.a}\n\n        ${s.outerHTML}\n      </div>\n      `);const n=t[0],l=[];for(const{name:t,mods:s}of r.a)if(a.a[t]){let i=n;"subcategory"===t&&(i={...i,categories:e});const r=a.a[t].render(i);let c=[o.a.item];s&&(c=c.concat(s)),l.push(`<li class="${c.join(" ")}">${r}</li>`)}return Object(i.a)(`<div class="page-content">\n      ${c.a}\n\n      <form action="" class="${o.a.form}}">\n        <ul class="${o.a.list}">\n          ${l.join("\n")}\n        </ul>\n\n        <footer class="${o.a.footer}">\n          <button class="${o.a.submit}">Save</button>\n        </footer>\n      </form>\n    </div>`)}async loadData(){try{const t=await Promise.all([Object(i.c)(this.fetchProductUrl),Object(i.c)(this.fetchCategoriesUrl)]);return{productData:t[0],categories:t[1]}}catch(t){return{errorMessage:new n.a({error:t}).elem}}}}}.call(this,s(8))},function(t,e,s){"use strict";s.p},function(t,e,s){},function(t,e,s){"use strict";s.r(e);var i=s(0);e.default=class{async render(){return Object(i.a)("<div class=\"page-content\">\n      <section class=\"page-section\">\n        <h2 class=\"page-section__title\">Products</h2>\n\n        <sortable-table\n          data-url=\"/api/rest/products?_embed=subcategory.category\",\n          data-is-dynamic=\"1\"\n          data-fields-list=\"['images', 'title', 'subcategory', 'quantity', 'price', 'status']\"\n          data-order-field='title',\n          data-order-direction=\"1\"\n          ></sortable-table>\n      </section>\n    </div>")}}},function(t,e,s){},function(t,e,s){"use strict";s.r(e);var i=s(0);s(18);class n extends HTMLElement{connectedCallback(){this.append(this.render()),this.classList.add("page")}render(){return Object(i.a)('<div class="page-container">\n      <aside class="page-aside">\n        <h1 class="page-aside__title">\n          <a href="./">Shop admin</a>\n        </h1>\n\n        <nav class="page-aside__nav">\n          <ul class="page-aside__list">\n            <li class="page-aside__item">\n              <a\n                class="page-aside__link page-aside__link--dashboard"\n                href="./">\n                <span class="page-aside__link-text">\n                  Dashboard\n                </span>\n              </a>\n            </li>\n            <li class="page-aside__item">\n              <a\n                class="page-aside__link page-aside__link--products"\n                href="./products">\n                <span class="page-aside__link-text">\n                  Products\n                </span>\n              </a>\n            </li>\n            <li class="page-aside__item">\n              <a\n                class="page-aside__link page-aside__link--categories"\n                href="./categories">\n                <span class="page-aside__link-text">\n                  Categories\n                </span>\n              </a>\n            </li>\n          </ul>\n        </nav>\n      </aside>\n\n      <main class="page-main" id="content">\n        \x3c!-- main content will be here --\x3e\n      </main>\n    </div>')}}var a=s(14),r="rangepicker",o="rangepicker--open",c="rangepicker__input",l="rangepicker__from",d="rangepicker__to",h="rangepicker__selector",u="rangepicker__selector-control",p="rangepicker__calendars",m="rangepicker__cell",g="rangepicker__selected-from",f="rangepicker__selected-between",b="rangepicker__selected-to";var v={input:`<button class="${c}" data-elem="input" type="button">\n  <span\n    class="${l}"\n    data-elem="from">{from}</span> -\n  <span\n    class="${d}"\n    data-elem="to"\n    >{to}</span>\n</button>`,selector:`\n<div class="${h}" data-elem="selector">\n  <div class="${"rangepicker__selector-arrow"}"></div>\n  <button\n    type="button"\n    class="${u} ${u}--left"\n    data-direction="prev"\n  ></button>\n  <button\n    type="button"\n    class="${u} ${u}--right"\n    data-direction="next"\n  ></button>\n  <div class="${p}"></div>\n</div>\n`,calendar:`\n<div class="${"rangepicker__calendar"}">\n  <div class="${"rangepicker__month-indicator"}">\n    <time datetime="{month}">{month}</time>\n  </div>\n  <div class="${"rangepicker__day-of-week"}">\n    {weekdays}\n  </div>\n  <div class="${"rangepicker__date-grid"}">\n    {days}\n  </div>\n</div>\n`,day:`\n<button type="button" class="${m} {mod}" data-value="{dateTime}" style="{style}">{dateNum}</button>\n`};s(21),s.p,s.p;class _ extends HTMLElement{constructor(){super(),this.togglePicker=this.togglePicker.bind(this),this.selectorOnClick=this.selectorOnClick.bind(this),this.bodyOnClick=this.bodyOnClick.bind(this),this.updateRange=this.updateRange.bind(this),this.isOpened=!1,this.elem=this,this.elem.classList.add("rangepicker")}async connectedCallback(){const{from:t,to:e}=this.dataset;this.dates={from:new Date(t),to:new Date(e)},this.monthes=this.getDisplayedMonthes(),this.newDates=[],this.addInput(),document.addEventListener("changeDate",this.updateRange)}getDisplayedMonthes(){const t=new Date(this.dates.from);let e=t.getMonth();t.setDate(1);const s=new Date(t);return s.setMonth(++e),[t,s]}addInput(){const t={from:this.dates.from.toLocaleDateString(),to:this.dates.to.toLocaleDateString()},e=v.input,s=Object(i.d)({tmpl:e,data:t});this.elem.insertAdjacentHTML("afterBegin",s),this.input=this.elem.querySelector(`.${c}`),this.inputFrom=this.input.querySelector(`.${l}`),this.inputTo=this.input.querySelector(`.${d}`),this.input.addEventListener("pointerdown",this.togglePicker),document.body.addEventListener("pointerdown",this.bodyOnClick,{capture:!0})}bodyOnClick(){!event.target.closest(`.${r}`)&&this.isOpened&&this.hidePicker()}updateInput(){this.inputFrom.innerHTML=this.dates.from.toLocaleDateString(),this.inputTo.innerHTML=this.dates.to.toLocaleDateString()}updateRange(){this.monthes=this.getDisplayedMonthes(),this.newDates=[],this.updateInput(),this.hidePicker()}togglePicker(){this.isOpened?this.hidePicker():(this.showPicker(),this.isOpened=!0)}showPicker(){this.selector?this.calendars.innerHTML="":(this.addSelector(),this.selector=this.elem.querySelector(`.${h}`),this.calendars=this.elem.querySelector(`.${p}`),this.selector.addEventListener("click",this.selectorOnClick)),this.addCalendars(),this.elem.classList.add(o)}hidePicker(){this.elem.classList.remove(o),this.isOpened=!1,this.newDates=[]}addSelector(){const t=v.selector;this.elem.insertAdjacentHTML("beforeEnd",t)}selectorOnClick(){const{dataset:t}=event.target;t.value?this.setDay(event.target):t.direction&&this.moveMonth(t.direction)}setDay(t){const e=t.dataset.value;if(0===this.newDates.length)return this.newDates.push(new Date(e)),void this.updateSelected(t);this.newDates.push(new Date(e)),this.newDates.sort((t,e)=>t-e),this.dates={from:this.newDates[0],to:this.newDates[1]},document.dispatchEvent(new CustomEvent("changeDate",{detail:{dates:{from:this.dates.from.toISOString(),to:this.dates.to.toISOString()}}}))}moveMonth(t){let e=1;"prev"===t&&(e=-1),this.monthes.forEach(t=>{t.setMonth(t.getMonth()+e)}),this.updateCalendars()}addCalendars(){this.monthes.forEach(t=>{this.calendars.insertAdjacentHTML("beforeEnd",this.getCalendar(t))})}updateCalendars(){this.calendars.innerHTML="",this.addCalendars()}updateSelected(t){const e=this.elem.querySelectorAll(`.${m}`),s=[f,g,b];e.forEach(t=>{t.classList.remove(...s)}),t.classList.add(g)}getCalendar(t){const e={month:t.toLocaleString("default",{month:"long"}),weekdays:Object(i.g)("div"),days:this.getCells(t)},s=v.calendar;return Object(i.d)({tmpl:s,data:e})}getCells(t){const e=v.day,s=new Date(t),n=s.getMonth();let a=1,r="";for(;s.getMonth()===n;){const t=this.getCellStartStyle(s),n=this.getCellMod(s),o={dateTime:s.toISOString(),dateNum:s.getDate(),style:t,mod:n};r+=Object(i.d)({tmpl:e,data:o}),s.setDate(++a)}return r}getCellStartStyle(t){let e="";if(t.getDate()>1)return e;let s=t.getDay();return 0===s&&(s=7),e=`grid-column-start: ${s}`,e}getCellMod(t){let e="";if(this.newDates.length>0)return e;const s=t.valueOf(),i=this.dates.from.valueOf(),n=this.dates.to.valueOf();return s>i&&s<n?e=f:s===i?e=g:s===n&&(e=b),e}}var y=s(15);s(24),s.p;const $="draggable-list",w="draggable-list__item",L="draggable-list__item--dragged",T="draggable-list__item--placeholder";class D extends HTMLUListElement{constructor(){super(),this.current={},this.startDrag=this.startDrag.bind(this),this.stopDrag=this.stopDrag.bind(this),this.move=this.move.bind(this),this.setPlaceholderHeight=this.setPlaceholderHeight.bind(this)}async connectedCallback(){this.classList.add($),this.items=this.querySelectorAll("li"),this.placeholder=this.createPlaceholder(),this.addClassToItems(),this.disableDefaultDragstart(),this.addEventListener("pointerdown",this.startDrag),this.addEventListener("pointerdown",this.setPlaceholderHeight,{once:!0})}startDrag(t){this.current.elem=t.target.closest(".draggable-list__item"),this.current.elem&&(t.preventDefault(),this.current.height=this.current.elem.offsetHeight,this.current.half=this.current.height/2,this.current.offset=this.getCurrentOffset(t),this.current.scrollSteps=0,this.coords=this.getListCoords(),this.setCurrentItemTop(t),this.current.elem.replaceWith(this.placeholder),this.current.elem.classList.add(L),this.append(this.current.elem),this.addEventListener("pointermove",this.move),this.addEventListener("pointerup",this.stopDrag),document.addEventListener("pointerup",this.stopDrag))}getCurrentOffset(t){const{top:e}=this.current.elem.getBoundingClientRect();return t.clientY-e}getListCoords(){return this.getBoundingClientRect()}move(t){t.preventDefault(),this.setCurrentItemTop(t),this.scrollOnMove(t);const e=t.clientY-this.coords.top-this.current.half+this.current.half;for(const t of this.items){if(t.classList.contains(L))continue;const s=t.offsetTop,i=s+t.offsetHeight,n=s+t.offsetHeight/2;if(e>s&&e<i){e<=n?t.after(this.placeholder):t.before(this.placeholder);break}}}setCurrentItemTop(t){this.coords=this.getListCoords();let e=t.clientY-this.coords.top-this.current.offset;const s=-this.current.half,i=this.coords.height-this.current.half;e<s?e=s:e>i&&(e=i),this.current.elem.style.top=`${e}px`}scrollOnMove(t){const{top:e,bottom:s}=this.current.elem.getBoundingClientRect(),i=s-document.documentElement.clientHeight,n=document.documentElement.clientTop-e;let a=0;i>0?a=this.current.half:n>0&&(a=-this.current.half),a&&(window.scrollBy(0,a),this.setCurrentItemTop(t),this.current.offset=this.getCurrentOffset(t))}stopDrag(){this.placeholder.replaceWith(this.current.elem),this.current.elem.classList.remove(L),this.current.elem.style.top="",this.removeEventListener("pointermove",this.move),this.removeEventListener("pointerup",this.stopDrag)}createPlaceholder(){const t=this.items[0].cloneNode(!0);return t.classList.add(T,w),t.innerHTML="",t}setPlaceholderHeight(){const t=this.items[0];this.placeholder.style.minHeight=`${t.offsetHeight}px`}addClassToItems(){this.items.forEach(t=>t.classList.add(w))}disableDefaultDragstart(){this.items.forEach(t=>{t.ondragstart=()=>!1})}}class E{constructor(){this.routes=[],this.documentClick=this.documentClick.bind(this),document.addEventListener("click",this.documentClick)}static instance(){return this._instance||(this._instance=new E),this._instance}addRoute(t,e){return this.routes.push({pattern:t,path:e}),this}setNotFoundPage(t){return this.notFoundPagePath=t,this}navigate(t){history.pushState(null,null,t),this.route()}async route(){const t=(e=window.location.pathname,decodeURI(e).replace(/^\/shop-admin-page/,"").replace(/^\/|\/$/,"").replace(/\?.*$/,"").replace(/#.*$/,""));var e;let s;for(const e of this.routes)if(s=t.match(e.pattern),s){this.page=await this.changePage(e.path,s);break}s||(this.page=await this.changePage(this.notFoundPagePath))}async changePage(t,e){this.page&&this.page.destroy&&this.page.destroy(),this.page=await async function(t,e){const{default:i}=await s(25)(`./${t}/index.js`),n=new i(e),a=await n.render(),r=document.getElementById("content");r.innerHTML="",r.append(a)}(t,e)}addListener(){window.addEventListener("popstate",()=>this.route()),this.route()}documentClick(t){const e=t.target.closest("a");if(!e)return;const s=e.getAttribute("href");s&&(s.startsWith("/")||s.startsWith("./"))&&(t.preventDefault(),this.navigate(s))}}s(34);E.instance().addRoute(/^$/,"categories").addRoute(/^categories$/,"categories").addRoute(/^products\/([\S()-]+)/g,"products/edit").addRoute(/^products\/add$/,"products/edit").addRoute(/^products$/,"products").setNotFoundPage("error404").addListener(),window.customElements.define("page-layout",n),window.customElements.define("column-chart",a.a),window.customElements.define("range-picker",_),window.customElements.define("sortable-table",y.a),window.customElements.define("draggable-list",D,{extends:"ul"})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,